/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 324.0, "minX": 0.0, "maxY": 74770.0, "series": [{"data": [[0.0, 324.0], [0.1, 360.0], [0.2, 369.0], [0.3, 377.0], [0.4, 384.0], [0.5, 389.0], [0.6, 395.0], [0.7, 400.0], [0.8, 406.0], [0.9, 412.0], [1.0, 418.0], [1.1, 422.0], [1.2, 428.0], [1.3, 432.0], [1.4, 437.0], [1.5, 441.0], [1.6, 447.0], [1.7, 451.0], [1.8, 455.0], [1.9, 459.0], [2.0, 463.0], [2.1, 467.0], [2.2, 471.0], [2.3, 476.0], [2.4, 481.0], [2.5, 485.0], [2.6, 488.0], [2.7, 491.0], [2.8, 496.0], [2.9, 499.0], [3.0, 502.0], [3.1, 505.0], [3.2, 508.0], [3.3, 512.0], [3.4, 515.0], [3.5, 517.0], [3.6, 520.0], [3.7, 523.0], [3.8, 525.0], [3.9, 528.0], [4.0, 531.0], [4.1, 533.0], [4.2, 536.0], [4.3, 538.0], [4.4, 541.0], [4.5, 544.0], [4.6, 547.0], [4.7, 549.0], [4.8, 552.0], [4.9, 553.0], [5.0, 556.0], [5.1, 558.0], [5.2, 560.0], [5.3, 563.0], [5.4, 565.0], [5.5, 567.0], [5.6, 569.0], [5.7, 570.0], [5.8, 573.0], [5.9, 574.0], [6.0, 576.0], [6.1, 578.0], [6.2, 580.0], [6.3, 582.0], [6.4, 583.0], [6.5, 585.0], [6.6, 586.0], [6.7, 588.0], [6.8, 589.0], [6.9, 591.0], [7.0, 593.0], [7.1, 595.0], [7.2, 596.0], [7.3, 598.0], [7.4, 599.0], [7.5, 601.0], [7.6, 602.0], [7.7, 604.0], [7.8, 605.0], [7.9, 607.0], [8.0, 608.0], [8.1, 609.0], [8.2, 611.0], [8.3, 612.0], [8.4, 614.0], [8.5, 615.0], [8.6, 616.0], [8.7, 618.0], [8.8, 619.0], [8.9, 620.0], [9.0, 621.0], [9.1, 623.0], [9.2, 624.0], [9.3, 625.0], [9.4, 626.0], [9.5, 627.0], [9.6, 628.0], [9.7, 629.0], [9.8, 631.0], [9.9, 632.0], [10.0, 633.0], [10.1, 634.0], [10.2, 635.0], [10.3, 636.0], [10.4, 637.0], [10.5, 638.0], [10.6, 640.0], [10.7, 641.0], [10.8, 642.0], [10.9, 643.0], [11.0, 644.0], [11.1, 644.0], [11.2, 645.0], [11.3, 647.0], [11.4, 648.0], [11.5, 649.0], [11.6, 650.0], [11.7, 651.0], [11.8, 652.0], [11.9, 653.0], [12.0, 654.0], [12.1, 655.0], [12.2, 656.0], [12.3, 657.0], [12.4, 658.0], [12.5, 659.0], [12.6, 660.0], [12.7, 660.0], [12.8, 661.0], [12.9, 662.0], [13.0, 663.0], [13.1, 664.0], [13.2, 665.0], [13.3, 666.0], [13.4, 667.0], [13.5, 668.0], [13.6, 669.0], [13.7, 670.0], [13.8, 670.0], [13.9, 671.0], [14.0, 672.0], [14.1, 673.0], [14.2, 674.0], [14.3, 675.0], [14.4, 675.0], [14.5, 676.0], [14.6, 677.0], [14.7, 678.0], [14.8, 679.0], [14.9, 679.0], [15.0, 680.0], [15.1, 681.0], [15.2, 682.0], [15.3, 682.0], [15.4, 683.0], [15.5, 684.0], [15.6, 685.0], [15.7, 686.0], [15.8, 687.0], [15.9, 687.0], [16.0, 688.0], [16.1, 689.0], [16.2, 689.0], [16.3, 691.0], [16.4, 691.0], [16.5, 692.0], [16.6, 693.0], [16.7, 693.0], [16.8, 694.0], [16.9, 695.0], [17.0, 696.0], [17.1, 697.0], [17.2, 697.0], [17.3, 698.0], [17.4, 698.0], [17.5, 699.0], [17.6, 700.0], [17.7, 701.0], [17.8, 701.0], [17.9, 702.0], [18.0, 703.0], [18.1, 704.0], [18.2, 704.0], [18.3, 705.0], [18.4, 706.0], [18.5, 706.0], [18.6, 707.0], [18.7, 708.0], [18.8, 708.0], [18.9, 709.0], [19.0, 709.0], [19.1, 710.0], [19.2, 711.0], [19.3, 711.0], [19.4, 712.0], [19.5, 713.0], [19.6, 714.0], [19.7, 714.0], [19.8, 715.0], [19.9, 716.0], [20.0, 716.0], [20.1, 717.0], [20.2, 717.0], [20.3, 718.0], [20.4, 719.0], [20.5, 720.0], [20.6, 720.0], [20.7, 721.0], [20.8, 722.0], [20.9, 722.0], [21.0, 723.0], [21.1, 724.0], [21.2, 724.0], [21.3, 725.0], [21.4, 725.0], [21.5, 726.0], [21.6, 727.0], [21.7, 727.0], [21.8, 728.0], [21.9, 728.0], [22.0, 729.0], [22.1, 729.0], [22.2, 730.0], [22.3, 731.0], [22.4, 731.0], [22.5, 732.0], [22.6, 732.0], [22.7, 733.0], [22.8, 733.0], [22.9, 734.0], [23.0, 735.0], [23.1, 735.0], [23.2, 736.0], [23.3, 736.0], [23.4, 737.0], [23.5, 737.0], [23.6, 738.0], [23.7, 739.0], [23.8, 739.0], [23.9, 740.0], [24.0, 740.0], [24.1, 741.0], [24.2, 742.0], [24.3, 742.0], [24.4, 743.0], [24.5, 744.0], [24.6, 744.0], [24.7, 745.0], [24.8, 745.0], [24.9, 746.0], [25.0, 746.0], [25.1, 747.0], [25.2, 748.0], [25.3, 748.0], [25.4, 749.0], [25.5, 749.0], [25.6, 750.0], [25.7, 750.0], [25.8, 751.0], [25.9, 752.0], [26.0, 752.0], [26.1, 753.0], [26.2, 753.0], [26.3, 754.0], [26.4, 754.0], [26.5, 755.0], [26.6, 755.0], [26.7, 756.0], [26.8, 756.0], [26.9, 757.0], [27.0, 757.0], [27.1, 758.0], [27.2, 758.0], [27.3, 759.0], [27.4, 759.0], [27.5, 759.0], [27.6, 760.0], [27.7, 761.0], [27.8, 761.0], [27.9, 762.0], [28.0, 762.0], [28.1, 763.0], [28.2, 763.0], [28.3, 764.0], [28.4, 764.0], [28.5, 765.0], [28.6, 766.0], [28.7, 766.0], [28.8, 767.0], [28.9, 767.0], [29.0, 768.0], [29.1, 768.0], [29.2, 769.0], [29.3, 769.0], [29.4, 770.0], [29.5, 770.0], [29.6, 771.0], [29.7, 771.0], [29.8, 772.0], [29.9, 772.0], [30.0, 773.0], [30.1, 774.0], [30.2, 774.0], [30.3, 775.0], [30.4, 775.0], [30.5, 776.0], [30.6, 777.0], [30.7, 777.0], [30.8, 778.0], [30.9, 778.0], [31.0, 779.0], [31.1, 779.0], [31.2, 780.0], [31.3, 780.0], [31.4, 781.0], [31.5, 781.0], [31.6, 782.0], [31.7, 782.0], [31.8, 783.0], [31.9, 783.0], [32.0, 784.0], [32.1, 784.0], [32.2, 785.0], [32.3, 786.0], [32.4, 786.0], [32.5, 787.0], [32.6, 787.0], [32.7, 788.0], [32.8, 788.0], [32.9, 789.0], [33.0, 789.0], [33.1, 790.0], [33.2, 791.0], [33.3, 791.0], [33.4, 792.0], [33.5, 792.0], [33.6, 793.0], [33.7, 793.0], [33.8, 794.0], [33.9, 794.0], [34.0, 795.0], [34.1, 795.0], [34.2, 796.0], [34.3, 796.0], [34.4, 797.0], [34.5, 797.0], [34.6, 798.0], [34.7, 798.0], [34.8, 799.0], [34.9, 799.0], [35.0, 800.0], [35.1, 801.0], [35.2, 801.0], [35.3, 802.0], [35.4, 802.0], [35.5, 803.0], [35.6, 803.0], [35.7, 804.0], [35.8, 804.0], [35.9, 805.0], [36.0, 806.0], [36.1, 806.0], [36.2, 806.0], [36.3, 807.0], [36.4, 808.0], [36.5, 808.0], [36.6, 809.0], [36.7, 809.0], [36.8, 810.0], [36.9, 810.0], [37.0, 811.0], [37.1, 811.0], [37.2, 812.0], [37.3, 812.0], [37.4, 813.0], [37.5, 813.0], [37.6, 814.0], [37.7, 814.0], [37.8, 815.0], [37.9, 816.0], [38.0, 816.0], [38.1, 817.0], [38.2, 817.0], [38.3, 818.0], [38.4, 818.0], [38.5, 819.0], [38.6, 820.0], [38.7, 820.0], [38.8, 821.0], [38.9, 821.0], [39.0, 822.0], [39.1, 823.0], [39.2, 823.0], [39.3, 824.0], [39.4, 824.0], [39.5, 825.0], [39.6, 825.0], [39.7, 826.0], [39.8, 827.0], [39.9, 827.0], [40.0, 828.0], [40.1, 828.0], [40.2, 829.0], [40.3, 829.0], [40.4, 830.0], [40.5, 830.0], [40.6, 831.0], [40.7, 831.0], [40.8, 832.0], [40.9, 833.0], [41.0, 833.0], [41.1, 834.0], [41.2, 834.0], [41.3, 835.0], [41.4, 835.0], [41.5, 836.0], [41.6, 837.0], [41.7, 837.0], [41.8, 838.0], [41.9, 838.0], [42.0, 839.0], [42.1, 839.0], [42.2, 840.0], [42.3, 840.0], [42.4, 841.0], [42.5, 842.0], [42.6, 842.0], [42.7, 843.0], [42.8, 843.0], [42.9, 844.0], [43.0, 844.0], [43.1, 845.0], [43.2, 846.0], [43.3, 846.0], [43.4, 847.0], [43.5, 847.0], [43.6, 848.0], [43.7, 849.0], [43.8, 849.0], [43.9, 850.0], [44.0, 850.0], [44.1, 851.0], [44.2, 851.0], [44.3, 852.0], [44.4, 852.0], [44.5, 853.0], [44.6, 854.0], [44.7, 855.0], [44.8, 855.0], [44.9, 856.0], [45.0, 856.0], [45.1, 857.0], [45.2, 858.0], [45.3, 858.0], [45.4, 859.0], [45.5, 860.0], [45.6, 860.0], [45.7, 861.0], [45.8, 861.0], [45.9, 862.0], [46.0, 862.0], [46.1, 863.0], [46.2, 864.0], [46.3, 864.0], [46.4, 865.0], [46.5, 865.0], [46.6, 866.0], [46.7, 867.0], [46.8, 867.0], [46.9, 868.0], [47.0, 869.0], [47.1, 869.0], [47.2, 870.0], [47.3, 870.0], [47.4, 871.0], [47.5, 872.0], [47.6, 872.0], [47.7, 873.0], [47.8, 874.0], [47.9, 874.0], [48.0, 875.0], [48.1, 876.0], [48.2, 876.0], [48.3, 877.0], [48.4, 878.0], [48.5, 878.0], [48.6, 879.0], [48.7, 879.0], [48.8, 880.0], [48.9, 881.0], [49.0, 881.0], [49.1, 882.0], [49.2, 883.0], [49.3, 884.0], [49.4, 884.0], [49.5, 885.0], [49.6, 886.0], [49.7, 887.0], [49.8, 887.0], [49.9, 888.0], [50.0, 889.0], [50.1, 889.0], [50.2, 890.0], [50.3, 890.0], [50.4, 891.0], [50.5, 892.0], [50.6, 892.0], [50.7, 893.0], [50.8, 894.0], [50.9, 894.0], [51.0, 895.0], [51.1, 896.0], [51.2, 896.0], [51.3, 897.0], [51.4, 898.0], [51.5, 898.0], [51.6, 899.0], [51.7, 899.0], [51.8, 900.0], [51.9, 901.0], [52.0, 902.0], [52.1, 903.0], [52.2, 903.0], [52.3, 904.0], [52.4, 905.0], [52.5, 906.0], [52.6, 906.0], [52.7, 907.0], [52.8, 908.0], [52.9, 909.0], [53.0, 910.0], [53.1, 910.0], [53.2, 911.0], [53.3, 912.0], [53.4, 912.0], [53.5, 913.0], [53.6, 914.0], [53.7, 915.0], [53.8, 916.0], [53.9, 917.0], [54.0, 917.0], [54.1, 918.0], [54.2, 919.0], [54.3, 920.0], [54.4, 920.0], [54.5, 921.0], [54.6, 922.0], [54.7, 923.0], [54.8, 924.0], [54.9, 925.0], [55.0, 925.0], [55.1, 926.0], [55.2, 927.0], [55.3, 928.0], [55.4, 928.0], [55.5, 929.0], [55.6, 930.0], [55.7, 931.0], [55.8, 932.0], [55.9, 932.0], [56.0, 933.0], [56.1, 934.0], [56.2, 935.0], [56.3, 936.0], [56.4, 937.0], [56.5, 937.0], [56.6, 938.0], [56.7, 939.0], [56.8, 940.0], [56.9, 940.0], [57.0, 941.0], [57.1, 942.0], [57.2, 943.0], [57.3, 944.0], [57.4, 945.0], [57.5, 945.0], [57.6, 946.0], [57.7, 947.0], [57.8, 947.0], [57.9, 948.0], [58.0, 949.0], [58.1, 950.0], [58.2, 951.0], [58.3, 952.0], [58.4, 953.0], [58.5, 954.0], [58.6, 955.0], [58.7, 955.0], [58.8, 956.0], [58.9, 957.0], [59.0, 958.0], [59.1, 959.0], [59.2, 960.0], [59.3, 961.0], [59.4, 962.0], [59.5, 963.0], [59.6, 963.0], [59.7, 965.0], [59.8, 966.0], [59.9, 966.0], [60.0, 967.0], [60.1, 968.0], [60.2, 969.0], [60.3, 970.0], [60.4, 971.0], [60.5, 972.0], [60.6, 973.0], [60.7, 974.0], [60.8, 975.0], [60.9, 976.0], [61.0, 977.0], [61.1, 978.0], [61.2, 979.0], [61.3, 980.0], [61.4, 980.0], [61.5, 981.0], [61.6, 982.0], [61.7, 983.0], [61.8, 984.0], [61.9, 985.0], [62.0, 986.0], [62.1, 987.0], [62.2, 988.0], [62.3, 989.0], [62.4, 990.0], [62.5, 991.0], [62.6, 991.0], [62.7, 992.0], [62.8, 993.0], [62.9, 994.0], [63.0, 995.0], [63.1, 996.0], [63.2, 997.0], [63.3, 999.0], [63.4, 999.0], [63.5, 1001.0], [63.6, 1001.0], [63.7, 1002.0], [63.8, 1003.0], [63.9, 1005.0], [64.0, 1006.0], [64.1, 1006.0], [64.2, 1007.0], [64.3, 1008.0], [64.4, 1009.0], [64.5, 1010.0], [64.6, 1011.0], [64.7, 1013.0], [64.8, 1014.0], [64.9, 1015.0], [65.0, 1016.0], [65.1, 1017.0], [65.2, 1018.0], [65.3, 1019.0], [65.4, 1020.0], [65.5, 1021.0], [65.6, 1022.0], [65.7, 1023.0], [65.8, 1024.0], [65.9, 1025.0], [66.0, 1027.0], [66.1, 1028.0], [66.2, 1029.0], [66.3, 1030.0], [66.4, 1032.0], [66.5, 1033.0], [66.6, 1034.0], [66.7, 1036.0], [66.8, 1037.0], [66.9, 1038.0], [67.0, 1039.0], [67.1, 1040.0], [67.2, 1041.0], [67.3, 1042.0], [67.4, 1044.0], [67.5, 1045.0], [67.6, 1046.0], [67.7, 1048.0], [67.8, 1049.0], [67.9, 1050.0], [68.0, 1052.0], [68.1, 1053.0], [68.2, 1054.0], [68.3, 1055.0], [68.4, 1056.0], [68.5, 1057.0], [68.6, 1059.0], [68.7, 1060.0], [68.8, 1061.0], [68.9, 1063.0], [69.0, 1064.0], [69.1, 1066.0], [69.2, 1067.0], [69.3, 1068.0], [69.4, 1069.0], [69.5, 1070.0], [69.6, 1072.0], [69.7, 1074.0], [69.8, 1076.0], [69.9, 1077.0], [70.0, 1078.0], [70.1, 1080.0], [70.2, 1081.0], [70.3, 1083.0], [70.4, 1084.0], [70.5, 1086.0], [70.6, 1087.0], [70.7, 1089.0], [70.8, 1090.0], [70.9, 1092.0], [71.0, 1093.0], [71.1, 1094.0], [71.2, 1096.0], [71.3, 1097.0], [71.4, 1099.0], [71.5, 1100.0], [71.6, 1102.0], [71.7, 1104.0], [71.8, 1105.0], [71.9, 1106.0], [72.0, 1108.0], [72.1, 1110.0], [72.2, 1112.0], [72.3, 1114.0], [72.4, 1116.0], [72.5, 1118.0], [72.6, 1121.0], [72.7, 1123.0], [72.8, 1125.0], [72.9, 1127.0], [73.0, 1129.0], [73.1, 1132.0], [73.2, 1134.0], [73.3, 1136.0], [73.4, 1138.0], [73.5, 1141.0], [73.6, 1143.0], [73.7, 1145.0], [73.8, 1149.0], [73.9, 1152.0], [74.0, 1155.0], [74.1, 1158.0], [74.2, 1161.0], [74.3, 1165.0], [74.4, 1169.0], [74.5, 1172.0], [74.6, 1177.0], [74.7, 1181.0], [74.8, 1186.0], [74.9, 1192.0], [75.0, 1197.0], [75.1, 1203.0], [75.2, 1210.0], [75.3, 1217.0], [75.4, 1226.0], [75.5, 1235.0], [75.6, 1244.0], [75.7, 1254.0], [75.8, 1264.0], [75.9, 1276.0], [76.0, 1291.0], [76.1, 1306.0], [76.2, 1320.0], [76.3, 1342.0], [76.4, 1364.0], [76.5, 1383.0], [76.6, 1403.0], [76.7, 1422.0], [76.8, 1436.0], [76.9, 1451.0], [77.0, 1467.0], [77.1, 1482.0], [77.2, 1493.0], [77.3, 1506.0], [77.4, 1515.0], [77.5, 1523.0], [77.6, 1535.0], [77.7, 1545.0], [77.8, 1552.0], [77.9, 1560.0], [78.0, 1566.0], [78.1, 1574.0], [78.2, 1580.0], [78.3, 1588.0], [78.4, 1594.0], [78.5, 1602.0], [78.6, 1608.0], [78.7, 1613.0], [78.8, 1618.0], [78.9, 1624.0], [79.0, 1630.0], [79.1, 1636.0], [79.2, 1642.0], [79.3, 1649.0], [79.4, 1655.0], [79.5, 1662.0], [79.6, 1667.0], [79.7, 1673.0], [79.8, 1679.0], [79.9, 1686.0], [80.0, 1691.0], [80.1, 1695.0], [80.2, 1699.0], [80.3, 1705.0], [80.4, 1711.0], [80.5, 1716.0], [80.6, 1722.0], [80.7, 1727.0], [80.8, 1732.0], [80.9, 1736.0], [81.0, 1741.0], [81.1, 1747.0], [81.2, 1751.0], [81.3, 1756.0], [81.4, 1761.0], [81.5, 1767.0], [81.6, 1771.0], [81.7, 1776.0], [81.8, 1779.0], [81.9, 1784.0], [82.0, 1788.0], [82.1, 1791.0], [82.2, 1795.0], [82.3, 1800.0], [82.4, 1804.0], [82.5, 1809.0], [82.6, 1813.0], [82.7, 1818.0], [82.8, 1822.0], [82.9, 1827.0], [83.0, 1832.0], [83.1, 1837.0], [83.2, 1841.0], [83.3, 1845.0], [83.4, 1850.0], [83.5, 1855.0], [83.6, 1861.0], [83.7, 1867.0], [83.8, 1872.0], [83.9, 1879.0], [84.0, 1885.0], [84.1, 1889.0], [84.2, 1896.0], [84.3, 1903.0], [84.4, 1911.0], [84.5, 1919.0], [84.6, 1927.0], [84.7, 1936.0], [84.8, 1943.0], [84.9, 1950.0], [85.0, 1957.0], [85.1, 1965.0], [85.2, 1974.0], [85.3, 1982.0], [85.4, 1988.0], [85.5, 1994.0], [85.6, 2004.0], [85.7, 2013.0], [85.8, 2020.0], [85.9, 2027.0], [86.0, 2036.0], [86.1, 2047.0], [86.2, 2056.0], [86.3, 2064.0], [86.4, 2075.0], [86.5, 2085.0], [86.6, 2093.0], [86.7, 2105.0], [86.8, 2116.0], [86.9, 2126.0], [87.0, 2139.0], [87.1, 2150.0], [87.2, 2161.0], [87.3, 2172.0], [87.4, 2182.0], [87.5, 2194.0], [87.6, 2206.0], [87.7, 2218.0], [87.8, 2233.0], [87.9, 2249.0], [88.0, 2264.0], [88.1, 2275.0], [88.2, 2286.0], [88.3, 2300.0], [88.4, 2314.0], [88.5, 2332.0], [88.6, 2357.0], [88.7, 2376.0], [88.8, 2395.0], [88.9, 2412.0], [89.0, 2426.0], [89.1, 2442.0], [89.2, 2462.0], [89.3, 2482.0], [89.4, 2504.0], [89.5, 2523.0], [89.6, 2555.0], [89.7, 2582.0], [89.8, 2613.0], [89.9, 2650.0], [90.0, 2694.0], [90.1, 2736.0], [90.2, 2773.0], [90.3, 2812.0], [90.4, 2856.0], [90.5, 2910.0], [90.6, 2960.0], [90.7, 3010.0], [90.8, 3059.0], [90.9, 3121.0], [91.0, 3181.0], [91.1, 3228.0], [91.2, 3280.0], [91.3, 3327.0], [91.4, 3367.0], [91.5, 3406.0], [91.6, 3447.0], [91.7, 3485.0], [91.8, 3527.0], [91.9, 3571.0], [92.0, 3619.0], [92.1, 3662.0], [92.2, 3699.0], [92.3, 3749.0], [92.4, 3789.0], [92.5, 3841.0], [92.6, 3889.0], [92.7, 3917.0], [92.8, 3972.0], [92.9, 4022.0], [93.0, 4068.0], [93.1, 4116.0], [93.2, 4156.0], [93.3, 4184.0], [93.4, 4214.0], [93.5, 4246.0], [93.6, 4277.0], [93.7, 4307.0], [93.8, 4351.0], [93.9, 4396.0], [94.0, 4441.0], [94.1, 4487.0], [94.2, 4559.0], [94.3, 4657.0], [94.4, 4753.0], [94.5, 4819.0], [94.6, 4892.0], [94.7, 4988.0], [94.8, 5101.0], [94.9, 5199.0], [95.0, 5308.0], [95.1, 5402.0], [95.2, 5471.0], [95.3, 5540.0], [95.4, 5647.0], [95.5, 5807.0], [95.6, 5924.0], [95.7, 6042.0], [95.8, 6146.0], [95.9, 6299.0], [96.0, 6469.0], [96.1, 6601.0], [96.2, 6702.0], [96.3, 6832.0], [96.4, 6915.0], [96.5, 6999.0], [96.6, 7101.0], [96.7, 7191.0], [96.8, 7280.0], [96.9, 7387.0], [97.0, 7452.0], [97.1, 7549.0], [97.2, 7672.0], [97.3, 7826.0], [97.4, 7940.0], [97.5, 8040.0], [97.6, 8161.0], [97.7, 8293.0], [97.8, 8419.0], [97.9, 8528.0], [98.0, 8655.0], [98.1, 8764.0], [98.2, 8882.0], [98.3, 8988.0], [98.4, 9134.0], [98.5, 9362.0], [98.6, 9554.0], [98.7, 9738.0], [98.8, 10041.0], [98.9, 10379.0], [99.0, 10853.0], [99.1, 11376.0], [99.2, 12148.0], [99.3, 13190.0], [99.4, 14192.0], [99.5, 15232.0], [99.6, 16243.0], [99.7, 17481.0], [99.8, 19538.0], [99.9, 24875.0], [100.0, 74770.0]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[0.0, 3525.0], [0.1, 3525.0], [0.2, 3525.0], [0.3, 3525.0], [0.4, 3525.0], [0.5, 3525.0], [0.6, 3525.0], [0.7, 3525.0], [0.8, 3525.0], [0.9, 3525.0], [1.0, 3525.0], [1.1, 3525.0], [1.2, 3525.0], [1.3, 3525.0], [1.4, 3525.0], [1.5, 3525.0], [1.6, 3525.0], [1.7, 3525.0], [1.8, 3525.0], [1.9, 3525.0], [2.0, 3525.0], [2.1, 3525.0], [2.2, 3525.0], [2.3, 3525.0], [2.4, 3525.0], [2.5, 3525.0], [2.6, 3525.0], [2.7, 3525.0], [2.8, 3525.0], [2.9, 3525.0], [3.0, 3525.0], [3.1, 3525.0], [3.2, 3525.0], [3.3, 3525.0], [3.4, 3525.0], [3.5, 3525.0], [3.6, 3525.0], [3.7, 3525.0], [3.8, 3525.0], [3.9, 3525.0], [4.0, 3525.0], [4.1, 3525.0], [4.2, 3525.0], [4.3, 3525.0], [4.4, 3525.0], [4.5, 3525.0], [4.6, 3525.0], [4.7, 3525.0], [4.8, 3525.0], [4.9, 3525.0], [5.0, 3525.0], [5.1, 3525.0], [5.2, 3525.0], [5.3, 3525.0], [5.4, 3525.0], [5.5, 3525.0], [5.6, 3525.0], [5.7, 3525.0], [5.8, 3525.0], [5.9, 3525.0], [6.0, 3525.0], [6.1, 3525.0], [6.2, 3525.0], [6.3, 3525.0], [6.4, 3525.0], [6.5, 3525.0], [6.6, 3525.0], [6.7, 3525.0], [6.8, 3525.0], [6.9, 3525.0], [7.0, 3525.0], [7.1, 3525.0], [7.2, 3525.0], [7.3, 3525.0], [7.4, 3525.0], [7.5, 3525.0], [7.6, 3525.0], [7.7, 3525.0], [7.8, 3525.0], [7.9, 3525.0], [8.0, 3525.0], [8.1, 3525.0], [8.2, 3525.0], [8.3, 3525.0], [8.4, 3525.0], [8.5, 3525.0], [8.6, 3525.0], [8.7, 3525.0], [8.8, 3525.0], [8.9, 3525.0], [9.0, 3525.0], [9.1, 3525.0], [9.2, 3525.0], [9.3, 3525.0], [9.4, 3525.0], [9.5, 3525.0], [9.6, 3525.0], [9.7, 3525.0], [9.8, 3525.0], [9.9, 3525.0], [10.0, 3525.0], [10.1, 3525.0], [10.2, 3525.0], [10.3, 3525.0], [10.4, 3525.0], [10.5, 3525.0], [10.6, 3525.0], [10.7, 3525.0], [10.8, 3525.0], [10.9, 3525.0], [11.0, 3525.0], [11.1, 3525.0], [11.2, 3525.0], [11.3, 3525.0], [11.4, 3525.0], [11.5, 3525.0], [11.6, 3525.0], [11.7, 3525.0], [11.8, 3525.0], [11.9, 3525.0], [12.0, 3525.0], [12.1, 3525.0], [12.2, 3525.0], [12.3, 3525.0], [12.4, 3525.0], [12.5, 3525.0], [12.6, 3525.0], [12.7, 3525.0], [12.8, 3525.0], [12.9, 3525.0], [13.0, 3525.0], [13.1, 3525.0], [13.2, 3525.0], [13.3, 3525.0], [13.4, 3525.0], [13.5, 3525.0], [13.6, 3525.0], [13.7, 3525.0], [13.8, 3525.0], [13.9, 3525.0], [14.0, 3525.0], [14.1, 3525.0], [14.2, 3525.0], [14.3, 3525.0], [14.4, 3525.0], [14.5, 3525.0], [14.6, 3525.0], [14.7, 3525.0], [14.8, 3525.0], [14.9, 3525.0], [15.0, 3525.0], [15.1, 3525.0], [15.2, 3525.0], [15.3, 3525.0], [15.4, 3525.0], [15.5, 3525.0], [15.6, 3525.0], [15.7, 3525.0], [15.8, 3525.0], [15.9, 3525.0], [16.0, 3525.0], [16.1, 3525.0], [16.2, 3525.0], [16.3, 3525.0], [16.4, 3525.0], [16.5, 3525.0], [16.6, 3525.0], [16.7, 3525.0], [16.8, 3525.0], [16.9, 3525.0], [17.0, 3525.0], [17.1, 3525.0], [17.2, 3525.0], [17.3, 3525.0], [17.4, 3525.0], [17.5, 3525.0], [17.6, 3525.0], [17.7, 3525.0], [17.8, 3525.0], [17.9, 3525.0], [18.0, 3525.0], [18.1, 3525.0], [18.2, 3525.0], [18.3, 3525.0], [18.4, 3525.0], [18.5, 3525.0], [18.6, 3525.0], [18.7, 3525.0], [18.8, 3525.0], [18.9, 3525.0], [19.0, 3525.0], [19.1, 3525.0], [19.2, 3525.0], [19.3, 3525.0], [19.4, 3525.0], [19.5, 3525.0], [19.6, 3525.0], [19.7, 3525.0], [19.8, 3525.0], [19.9, 3525.0], [20.0, 3525.0], [20.1, 3525.0], [20.2, 3525.0], [20.3, 3525.0], [20.4, 3525.0], [20.5, 3525.0], [20.6, 3525.0], [20.7, 3525.0], [20.8, 3525.0], [20.9, 3525.0], [21.0, 3525.0], [21.1, 3525.0], [21.2, 3525.0], [21.3, 3525.0], [21.4, 3525.0], [21.5, 3525.0], [21.6, 3525.0], [21.7, 3525.0], [21.8, 3525.0], [21.9, 3525.0], [22.0, 3525.0], [22.1, 3525.0], [22.2, 3525.0], [22.3, 3525.0], [22.4, 3525.0], [22.5, 3525.0], [22.6, 3525.0], [22.7, 3525.0], [22.8, 3525.0], [22.9, 3525.0], [23.0, 3525.0], [23.1, 3525.0], [23.2, 3525.0], [23.3, 3525.0], [23.4, 3525.0], [23.5, 3525.0], [23.6, 3525.0], [23.7, 3525.0], [23.8, 3525.0], [23.9, 3525.0], [24.0, 3525.0], [24.1, 3525.0], [24.2, 3525.0], [24.3, 3525.0], [24.4, 3525.0], [24.5, 3525.0], [24.6, 3525.0], [24.7, 3525.0], [24.8, 3525.0], [24.9, 3525.0], [25.0, 3525.0], [25.1, 3525.0], [25.2, 3525.0], [25.3, 3525.0], [25.4, 3525.0], [25.5, 3525.0], [25.6, 3525.0], [25.7, 3525.0], [25.8, 3525.0], [25.9, 3525.0], [26.0, 3525.0], [26.1, 3525.0], [26.2, 3525.0], [26.3, 3525.0], [26.4, 3525.0], [26.5, 3525.0], [26.6, 3525.0], [26.7, 3525.0], [26.8, 3525.0], [26.9, 3525.0], [27.0, 3525.0], [27.1, 3525.0], [27.2, 3525.0], [27.3, 3525.0], [27.4, 3525.0], [27.5, 3525.0], [27.6, 3525.0], [27.7, 3525.0], [27.8, 3525.0], [27.9, 3525.0], [28.0, 3525.0], [28.1, 3525.0], [28.2, 3525.0], [28.3, 3525.0], [28.4, 3525.0], [28.5, 3525.0], [28.6, 3525.0], [28.7, 3525.0], [28.8, 3525.0], [28.9, 3525.0], [29.0, 3525.0], [29.1, 3525.0], [29.2, 3525.0], [29.3, 3525.0], [29.4, 3525.0], [29.5, 3525.0], [29.6, 3525.0], [29.7, 3525.0], [29.8, 3525.0], [29.9, 3525.0], [30.0, 3525.0], [30.1, 3525.0], [30.2, 3525.0], [30.3, 3525.0], [30.4, 3525.0], [30.5, 3525.0], [30.6, 3525.0], [30.7, 3525.0], [30.8, 3525.0], [30.9, 3525.0], [31.0, 3525.0], [31.1, 3525.0], [31.2, 3525.0], [31.3, 3525.0], [31.4, 3525.0], [31.5, 3525.0], [31.6, 3525.0], [31.7, 3525.0], [31.8, 3525.0], [31.9, 3525.0], [32.0, 3525.0], [32.1, 3525.0], [32.2, 3525.0], [32.3, 3525.0], [32.4, 3525.0], [32.5, 3525.0], [32.6, 3525.0], [32.7, 3525.0], [32.8, 3525.0], [32.9, 3525.0], [33.0, 3525.0], [33.1, 3525.0], [33.2, 3525.0], [33.3, 3525.0], [33.4, 3525.0], [33.5, 3525.0], [33.6, 3525.0], [33.7, 3525.0], [33.8, 3525.0], [33.9, 3525.0], [34.0, 3525.0], [34.1, 3525.0], [34.2, 3525.0], [34.3, 3525.0], [34.4, 3525.0], [34.5, 3525.0], [34.6, 3525.0], [34.7, 3525.0], [34.8, 3525.0], [34.9, 3525.0], [35.0, 3525.0], [35.1, 3525.0], [35.2, 3525.0], [35.3, 3525.0], [35.4, 3525.0], [35.5, 3525.0], [35.6, 3525.0], [35.7, 3525.0], [35.8, 3525.0], [35.9, 3525.0], [36.0, 3525.0], [36.1, 3525.0], [36.2, 3525.0], [36.3, 3525.0], [36.4, 3525.0], [36.5, 3525.0], [36.6, 3525.0], [36.7, 3525.0], [36.8, 3525.0], [36.9, 3525.0], [37.0, 3525.0], [37.1, 3525.0], [37.2, 3525.0], [37.3, 3525.0], [37.4, 3525.0], [37.5, 3525.0], [37.6, 3525.0], [37.7, 3525.0], [37.8, 3525.0], [37.9, 3525.0], [38.0, 3525.0], [38.1, 3525.0], [38.2, 3525.0], [38.3, 3525.0], [38.4, 3525.0], [38.5, 3525.0], [38.6, 3525.0], [38.7, 3525.0], [38.8, 3525.0], [38.9, 3525.0], [39.0, 3525.0], [39.1, 3525.0], [39.2, 3525.0], [39.3, 3525.0], [39.4, 3525.0], [39.5, 3525.0], [39.6, 3525.0], [39.7, 3525.0], [39.8, 3525.0], [39.9, 3525.0], [40.0, 3525.0], [40.1, 3525.0], [40.2, 3525.0], [40.3, 3525.0], [40.4, 3525.0], [40.5, 3525.0], [40.6, 3525.0], [40.7, 3525.0], [40.8, 3525.0], [40.9, 3525.0], [41.0, 3525.0], [41.1, 3525.0], [41.2, 3525.0], [41.3, 3525.0], [41.4, 3525.0], [41.5, 3525.0], [41.6, 3525.0], [41.7, 3525.0], [41.8, 3525.0], [41.9, 3525.0], [42.0, 3525.0], [42.1, 3525.0], [42.2, 3525.0], [42.3, 3525.0], [42.4, 3525.0], [42.5, 3525.0], [42.6, 3525.0], [42.7, 3525.0], [42.8, 3525.0], [42.9, 3525.0], [43.0, 3525.0], [43.1, 3525.0], [43.2, 3525.0], [43.3, 3525.0], [43.4, 3525.0], [43.5, 3525.0], [43.6, 3525.0], [43.7, 3525.0], [43.8, 3525.0], [43.9, 3525.0], [44.0, 3525.0], [44.1, 3525.0], [44.2, 3525.0], [44.3, 3525.0], [44.4, 3525.0], [44.5, 3525.0], [44.6, 3525.0], [44.7, 3525.0], [44.8, 3525.0], [44.9, 3525.0], [45.0, 3525.0], [45.1, 3525.0], [45.2, 3525.0], [45.3, 3525.0], [45.4, 3525.0], [45.5, 3525.0], [45.6, 3525.0], [45.7, 3525.0], [45.8, 3525.0], [45.9, 3525.0], [46.0, 3525.0], [46.1, 3525.0], [46.2, 3525.0], [46.3, 3525.0], [46.4, 3525.0], [46.5, 3525.0], [46.6, 3525.0], [46.7, 3525.0], [46.8, 3525.0], [46.9, 3525.0], [47.0, 3525.0], [47.1, 3525.0], [47.2, 3525.0], [47.3, 3525.0], [47.4, 3525.0], [47.5, 3525.0], [47.6, 3525.0], [47.7, 3525.0], [47.8, 3525.0], [47.9, 3525.0], [48.0, 3525.0], [48.1, 3525.0], [48.2, 3525.0], [48.3, 3525.0], [48.4, 3525.0], [48.5, 3525.0], [48.6, 3525.0], [48.7, 3525.0], [48.8, 3525.0], [48.9, 3525.0], [49.0, 3525.0], [49.1, 3525.0], [49.2, 3525.0], [49.3, 3525.0], [49.4, 3525.0], [49.5, 3525.0], [49.6, 3525.0], [49.7, 3525.0], [49.8, 3525.0], [49.9, 3525.0], [50.0, 3525.0], [50.1, 3525.0], [50.2, 3525.0], [50.3, 3525.0], [50.4, 3525.0], [50.5, 3525.0], [50.6, 3525.0], [50.7, 3525.0], [50.8, 3525.0], [50.9, 3525.0], [51.0, 3525.0], [51.1, 3525.0], [51.2, 3525.0], [51.3, 3525.0], [51.4, 3525.0], [51.5, 3525.0], [51.6, 3525.0], [51.7, 3525.0], [51.8, 3525.0], [51.9, 3525.0], [52.0, 3525.0], [52.1, 3525.0], [52.2, 3525.0], [52.3, 3525.0], [52.4, 3525.0], [52.5, 3525.0], [52.6, 3525.0], [52.7, 3525.0], [52.8, 3525.0], [52.9, 3525.0], [53.0, 3525.0], [53.1, 3525.0], [53.2, 3525.0], [53.3, 3525.0], [53.4, 3525.0], [53.5, 3525.0], [53.6, 3525.0], [53.7, 3525.0], [53.8, 3525.0], [53.9, 3525.0], [54.0, 3525.0], [54.1, 3525.0], [54.2, 3525.0], [54.3, 3525.0], [54.4, 3525.0], [54.5, 3525.0], [54.6, 3525.0], [54.7, 3525.0], [54.8, 3525.0], [54.9, 3525.0], [55.0, 3525.0], [55.1, 3525.0], [55.2, 3525.0], [55.3, 3525.0], [55.4, 3525.0], [55.5, 3525.0], [55.6, 3525.0], [55.7, 3525.0], [55.8, 3525.0], [55.9, 3525.0], [56.0, 3525.0], [56.1, 3525.0], [56.2, 3525.0], [56.3, 3525.0], [56.4, 3525.0], [56.5, 3525.0], [56.6, 3525.0], [56.7, 3525.0], [56.8, 3525.0], [56.9, 3525.0], [57.0, 3525.0], [57.1, 3525.0], [57.2, 3525.0], [57.3, 3525.0], [57.4, 3525.0], [57.5, 3525.0], [57.6, 3525.0], [57.7, 3525.0], [57.8, 3525.0], [57.9, 3525.0], [58.0, 3525.0], [58.1, 3525.0], [58.2, 3525.0], [58.3, 3525.0], [58.4, 3525.0], [58.5, 3525.0], [58.6, 3525.0], [58.7, 3525.0], [58.8, 3525.0], [58.9, 3525.0], [59.0, 3525.0], [59.1, 3525.0], [59.2, 3525.0], [59.3, 3525.0], [59.4, 3525.0], [59.5, 3525.0], [59.6, 3525.0], [59.7, 3525.0], [59.8, 3525.0], [59.9, 3525.0], [60.0, 3525.0], [60.1, 3525.0], [60.2, 3525.0], [60.3, 3525.0], [60.4, 3525.0], [60.5, 3525.0], [60.6, 3525.0], [60.7, 3525.0], [60.8, 3525.0], [60.9, 3525.0], [61.0, 3525.0], [61.1, 3525.0], [61.2, 3525.0], [61.3, 3525.0], [61.4, 3525.0], [61.5, 3525.0], [61.6, 3525.0], [61.7, 3525.0], [61.8, 3525.0], [61.9, 3525.0], [62.0, 3525.0], [62.1, 3525.0], [62.2, 3525.0], [62.3, 3525.0], [62.4, 3525.0], [62.5, 3525.0], [62.6, 3525.0], [62.7, 3525.0], [62.8, 3525.0], [62.9, 3525.0], [63.0, 3525.0], [63.1, 3525.0], [63.2, 3525.0], [63.3, 3525.0], [63.4, 3525.0], [63.5, 3525.0], [63.6, 3525.0], [63.7, 3525.0], [63.8, 3525.0], [63.9, 3525.0], [64.0, 3525.0], [64.1, 3525.0], [64.2, 3525.0], [64.3, 3525.0], [64.4, 3525.0], [64.5, 3525.0], [64.6, 3525.0], [64.7, 3525.0], [64.8, 3525.0], [64.9, 3525.0], [65.0, 3525.0], [65.1, 3525.0], [65.2, 3525.0], [65.3, 3525.0], [65.4, 3525.0], [65.5, 3525.0], [65.6, 3525.0], [65.7, 3525.0], [65.8, 3525.0], [65.9, 3525.0], [66.0, 3525.0], [66.1, 3525.0], [66.2, 3525.0], [66.3, 3525.0], [66.4, 3525.0], [66.5, 3525.0], [66.6, 3525.0], [66.7, 3525.0], [66.8, 3525.0], [66.9, 3525.0], [67.0, 3525.0], [67.1, 3525.0], [67.2, 3525.0], [67.3, 3525.0], [67.4, 3525.0], [67.5, 3525.0], [67.6, 3525.0], [67.7, 3525.0], [67.8, 3525.0], [67.9, 3525.0], [68.0, 3525.0], [68.1, 3525.0], [68.2, 3525.0], [68.3, 3525.0], [68.4, 3525.0], [68.5, 3525.0], [68.6, 3525.0], [68.7, 3525.0], [68.8, 3525.0], [68.9, 3525.0], [69.0, 3525.0], [69.1, 3525.0], [69.2, 3525.0], [69.3, 3525.0], [69.4, 3525.0], [69.5, 3525.0], [69.6, 3525.0], [69.7, 3525.0], [69.8, 3525.0], [69.9, 3525.0], [70.0, 3525.0], [70.1, 3525.0], [70.2, 3525.0], [70.3, 3525.0], [70.4, 3525.0], [70.5, 3525.0], [70.6, 3525.0], [70.7, 3525.0], [70.8, 3525.0], [70.9, 3525.0], [71.0, 3525.0], [71.1, 3525.0], [71.2, 3525.0], [71.3, 3525.0], [71.4, 3525.0], [71.5, 3525.0], [71.6, 3525.0], [71.7, 3525.0], [71.8, 3525.0], [71.9, 3525.0], [72.0, 3525.0], [72.1, 3525.0], [72.2, 3525.0], [72.3, 3525.0], [72.4, 3525.0], [72.5, 3525.0], [72.6, 3525.0], [72.7, 3525.0], [72.8, 3525.0], [72.9, 3525.0], [73.0, 3525.0], [73.1, 3525.0], [73.2, 3525.0], [73.3, 3525.0], [73.4, 3525.0], [73.5, 3525.0], [73.6, 3525.0], [73.7, 3525.0], [73.8, 3525.0], [73.9, 3525.0], [74.0, 3525.0], [74.1, 3525.0], [74.2, 3525.0], [74.3, 3525.0], [74.4, 3525.0], [74.5, 3525.0], [74.6, 3525.0], [74.7, 3525.0], [74.8, 3525.0], [74.9, 3525.0], [75.0, 3525.0], [75.1, 3525.0], [75.2, 3525.0], [75.3, 3525.0], [75.4, 3525.0], [75.5, 3525.0], [75.6, 3525.0], [75.7, 3525.0], [75.8, 3525.0], [75.9, 3525.0], [76.0, 3525.0], [76.1, 3525.0], [76.2, 3525.0], [76.3, 3525.0], [76.4, 3525.0], [76.5, 3525.0], [76.6, 3525.0], [76.7, 3525.0], [76.8, 3525.0], [76.9, 3525.0], [77.0, 3525.0], [77.1, 3525.0], [77.2, 3525.0], [77.3, 3525.0], [77.4, 3525.0], [77.5, 3525.0], [77.6, 3525.0], [77.7, 3525.0], [77.8, 3525.0], [77.9, 3525.0], [78.0, 3525.0], [78.1, 3525.0], [78.2, 3525.0], [78.3, 3525.0], [78.4, 3525.0], [78.5, 3525.0], [78.6, 3525.0], [78.7, 3525.0], [78.8, 3525.0], [78.9, 3525.0], [79.0, 3525.0], [79.1, 3525.0], [79.2, 3525.0], [79.3, 3525.0], [79.4, 3525.0], [79.5, 3525.0], [79.6, 3525.0], [79.7, 3525.0], [79.8, 3525.0], [79.9, 3525.0], [80.0, 3525.0], [80.1, 3525.0], [80.2, 3525.0], [80.3, 3525.0], [80.4, 3525.0], [80.5, 3525.0], [80.6, 3525.0], [80.7, 3525.0], [80.8, 3525.0], [80.9, 3525.0], [81.0, 3525.0], [81.1, 3525.0], [81.2, 3525.0], [81.3, 3525.0], [81.4, 3525.0], [81.5, 3525.0], [81.6, 3525.0], [81.7, 3525.0], [81.8, 3525.0], [81.9, 3525.0], [82.0, 3525.0], [82.1, 3525.0], [82.2, 3525.0], [82.3, 3525.0], [82.4, 3525.0], [82.5, 3525.0], [82.6, 3525.0], [82.7, 3525.0], [82.8, 3525.0], [82.9, 3525.0], [83.0, 3525.0], [83.1, 3525.0], [83.2, 3525.0], [83.3, 3525.0], [83.4, 3525.0], [83.5, 3525.0], [83.6, 3525.0], [83.7, 3525.0], [83.8, 3525.0], [83.9, 3525.0], [84.0, 3525.0], [84.1, 3525.0], [84.2, 3525.0], [84.3, 3525.0], [84.4, 3525.0], [84.5, 3525.0], [84.6, 3525.0], [84.7, 3525.0], [84.8, 3525.0], [84.9, 3525.0], [85.0, 3525.0], [85.1, 3525.0], [85.2, 3525.0], [85.3, 3525.0], [85.4, 3525.0], [85.5, 3525.0], [85.6, 3525.0], [85.7, 3525.0], [85.8, 3525.0], [85.9, 3525.0], [86.0, 3525.0], [86.1, 3525.0], [86.2, 3525.0], [86.3, 3525.0], [86.4, 3525.0], [86.5, 3525.0], [86.6, 3525.0], [86.7, 3525.0], [86.8, 3525.0], [86.9, 3525.0], [87.0, 3525.0], [87.1, 3525.0], [87.2, 3525.0], [87.3, 3525.0], [87.4, 3525.0], [87.5, 3525.0], [87.6, 3525.0], [87.7, 3525.0], [87.8, 3525.0], [87.9, 3525.0], [88.0, 3525.0], [88.1, 3525.0], [88.2, 3525.0], [88.3, 3525.0], [88.4, 3525.0], [88.5, 3525.0], [88.6, 3525.0], [88.7, 3525.0], [88.8, 3525.0], [88.9, 3525.0], [89.0, 3525.0], [89.1, 3525.0], [89.2, 3525.0], [89.3, 3525.0], [89.4, 3525.0], [89.5, 3525.0], [89.6, 3525.0], [89.7, 3525.0], [89.8, 3525.0], [89.9, 3525.0], [90.0, 3525.0], [90.1, 3525.0], [90.2, 3525.0], [90.3, 3525.0], [90.4, 3525.0], [90.5, 3525.0], [90.6, 3525.0], [90.7, 3525.0], [90.8, 3525.0], [90.9, 3525.0], [91.0, 3525.0], [91.1, 3525.0], [91.2, 3525.0], [91.3, 3525.0], [91.4, 3525.0], [91.5, 3525.0], [91.6, 3525.0], [91.7, 3525.0], [91.8, 3525.0], [91.9, 3525.0], [92.0, 3525.0], [92.1, 3525.0], [92.2, 3525.0], [92.3, 3525.0], [92.4, 3525.0], [92.5, 3525.0], [92.6, 3525.0], [92.7, 3525.0], [92.8, 3525.0], [92.9, 3525.0], [93.0, 3525.0], [93.1, 3525.0], [93.2, 3525.0], [93.3, 3525.0], [93.4, 3525.0], [93.5, 3525.0], [93.6, 3525.0], [93.7, 3525.0], [93.8, 3525.0], [93.9, 3525.0], [94.0, 3525.0], [94.1, 3525.0], [94.2, 3525.0], [94.3, 3525.0], [94.4, 3525.0], [94.5, 3525.0], [94.6, 3525.0], [94.7, 3525.0], [94.8, 3525.0], [94.9, 3525.0], [95.0, 3525.0], [95.1, 3525.0], [95.2, 3525.0], [95.3, 3525.0], [95.4, 3525.0], [95.5, 3525.0], [95.6, 3525.0], [95.7, 3525.0], [95.8, 3525.0], [95.9, 3525.0], [96.0, 3525.0], [96.1, 3525.0], [96.2, 3525.0], [96.3, 3525.0], [96.4, 3525.0], [96.5, 3525.0], [96.6, 3525.0], [96.7, 3525.0], [96.8, 3525.0], [96.9, 3525.0], [97.0, 3525.0], [97.1, 3525.0], [97.2, 3525.0], [97.3, 3525.0], [97.4, 3525.0], [97.5, 3525.0], [97.6, 3525.0], [97.7, 3525.0], [97.8, 3525.0], [97.9, 3525.0], [98.0, 3525.0], [98.1, 3525.0], [98.2, 3525.0], [98.3, 3525.0], [98.4, 3525.0], [98.5, 3525.0], [98.6, 3525.0], [98.7, 3525.0], [98.8, 3525.0], [98.9, 3525.0], [99.0, 3525.0], [99.1, 3525.0], [99.2, 3525.0], [99.3, 3525.0], [99.4, 3525.0], [99.5, 3525.0], [99.6, 3525.0], [99.7, 3525.0], [99.8, 3525.0], [99.9, 3525.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 8487.0, "series": [{"data": [[74700.0, 1.0], [34500.0, 1.0], [38500.0, 1.0], [37700.0, 1.0], [48900.0, 1.0], [300.0, 336.0], [400.0, 1094.0], [500.0, 2191.0], [600.0, 4947.0], [700.0, 8487.0], [800.0, 8207.0], [900.0, 5715.0], [1000.0, 3922.0], [1100.0, 1766.0], [1200.0, 490.0], [1300.0, 256.0], [1400.0, 326.0], [1500.0, 598.0], [1600.0, 851.0], [1700.0, 1019.0], [1800.0, 951.0], [1900.0, 642.0], [2000.0, 533.0], [2100.0, 437.0], [2200.0, 365.0], [2300.0, 263.0], [2400.0, 270.0], [2500.0, 184.0], [2600.0, 129.0], [2800.0, 102.0], [2700.0, 124.0], [2900.0, 91.0], [3000.0, 100.0], [3100.0, 84.0], [3200.0, 97.0], [3300.0, 117.0], [3400.0, 123.0], [3500.0, 113.0], [3600.0, 115.0], [3700.0, 107.0], [3800.0, 108.0], [3900.0, 109.0], [4000.0, 100.0], [4100.0, 140.0], [4200.0, 156.0], [4300.0, 115.0], [4400.0, 99.0], [4500.0, 69.0], [4600.0, 46.0], [4700.0, 54.0], [4800.0, 71.0], [5000.0, 41.0], [5100.0, 50.0], [4900.0, 54.0], [5200.0, 42.0], [5300.0, 55.0], [5400.0, 68.0], [5500.0, 60.0], [5600.0, 35.0], [5700.0, 29.0], [5800.0, 40.0], [5900.0, 39.0], [6100.0, 41.0], [6000.0, 47.0], [6200.0, 32.0], [6300.0, 28.0], [6400.0, 30.0], [6500.0, 38.0], [6600.0, 49.0], [6800.0, 50.0], [6700.0, 42.0], [6900.0, 57.0], [7100.0, 61.0], [7000.0, 45.0], [7200.0, 48.0], [7300.0, 54.0], [7400.0, 60.0], [7500.0, 48.0], [7600.0, 35.0], [7800.0, 44.0], [7900.0, 42.0], [7700.0, 27.0], [8100.0, 38.0], [8000.0, 49.0], [8700.0, 43.0], [8600.0, 40.0], [8200.0, 41.0], [8300.0, 29.0], [8500.0, 41.0], [8400.0, 51.0], [8800.0, 41.0], [9100.0, 23.0], [8900.0, 48.0], [9200.0, 18.0], [9000.0, 34.0], [9300.0, 28.0], [9500.0, 25.0], [9600.0, 33.0], [9400.0, 20.0], [9700.0, 19.0], [10200.0, 14.0], [9900.0, 11.0], [10000.0, 19.0], [9800.0, 22.0], [10100.0, 11.0], [10400.0, 16.0], [10300.0, 14.0], [10600.0, 13.0], [10700.0, 9.0], [10500.0, 4.0], [11200.0, 12.0], [11100.0, 5.0], [10900.0, 14.0], [11000.0, 5.0], [10800.0, 5.0], [11300.0, 13.0], [11400.0, 4.0], [11700.0, 11.0], [11600.0, 4.0], [11500.0, 7.0], [11800.0, 7.0], [11900.0, 5.0], [12200.0, 4.0], [12100.0, 7.0], [12000.0, 3.0], [12600.0, 6.0], [12300.0, 3.0], [12500.0, 6.0], [12400.0, 2.0], [12800.0, 5.0], [13200.0, 3.0], [13000.0, 8.0], [13100.0, 9.0], [13300.0, 8.0], [12900.0, 5.0], [13800.0, 6.0], [13500.0, 5.0], [13400.0, 2.0], [13600.0, 5.0], [13900.0, 7.0], [14000.0, 5.0], [14300.0, 5.0], [14100.0, 7.0], [14200.0, 3.0], [14600.0, 4.0], [14700.0, 8.0], [14500.0, 3.0], [14400.0, 8.0], [14800.0, 2.0], [15000.0, 6.0], [15100.0, 4.0], [15300.0, 6.0], [15200.0, 5.0], [14900.0, 2.0], [15400.0, 17.0], [15600.0, 2.0], [15500.0, 3.0], [15700.0, 2.0], [15800.0, 3.0], [15900.0, 2.0], [16000.0, 6.0], [16100.0, 4.0], [16200.0, 6.0], [16300.0, 2.0], [17200.0, 3.0], [16800.0, 9.0], [16400.0, 6.0], [17400.0, 6.0], [16600.0, 1.0], [17000.0, 4.0], [18000.0, 4.0], [18200.0, 6.0], [17800.0, 5.0], [17600.0, 2.0], [18800.0, 3.0], [19200.0, 2.0], [18600.0, 2.0], [19000.0, 2.0], [20000.0, 2.0], [20200.0, 2.0], [20400.0, 1.0], [21000.0, 1.0], [21200.0, 1.0], [20600.0, 1.0], [20800.0, 4.0], [21800.0, 4.0], [21600.0, 3.0], [22000.0, 1.0], [23400.0, 1.0], [22800.0, 1.0], [22600.0, 1.0], [24600.0, 1.0], [25200.0, 1.0], [25000.0, 3.0], [24800.0, 3.0], [25400.0, 1.0], [25600.0, 1.0], [26000.0, 1.0], [25800.0, 1.0], [27800.0, 1.0], [29600.0, 1.0], [29800.0, 1.0], [31600.0, 3.0], [31400.0, 1.0], [32600.0, 1.0], [32000.0, 1.0], [33600.0, 1.0], [52000.0, 1.0], [60800.0, 1.0], [35500.0, 1.0], [17100.0, 3.0], [16500.0, 2.0], [16700.0, 4.0], [17300.0, 2.0], [16900.0, 5.0], [17700.0, 7.0], [18100.0, 4.0], [18300.0, 1.0], [17900.0, 1.0], [18700.0, 2.0], [18500.0, 1.0], [18900.0, 2.0], [19100.0, 2.0], [19300.0, 1.0], [19700.0, 2.0], [20300.0, 4.0], [20100.0, 2.0], [19900.0, 2.0], [19500.0, 1.0], [20700.0, 1.0], [21500.0, 2.0], [20500.0, 1.0], [21900.0, 2.0], [22500.0, 1.0], [23300.0, 1.0], [23500.0, 1.0], [24100.0, 1.0], [24300.0, 2.0], [23900.0, 1.0], [25500.0, 4.0], [24900.0, 1.0], [24700.0, 1.0], [26300.0, 2.0], [27100.0, 1.0], [29300.0, 1.0], [30100.0, 2.0], [29700.0, 2.0], [31500.0, 2.0], [32500.0, 1.0], [32700.0, 2.0], [55800.0, 1.0], [56600.0, 1.0]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[3500.0, 1.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 74700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 36300.0, "series": [{"data": [[0.0, 1442.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 36300.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 11112.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.71950052E12, "maxY": 150.0, "series": [{"data": [[1.71950052E12, 1.0]], "isOverall": false, "label": "setUpAutenticacionCognito", "isController": false}, {"data": [[1.71950058E12, 136.83854893362567], [1.71950106E12, 150.0], [1.71950088E12, 150.0], [1.71950094E12, 150.0], [1.71950076E12, 150.0], [1.71950082E12, 150.0], [1.71950064E12, 150.0], [1.7195007E12, 150.0], [1.71950112E12, 144.80214652356523], [1.71950052E12, 55.241001564945186], [1.719501E12, 150.0]], "isOverall": false, "label": "consultarPlaca", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71950112E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 390.20000000000005, "minX": 1.0, "maxY": 13109.0, "series": [{"data": [[2.0, 13109.0], [3.0, 4806.0], [4.0, 421.0], [5.0, 3591.0], [6.0, 1988.6], [7.0, 4184.25], [8.0, 1722.0], [9.0, 1959.0], [10.0, 1144.4285714285713], [11.0, 1138.0], [12.0, 390.20000000000005], [13.0, 1427.75], [14.0, 1022.8571428571429], [15.0, 740.5], [16.0, 851.7777777777777], [17.0, 454.5], [18.0, 877.142857142857], [19.0, 430.41666666666663], [20.0, 430.8181818181818], [21.0, 1132.75], [22.0, 651.9333333333334], [23.0, 559.3529411764706], [24.0, 666.6428571428571], [25.0, 620.9473684210526], [26.0, 556.5333333333333], [27.0, 534.3999999999999], [28.0, 603.0588235294117], [29.0, 737.4375], [30.0, 662.0909090909092], [31.0, 566.4375], [32.0, 995.48], [33.0, 448.61111111111114], [34.0, 441.57894736842104], [35.0, 1752.735294117647], [36.0, 410.9333333333333], [37.0, 1479.4642857142858], [38.0, 1007.1600000000001], [39.0, 557.0400000000001], [40.0, 521.1785714285713], [41.0, 491.9354838709678], [42.0, 501.6153846153846], [43.0, 544.0], [44.0, 817.5500000000002], [45.0, 534.6875], [46.0, 588.9428571428571], [47.0, 575.92], [48.0, 509.0], [49.0, 531.5757575757576], [50.0, 491.0454545454545], [51.0, 639.59375], [52.0, 614.3043478260869], [53.0, 507.6136363636363], [54.0, 474.52631578947364], [55.0, 614.7317073170732], [56.0, 910.0000000000001], [57.0, 669.6326530612246], [58.0, 531.0999999999999], [59.0, 583.142857142857], [60.0, 591.0833333333334], [61.0, 711.9473684210526], [62.0, 748.4375], [63.0, 594.3888888888889], [64.0, 584.2285714285714], [65.0, 612.5384615384614], [66.0, 785.2448979591836], [67.0, 540.2592592592592], [68.0, 638.7241379310344], [69.0, 832.5333333333332], [70.0, 597.6875], [71.0, 1052.6590909090905], [72.0, 668.2000000000002], [73.0, 576.9615384615386], [74.0, 872.9374999999999], [75.0, 1288.8125], [76.0, 819.8372093023255], [77.0, 1375.7407407407406], [78.0, 866.4], [79.0, 639.2894736842106], [80.0, 1821.6666666666667], [81.0, 895.5571428571429], [82.0, 442.7647058823529], [83.0, 642.7750000000002], [84.0, 657.6571428571428], [85.0, 757.3636363636365], [86.0, 1129.9206349206347], [87.0, 764.2500000000001], [88.0, 656.8214285714284], [89.0, 793.5192307692311], [90.0, 755.5], [91.0, 803.7173913043476], [92.0, 624.695652173913], [93.0, 769.8749999999999], [94.0, 930.5833333333331], [95.0, 786.0], [96.0, 694.5762711864404], [97.0, 626.6363636363636], [98.0, 695.9399999999999], [99.0, 690.0555555555557], [100.0, 1443.5862068965516], [101.0, 850.1230769230772], [102.0, 553.75], [103.0, 727.8636363636365], [104.0, 832.8518518518518], [105.0, 981.0666666666666], [106.0, 883.9649122807016], [107.0, 2769.7631578947367], [108.0, 753.9999999999998], [109.0, 1144.5714285714287], [110.0, 679.8947368421054], [111.0, 1466.734693877551], [112.0, 750.0243902439024], [113.0, 678.5454545454545], [114.0, 879.4827586206897], [115.0, 877.7115384615387], [116.0, 639.0], [117.0, 1210.8888888888887], [118.0, 1580.45], [119.0, 1643.3888888888887], [120.0, 1004.9743589743588], [121.0, 1516.6956521739132], [122.0, 1280.8275862068972], [123.0, 1054.756097560976], [124.0, 1000.1052631578948], [125.0, 1604.9400000000003], [126.0, 1033.533333333333], [127.0, 1022.1612903225807], [128.0, 885.6499999999999], [129.0, 1431.1538461538464], [130.0, 1363.4999999999995], [131.0, 2022.7], [132.0, 1177.3749999999998], [133.0, 1137.5925925925926], [134.0, 1238.8571428571431], [135.0, 1126.8431372549023], [136.0, 1036.1351351351352], [137.0, 857.4090909090909], [138.0, 1734.9130434782608], [139.0, 1194.4565217391305], [140.0, 1633.9756097560974], [141.0, 1057.7400000000002], [142.0, 2034.666666666667], [143.0, 999.8214285714284], [144.0, 1803.3157894736844], [145.0, 840.1951219512194], [146.0, 900.1785714285714], [147.0, 1067.3392857142858], [148.0, 1270.0416666666667], [149.0, 942.7297297297298], [150.0, 1610.4922191621279], [1.0, 11729.0]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[144.70222085764036, 1553.3745164261456]], "isOverall": false, "label": "getPlate-Aggregated", "isController": false}, {"data": [[1.0, 3525.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}, {"data": [[1.0, 3525.0]], "isOverall": false, "label": "loginAFlypass-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 150.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 15020.216666666667, "minX": 1.71950052E12, "maxY": 77437.5, "series": [{"data": [[1.71950058E12, 39218.0], [1.71950106E12, 38998.8], [1.71950088E12, 37584.333333333336], [1.71950094E12, 38741.26666666667], [1.71950076E12, 39122.38333333333], [1.71950082E12, 41508.4], [1.71950064E12, 38256.166666666664], [1.7195007E12, 39490.4], [1.71950112E12, 16752.233333333334], [1.71950052E12, 15020.216666666667], [1.719501E12, 37318.166666666664]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71950058E12, 73164.58333333333], [1.71950106E12, 72756.25], [1.71950088E12, 70116.66666666667], [1.71950094E12, 72275.0], [1.71950076E12, 72902.08333333333], [1.71950082E12, 77437.5], [1.71950064E12, 71370.83333333333], [1.7195007E12, 73587.5], [1.71950112E12, 31252.083333333332], [1.71950052E12, 27962.1], [1.719501E12, 69620.83333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71950112E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 581.9739175795514, "minX": 1.71950052E12, "maxY": 3525.0, "series": [{"data": [[1.71950058E12, 1359.6527805461428], [1.71950106E12, 1628.6458208057722], [1.71950088E12, 1664.7520798668859], [1.71950094E12, 1612.7518159806305], [1.71950076E12, 1594.8043999999986], [1.71950082E12, 1497.794538606404], [1.71950064E12, 1644.4995913363316], [1.7195007E12, 1602.3970675648939], [1.71950112E12, 1727.874475034998], [1.71950052E12, 581.9739175795514], [1.719501E12, 1689.4061583577688]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[1.71950052E12, 3525.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71950112E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 581.8377673448108, "minX": 1.71950052E12, "maxY": 3521.0, "series": [{"data": [[1.71950058E12, 1359.5714570460482], [1.71950106E12, 1628.556023251148], [1.71950088E12, 1664.6306156405997], [1.71950094E12, 1612.63720742534], [1.71950076E12, 1582.5056000000022], [1.71950082E12, 1497.6911487758957], [1.71950064E12, 1644.2404985696721], [1.7195007E12, 1587.482861105606], [1.71950112E12, 1727.770415305647], [1.71950052E12, 581.8377673448108], [1.719501E12, 1689.259111855888]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[1.71950052E12, 3521.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71950112E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 461.20970266040655, "minX": 1.71950052E12, "maxY": 1522.0825944937005, "series": [{"data": [[1.71950058E12, 1241.9651185967666], [1.71950106E12, 1490.5580276608532], [1.71950088E12, 1500.6959234608948], [1.71950094E12, 1452.132364810333], [1.71950076E12, 1447.3355999999978], [1.71950082E12, 1360.1150659133739], [1.71950064E12, 1448.9677155700826], [1.7195007E12, 1483.7348920150591], [1.71950112E12, 1522.0825944937005], [1.71950052E12, 461.20970266040655], [1.719501E12, 1453.2029744449096]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[1.71950052E12, 819.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71950112E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 324.0, "minX": 1.71950052E12, "maxY": 56652.0, "series": [{"data": [[1.71950058E12, 24371.0], [1.71950106E12, 35510.0], [1.71950088E12, 25080.0], [1.71950094E12, 48999.0], [1.71950076E12, 33663.0], [1.71950082E12, 32657.0], [1.71950064E12, 56652.0], [1.7195007E12, 32525.0], [1.71950112E12, 27863.0], [1.71950052E12, 4261.0], [1.719501E12, 32037.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71950058E12, 2087.3999999999996], [1.71950106E12, 3046.0], [1.71950088E12, 3412.0], [1.71950094E12, 2615.7000000000016], [1.71950076E12, 3138.0], [1.71950082E12, 2386.7000000000016], [1.71950064E12, 3036.0], [1.7195007E12, 2941.2000000000007], [1.71950112E12, 3166.2000000000025], [1.71950052E12, 816.1000000000001], [1.719501E12, 3392.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71950058E12, 10362.039999999994], [1.71950106E12, 12092.100000000011], [1.71950088E12, 10573.279999999955], [1.71950094E12, 11546.890000000007], [1.71950076E12, 9110.0], [1.71950082E12, 10725.670000000002], [1.71950064E12, 12347.90000000001], [1.7195007E12, 10812.579999999978], [1.71950112E12, 15423.48], [1.71950052E12, 1762.5399999999981], [1.719501E12, 9885.75]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71950058E12, 4177.399999999998], [1.71950106E12, 6138.0], [1.71950088E12, 5862.1], [1.71950094E12, 4904.649999999996], [1.71950076E12, 5544.0], [1.71950082E12, 4660.249999999999], [1.71950064E12, 6174.5], [1.7195007E12, 5506.65], [1.71950112E12, 6190.399999999992], [1.71950052E12, 873.0], [1.719501E12, 6122.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.71950058E12, 365.0], [1.71950106E12, 368.0], [1.71950088E12, 385.0], [1.71950094E12, 370.0], [1.71950076E12, 372.0], [1.71950082E12, 420.0], [1.71950064E12, 409.0], [1.7195007E12, 343.0], [1.71950112E12, 423.0], [1.71950052E12, 324.0], [1.719501E12, 333.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71950058E12, 844.0], [1.71950106E12, 886.0], [1.71950088E12, 937.0], [1.71950094E12, 922.0], [1.71950076E12, 917.0], [1.71950082E12, 886.0], [1.71950064E12, 927.0], [1.7195007E12, 875.0], [1.71950112E12, 937.0], [1.71950052E12, 522.5], [1.719501E12, 921.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71950112E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 406.0, "minX": 1.0, "maxY": 74770.0, "series": [{"data": [[2.0, 6204.0], [4.0, 8243.5], [5.0, 421.0], [6.0, 7023.5], [7.0, 1405.0], [11.0, 1666.0], [12.0, 433.0], [17.0, 1659.0], [22.0, 428.0], [24.0, 410.0], [25.0, 3815.0], [30.0, 434.5], [32.0, 790.0], [34.0, 548.5], [35.0, 680.5], [37.0, 406.0], [36.0, 934.5], [39.0, 990.5], [40.0, 556.0], [42.0, 1105.5], [43.0, 868.0], [44.0, 972.5], [45.0, 775.5], [47.0, 1055.0], [46.0, 1531.0], [48.0, 762.0], [49.0, 858.5], [50.0, 981.0], [51.0, 1142.0], [53.0, 878.5], [52.0, 799.0], [55.0, 991.0], [54.0, 1089.5], [56.0, 811.5], [57.0, 981.0], [58.0, 881.5], [59.0, 966.0], [61.0, 749.5], [60.0, 903.0], [63.0, 800.0], [62.0, 759.5], [66.0, 941.0], [67.0, 917.0], [64.0, 1000.5], [65.0, 989.0], [68.0, 823.0], [69.0, 889.0], [71.0, 928.5], [70.0, 959.5], [73.0, 920.0], [72.0, 857.0], [74.0, 861.0], [75.0, 916.0], [78.0, 857.0], [79.0, 896.0], [77.0, 939.5], [76.0, 930.0], [81.0, 842.0], [80.0, 878.5], [82.0, 923.0], [83.0, 883.5], [84.0, 839.5], [85.0, 892.0], [86.0, 919.5], [87.0, 891.0], [90.0, 886.0], [89.0, 871.0], [88.0, 882.5], [91.0, 920.0], [94.0, 851.0], [93.0, 792.5], [95.0, 893.0], [92.0, 911.5], [98.0, 828.5], [97.0, 945.0], [96.0, 881.0], [99.0, 891.0], [101.0, 877.0], [100.0, 882.0], [103.0, 864.5], [102.0, 947.5], [104.0, 862.5], [106.0, 756.0], [107.0, 822.0], [105.0, 843.0], [108.0, 840.0], [111.0, 797.0], [109.0, 869.0], [113.0, 938.0], [114.0, 841.0], [112.0, 924.0], [115.0, 854.0], [119.0, 779.0], [118.0, 955.0], [116.0, 1538.0], [122.0, 846.0], [123.0, 1809.0], [126.0, 1058.5], [124.0, 1164.5], [135.0, 1231.0], [128.0, 1767.5], [141.0, 1630.0], [1.0, 9476.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[72.0, 74770.0], [93.0, 60817.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 141.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 9474.0, "series": [{"data": [[2.0, 6204.0], [4.0, 8243.5], [5.0, 420.0], [6.0, 7023.5], [7.0, 1405.0], [11.0, 1666.0], [12.0, 432.5], [17.0, 1659.0], [22.0, 427.5], [24.0, 410.0], [25.0, 3815.0], [30.0, 434.5], [32.0, 790.0], [34.0, 548.5], [35.0, 680.5], [37.0, 406.0], [36.0, 934.5], [39.0, 990.5], [40.0, 556.0], [42.0, 1105.5], [43.0, 866.5], [44.0, 972.0], [45.0, 775.5], [47.0, 1055.0], [46.0, 1531.0], [48.0, 762.0], [49.0, 858.0], [50.0, 981.0], [51.0, 1142.0], [53.0, 878.0], [52.0, 799.0], [55.0, 991.0], [54.0, 1089.5], [56.0, 811.5], [57.0, 981.0], [58.0, 881.5], [59.0, 966.0], [61.0, 749.5], [60.0, 903.0], [63.0, 800.0], [62.0, 759.5], [66.0, 941.0], [67.0, 917.0], [64.0, 1000.5], [65.0, 989.0], [68.0, 823.0], [69.0, 889.0], [71.0, 928.5], [70.0, 959.5], [73.0, 920.0], [72.0, 857.0], [74.0, 861.0], [75.0, 916.0], [78.0, 857.0], [79.0, 896.0], [77.0, 939.5], [76.0, 930.0], [81.0, 842.0], [80.0, 878.0], [82.0, 922.5], [83.0, 883.5], [84.0, 839.5], [85.0, 892.0], [86.0, 919.5], [87.0, 891.0], [90.0, 886.0], [89.0, 871.0], [88.0, 882.0], [91.0, 920.0], [94.0, 850.5], [93.0, 792.5], [95.0, 893.0], [92.0, 911.5], [98.0, 828.5], [97.0, 943.0], [96.0, 881.0], [99.0, 890.0], [101.0, 877.0], [100.0, 882.0], [103.0, 864.0], [102.0, 947.5], [104.0, 862.5], [106.0, 756.0], [107.0, 821.0], [105.0, 843.0], [108.0, 840.0], [111.0, 797.0], [109.0, 869.0], [113.0, 938.0], [114.0, 841.0], [112.0, 924.0], [115.0, 854.0], [119.0, 779.0], [118.0, 955.0], [116.0, 1537.5], [122.0, 846.0], [123.0, 1809.0], [126.0, 1058.5], [124.0, 1164.5], [135.0, 1231.0], [128.0, 1767.5], [141.0, 1630.0], [1.0, 9474.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[72.0, 0.0], [93.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 141.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.3, "minX": 1.71950052E12, "maxY": 88.51666666666667, "series": [{"data": [[1.71950058E12, 84.13333333333334], [1.71950106E12, 82.85], [1.71950088E12, 80.25], [1.71950094E12, 82.45], [1.71950076E12, 83.73333333333333], [1.71950082E12, 88.51666666666667], [1.71950064E12, 81.83333333333333], [1.7195007E12, 83.78333333333333], [1.71950112E12, 33.733333333333334], [1.71950052E12, 33.3], [1.719501E12, 79.68333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71950112E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71950052E12, "maxY": 88.5, "series": [{"data": [[1.71950076E12, 0.016666666666666666], [1.7195007E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.71950058E12, 83.61666666666666], [1.71950106E12, 83.15], [1.71950088E12, 80.13333333333334], [1.71950094E12, 82.6], [1.71950076E12, 83.31666666666666], [1.71950082E12, 88.5], [1.71950064E12, 81.56666666666666], [1.7195007E12, 84.1], [1.71950112E12, 35.71666666666667], [1.71950052E12, 31.966666666666665], [1.719501E12, 79.56666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71950112E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71950052E12, "maxY": 88.5, "series": [{"data": [[1.71950052E12, 0.016666666666666666]], "isOverall": false, "label": "loginAFlypass-success", "isController": false}, {"data": [[1.71950076E12, 0.016666666666666666], [1.7195007E12, 0.016666666666666666]], "isOverall": false, "label": "getPlate-failure", "isController": false}, {"data": [[1.71950058E12, 83.61666666666666], [1.71950106E12, 83.15], [1.71950088E12, 80.13333333333334], [1.71950094E12, 82.6], [1.71950076E12, 83.31666666666666], [1.71950082E12, 88.5], [1.71950064E12, 81.56666666666666], [1.7195007E12, 84.1], [1.71950112E12, 35.71666666666667], [1.71950052E12, 31.95], [1.719501E12, 79.56666666666666]], "isOverall": false, "label": "getPlate-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71950112E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71950052E12, "maxY": 88.5, "series": [{"data": [[1.71950058E12, 83.61666666666666], [1.71950106E12, 83.15], [1.71950088E12, 80.13333333333334], [1.71950094E12, 82.6], [1.71950076E12, 83.31666666666666], [1.71950082E12, 88.5], [1.71950064E12, 81.56666666666666], [1.7195007E12, 84.1], [1.71950112E12, 35.71666666666667], [1.71950052E12, 31.966666666666665], [1.719501E12, 79.56666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71950076E12, 0.016666666666666666], [1.7195007E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71950112E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

