/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 338.0, "minX": 0.0, "maxY": 101528.0, "series": [{"data": [[0.0, 338.0], [0.1, 422.0], [0.2, 453.0], [0.3, 476.0], [0.4, 496.0], [0.5, 509.0], [0.6, 528.0], [0.7, 538.0], [0.8, 548.0], [0.9, 556.0], [1.0, 561.0], [1.1, 568.0], [1.2, 574.0], [1.3, 578.0], [1.4, 586.0], [1.5, 592.0], [1.6, 597.0], [1.7, 601.0], [1.8, 604.0], [1.9, 608.0], [2.0, 613.0], [2.1, 617.0], [2.2, 621.0], [2.3, 625.0], [2.4, 628.0], [2.5, 631.0], [2.6, 635.0], [2.7, 639.0], [2.8, 642.0], [2.9, 645.0], [3.0, 648.0], [3.1, 651.0], [3.2, 655.0], [3.3, 659.0], [3.4, 662.0], [3.5, 664.0], [3.6, 667.0], [3.7, 670.0], [3.8, 672.0], [3.9, 675.0], [4.0, 677.0], [4.1, 680.0], [4.2, 682.0], [4.3, 684.0], [4.4, 686.0], [4.5, 688.0], [4.6, 690.0], [4.7, 692.0], [4.8, 694.0], [4.9, 695.0], [5.0, 697.0], [5.1, 699.0], [5.2, 701.0], [5.3, 703.0], [5.4, 704.0], [5.5, 706.0], [5.6, 708.0], [5.7, 709.0], [5.8, 712.0], [5.9, 714.0], [6.0, 715.0], [6.1, 717.0], [6.2, 719.0], [6.3, 721.0], [6.4, 722.0], [6.5, 724.0], [6.6, 726.0], [6.7, 728.0], [6.8, 730.0], [6.9, 731.0], [7.0, 733.0], [7.1, 735.0], [7.2, 736.0], [7.3, 738.0], [7.4, 739.0], [7.5, 741.0], [7.6, 742.0], [7.7, 743.0], [7.8, 745.0], [7.9, 747.0], [8.0, 748.0], [8.1, 750.0], [8.2, 751.0], [8.3, 753.0], [8.4, 755.0], [8.5, 756.0], [8.6, 758.0], [8.7, 759.0], [8.8, 761.0], [8.9, 762.0], [9.0, 764.0], [9.1, 765.0], [9.2, 767.0], [9.3, 768.0], [9.4, 770.0], [9.5, 772.0], [9.6, 773.0], [9.7, 775.0], [9.8, 776.0], [9.9, 777.0], [10.0, 779.0], [10.1, 780.0], [10.2, 782.0], [10.3, 783.0], [10.4, 785.0], [10.5, 787.0], [10.6, 788.0], [10.7, 789.0], [10.8, 791.0], [10.9, 792.0], [11.0, 793.0], [11.1, 795.0], [11.2, 796.0], [11.3, 798.0], [11.4, 799.0], [11.5, 801.0], [11.6, 802.0], [11.7, 804.0], [11.8, 805.0], [11.9, 807.0], [12.0, 808.0], [12.1, 809.0], [12.2, 810.0], [12.3, 812.0], [12.4, 813.0], [12.5, 815.0], [12.6, 816.0], [12.7, 818.0], [12.8, 819.0], [12.9, 821.0], [13.0, 822.0], [13.1, 823.0], [13.2, 824.0], [13.3, 826.0], [13.4, 828.0], [13.5, 829.0], [13.6, 830.0], [13.7, 831.0], [13.8, 833.0], [13.9, 834.0], [14.0, 836.0], [14.1, 837.0], [14.2, 838.0], [14.3, 840.0], [14.4, 841.0], [14.5, 842.0], [14.6, 844.0], [14.7, 845.0], [14.8, 847.0], [14.9, 848.0], [15.0, 850.0], [15.1, 851.0], [15.2, 852.0], [15.3, 854.0], [15.4, 855.0], [15.5, 857.0], [15.6, 858.0], [15.7, 859.0], [15.8, 860.0], [15.9, 862.0], [16.0, 863.0], [16.1, 864.0], [16.2, 866.0], [16.3, 867.0], [16.4, 868.0], [16.5, 870.0], [16.6, 871.0], [16.7, 873.0], [16.8, 875.0], [16.9, 876.0], [17.0, 877.0], [17.1, 878.0], [17.2, 880.0], [17.3, 881.0], [17.4, 882.0], [17.5, 883.0], [17.6, 885.0], [17.7, 886.0], [17.8, 887.0], [17.9, 888.0], [18.0, 890.0], [18.1, 891.0], [18.2, 892.0], [18.3, 894.0], [18.4, 895.0], [18.5, 896.0], [18.6, 898.0], [18.7, 899.0], [18.8, 900.0], [18.9, 901.0], [19.0, 902.0], [19.1, 904.0], [19.2, 904.0], [19.3, 906.0], [19.4, 907.0], [19.5, 908.0], [19.6, 909.0], [19.7, 910.0], [19.8, 912.0], [19.9, 913.0], [20.0, 914.0], [20.1, 916.0], [20.2, 917.0], [20.3, 918.0], [20.4, 919.0], [20.5, 920.0], [20.6, 921.0], [20.7, 923.0], [20.8, 924.0], [20.9, 926.0], [21.0, 927.0], [21.1, 928.0], [21.2, 930.0], [21.3, 931.0], [21.4, 932.0], [21.5, 933.0], [21.6, 934.0], [21.7, 936.0], [21.8, 937.0], [21.9, 938.0], [22.0, 939.0], [22.1, 940.0], [22.2, 941.0], [22.3, 943.0], [22.4, 944.0], [22.5, 945.0], [22.6, 947.0], [22.7, 948.0], [22.8, 950.0], [22.9, 951.0], [23.0, 952.0], [23.1, 953.0], [23.2, 954.0], [23.3, 955.0], [23.4, 956.0], [23.5, 958.0], [23.6, 959.0], [23.7, 960.0], [23.8, 961.0], [23.9, 962.0], [24.0, 963.0], [24.1, 965.0], [24.2, 966.0], [24.3, 968.0], [24.4, 969.0], [24.5, 970.0], [24.6, 971.0], [24.7, 972.0], [24.8, 974.0], [24.9, 975.0], [25.0, 976.0], [25.1, 977.0], [25.2, 978.0], [25.3, 980.0], [25.4, 981.0], [25.5, 982.0], [25.6, 983.0], [25.7, 985.0], [25.8, 986.0], [25.9, 988.0], [26.0, 989.0], [26.1, 990.0], [26.2, 991.0], [26.3, 992.0], [26.4, 994.0], [26.5, 995.0], [26.6, 997.0], [26.7, 999.0], [26.8, 1000.0], [26.9, 1001.0], [27.0, 1002.0], [27.1, 1004.0], [27.2, 1006.0], [27.3, 1007.0], [27.4, 1008.0], [27.5, 1009.0], [27.6, 1011.0], [27.7, 1013.0], [27.8, 1014.0], [27.9, 1015.0], [28.0, 1017.0], [28.1, 1018.0], [28.2, 1020.0], [28.3, 1021.0], [28.4, 1022.0], [28.5, 1023.0], [28.6, 1024.0], [28.7, 1025.0], [28.8, 1026.0], [28.9, 1028.0], [29.0, 1030.0], [29.1, 1031.0], [29.2, 1032.0], [29.3, 1034.0], [29.4, 1035.0], [29.5, 1036.0], [29.6, 1038.0], [29.7, 1040.0], [29.8, 1041.0], [29.9, 1043.0], [30.0, 1044.0], [30.1, 1045.0], [30.2, 1047.0], [30.3, 1048.0], [30.4, 1049.0], [30.5, 1051.0], [30.6, 1053.0], [30.7, 1054.0], [30.8, 1056.0], [30.9, 1057.0], [31.0, 1058.0], [31.1, 1060.0], [31.2, 1061.0], [31.3, 1063.0], [31.4, 1064.0], [31.5, 1066.0], [31.6, 1067.0], [31.7, 1069.0], [31.8, 1070.0], [31.9, 1071.0], [32.0, 1073.0], [32.1, 1075.0], [32.2, 1076.0], [32.3, 1078.0], [32.4, 1079.0], [32.5, 1081.0], [32.6, 1083.0], [32.7, 1085.0], [32.8, 1087.0], [32.9, 1088.0], [33.0, 1090.0], [33.1, 1092.0], [33.2, 1094.0], [33.3, 1096.0], [33.4, 1097.0], [33.5, 1099.0], [33.6, 1101.0], [33.7, 1103.0], [33.8, 1104.0], [33.9, 1106.0], [34.0, 1108.0], [34.1, 1110.0], [34.2, 1112.0], [34.3, 1114.0], [34.4, 1116.0], [34.5, 1118.0], [34.6, 1120.0], [34.7, 1122.0], [34.8, 1124.0], [34.9, 1127.0], [35.0, 1129.0], [35.1, 1131.0], [35.2, 1133.0], [35.3, 1135.0], [35.4, 1138.0], [35.5, 1140.0], [35.6, 1142.0], [35.7, 1143.0], [35.8, 1146.0], [35.9, 1147.0], [36.0, 1149.0], [36.1, 1151.0], [36.2, 1153.0], [36.3, 1156.0], [36.4, 1158.0], [36.5, 1160.0], [36.6, 1162.0], [36.7, 1164.0], [36.8, 1167.0], [36.9, 1170.0], [37.0, 1173.0], [37.1, 1175.0], [37.2, 1177.0], [37.3, 1179.0], [37.4, 1181.0], [37.5, 1184.0], [37.6, 1186.0], [37.7, 1188.0], [37.8, 1191.0], [37.9, 1193.0], [38.0, 1196.0], [38.1, 1198.0], [38.2, 1200.0], [38.3, 1203.0], [38.4, 1206.0], [38.5, 1208.0], [38.6, 1211.0], [38.7, 1214.0], [38.8, 1217.0], [38.9, 1221.0], [39.0, 1224.0], [39.1, 1226.0], [39.2, 1229.0], [39.3, 1232.0], [39.4, 1235.0], [39.5, 1239.0], [39.6, 1242.0], [39.7, 1245.0], [39.8, 1248.0], [39.9, 1251.0], [40.0, 1254.0], [40.1, 1257.0], [40.2, 1260.0], [40.3, 1264.0], [40.4, 1267.0], [40.5, 1271.0], [40.6, 1276.0], [40.7, 1279.0], [40.8, 1283.0], [40.9, 1287.0], [41.0, 1290.0], [41.1, 1294.0], [41.2, 1298.0], [41.3, 1302.0], [41.4, 1306.0], [41.5, 1309.0], [41.6, 1313.0], [41.7, 1316.0], [41.8, 1320.0], [41.9, 1323.0], [42.0, 1328.0], [42.1, 1334.0], [42.2, 1338.0], [42.3, 1342.0], [42.4, 1347.0], [42.5, 1351.0], [42.6, 1355.0], [42.7, 1358.0], [42.8, 1363.0], [42.9, 1368.0], [43.0, 1372.0], [43.1, 1377.0], [43.2, 1382.0], [43.3, 1386.0], [43.4, 1390.0], [43.5, 1394.0], [43.6, 1398.0], [43.7, 1401.0], [43.8, 1405.0], [43.9, 1410.0], [44.0, 1415.0], [44.1, 1420.0], [44.2, 1425.0], [44.3, 1429.0], [44.4, 1433.0], [44.5, 1437.0], [44.6, 1441.0], [44.7, 1446.0], [44.8, 1449.0], [44.9, 1453.0], [45.0, 1458.0], [45.1, 1462.0], [45.2, 1469.0], [45.3, 1473.0], [45.4, 1477.0], [45.5, 1481.0], [45.6, 1487.0], [45.7, 1491.0], [45.8, 1495.0], [45.9, 1501.0], [46.0, 1506.0], [46.1, 1511.0], [46.2, 1515.0], [46.3, 1520.0], [46.4, 1525.0], [46.5, 1531.0], [46.6, 1535.0], [46.7, 1540.0], [46.8, 1544.0], [46.9, 1549.0], [47.0, 1553.0], [47.1, 1558.0], [47.2, 1563.0], [47.3, 1567.0], [47.4, 1571.0], [47.5, 1576.0], [47.6, 1581.0], [47.7, 1585.0], [47.8, 1590.0], [47.9, 1596.0], [48.0, 1600.0], [48.1, 1605.0], [48.2, 1610.0], [48.3, 1615.0], [48.4, 1620.0], [48.5, 1624.0], [48.6, 1629.0], [48.7, 1633.0], [48.8, 1638.0], [48.9, 1645.0], [49.0, 1648.0], [49.1, 1652.0], [49.2, 1657.0], [49.3, 1662.0], [49.4, 1667.0], [49.5, 1671.0], [49.6, 1676.0], [49.7, 1680.0], [49.8, 1684.0], [49.9, 1689.0], [50.0, 1693.0], [50.1, 1697.0], [50.2, 1701.0], [50.3, 1705.0], [50.4, 1709.0], [50.5, 1714.0], [50.6, 1719.0], [50.7, 1723.0], [50.8, 1726.0], [50.9, 1729.0], [51.0, 1733.0], [51.1, 1736.0], [51.2, 1740.0], [51.3, 1746.0], [51.4, 1749.0], [51.5, 1752.0], [51.6, 1756.0], [51.7, 1759.0], [51.8, 1763.0], [51.9, 1766.0], [52.0, 1769.0], [52.1, 1774.0], [52.2, 1777.0], [52.3, 1780.0], [52.4, 1784.0], [52.5, 1788.0], [52.6, 1792.0], [52.7, 1796.0], [52.8, 1799.0], [52.9, 1804.0], [53.0, 1807.0], [53.1, 1811.0], [53.2, 1815.0], [53.3, 1818.0], [53.4, 1822.0], [53.5, 1825.0], [53.6, 1829.0], [53.7, 1832.0], [53.8, 1836.0], [53.9, 1839.0], [54.0, 1842.0], [54.1, 1846.0], [54.2, 1849.0], [54.3, 1853.0], [54.4, 1856.0], [54.5, 1860.0], [54.6, 1863.0], [54.7, 1867.0], [54.8, 1870.0], [54.9, 1874.0], [55.0, 1878.0], [55.1, 1882.0], [55.2, 1887.0], [55.3, 1890.0], [55.4, 1893.0], [55.5, 1897.0], [55.6, 1900.0], [55.7, 1903.0], [55.8, 1907.0], [55.9, 1910.0], [56.0, 1913.0], [56.1, 1918.0], [56.2, 1922.0], [56.3, 1925.0], [56.4, 1929.0], [56.5, 1932.0], [56.6, 1935.0], [56.7, 1938.0], [56.8, 1942.0], [56.9, 1945.0], [57.0, 1948.0], [57.1, 1952.0], [57.2, 1956.0], [57.3, 1959.0], [57.4, 1963.0], [57.5, 1967.0], [57.6, 1970.0], [57.7, 1974.0], [57.8, 1977.0], [57.9, 1980.0], [58.0, 1983.0], [58.1, 1986.0], [58.2, 1989.0], [58.3, 1994.0], [58.4, 1997.0], [58.5, 2000.0], [58.6, 2004.0], [58.7, 2008.0], [58.8, 2011.0], [58.9, 2015.0], [59.0, 2018.0], [59.1, 2020.0], [59.2, 2024.0], [59.3, 2028.0], [59.4, 2031.0], [59.5, 2034.0], [59.6, 2037.0], [59.7, 2041.0], [59.8, 2043.0], [59.9, 2046.0], [60.0, 2050.0], [60.1, 2053.0], [60.2, 2057.0], [60.3, 2061.0], [60.4, 2064.0], [60.5, 2068.0], [60.6, 2071.0], [60.7, 2075.0], [60.8, 2078.0], [60.9, 2080.0], [61.0, 2084.0], [61.1, 2087.0], [61.2, 2090.0], [61.3, 2093.0], [61.4, 2097.0], [61.5, 2100.0], [61.6, 2104.0], [61.7, 2108.0], [61.8, 2112.0], [61.9, 2116.0], [62.0, 2119.0], [62.1, 2123.0], [62.2, 2126.0], [62.3, 2130.0], [62.4, 2135.0], [62.5, 2139.0], [62.6, 2142.0], [62.7, 2145.0], [62.8, 2149.0], [62.9, 2153.0], [63.0, 2157.0], [63.1, 2160.0], [63.2, 2164.0], [63.3, 2168.0], [63.4, 2172.0], [63.5, 2177.0], [63.6, 2180.0], [63.7, 2185.0], [63.8, 2190.0], [63.9, 2193.0], [64.0, 2197.0], [64.1, 2202.0], [64.2, 2206.0], [64.3, 2209.0], [64.4, 2213.0], [64.5, 2218.0], [64.6, 2221.0], [64.7, 2225.0], [64.8, 2231.0], [64.9, 2236.0], [65.0, 2239.0], [65.1, 2243.0], [65.2, 2247.0], [65.3, 2252.0], [65.4, 2256.0], [65.5, 2261.0], [65.6, 2265.0], [65.7, 2269.0], [65.8, 2274.0], [65.9, 2278.0], [66.0, 2282.0], [66.1, 2286.0], [66.2, 2291.0], [66.3, 2297.0], [66.4, 2301.0], [66.5, 2304.0], [66.6, 2308.0], [66.7, 2313.0], [66.8, 2317.0], [66.9, 2320.0], [67.0, 2323.0], [67.1, 2328.0], [67.2, 2332.0], [67.3, 2336.0], [67.4, 2340.0], [67.5, 2344.0], [67.6, 2348.0], [67.7, 2352.0], [67.8, 2356.0], [67.9, 2360.0], [68.0, 2363.0], [68.1, 2368.0], [68.2, 2373.0], [68.3, 2377.0], [68.4, 2382.0], [68.5, 2387.0], [68.6, 2392.0], [68.7, 2397.0], [68.8, 2401.0], [68.9, 2405.0], [69.0, 2410.0], [69.1, 2414.0], [69.2, 2418.0], [69.3, 2423.0], [69.4, 2428.0], [69.5, 2433.0], [69.6, 2438.0], [69.7, 2444.0], [69.8, 2448.0], [69.9, 2453.0], [70.0, 2459.0], [70.1, 2464.0], [70.2, 2470.0], [70.3, 2476.0], [70.4, 2482.0], [70.5, 2487.0], [70.6, 2492.0], [70.7, 2497.0], [70.8, 2502.0], [70.9, 2506.0], [71.0, 2512.0], [71.1, 2518.0], [71.2, 2522.0], [71.3, 2528.0], [71.4, 2532.0], [71.5, 2537.0], [71.6, 2541.0], [71.7, 2546.0], [71.8, 2551.0], [71.9, 2556.0], [72.0, 2561.0], [72.1, 2566.0], [72.2, 2573.0], [72.3, 2578.0], [72.4, 2583.0], [72.5, 2586.0], [72.6, 2591.0], [72.7, 2597.0], [72.8, 2602.0], [72.9, 2606.0], [73.0, 2611.0], [73.1, 2616.0], [73.2, 2621.0], [73.3, 2625.0], [73.4, 2629.0], [73.5, 2634.0], [73.6, 2639.0], [73.7, 2643.0], [73.8, 2648.0], [73.9, 2655.0], [74.0, 2661.0], [74.1, 2666.0], [74.2, 2671.0], [74.3, 2678.0], [74.4, 2682.0], [74.5, 2689.0], [74.6, 2693.0], [74.7, 2696.0], [74.8, 2702.0], [74.9, 2707.0], [75.0, 2714.0], [75.1, 2718.0], [75.2, 2723.0], [75.3, 2728.0], [75.4, 2732.0], [75.5, 2737.0], [75.6, 2743.0], [75.7, 2749.0], [75.8, 2753.0], [75.9, 2759.0], [76.0, 2766.0], [76.1, 2773.0], [76.2, 2778.0], [76.3, 2784.0], [76.4, 2788.0], [76.5, 2794.0], [76.6, 2800.0], [76.7, 2806.0], [76.8, 2812.0], [76.9, 2817.0], [77.0, 2825.0], [77.1, 2831.0], [77.2, 2837.0], [77.3, 2843.0], [77.4, 2848.0], [77.5, 2853.0], [77.6, 2861.0], [77.7, 2867.0], [77.8, 2873.0], [77.9, 2882.0], [78.0, 2889.0], [78.1, 2896.0], [78.2, 2902.0], [78.3, 2908.0], [78.4, 2914.0], [78.5, 2920.0], [78.6, 2926.0], [78.7, 2933.0], [78.8, 2939.0], [78.9, 2944.0], [79.0, 2951.0], [79.1, 2958.0], [79.2, 2964.0], [79.3, 2971.0], [79.4, 2979.0], [79.5, 2987.0], [79.6, 2992.0], [79.7, 3001.0], [79.8, 3008.0], [79.9, 3015.0], [80.0, 3021.0], [80.1, 3030.0], [80.2, 3038.0], [80.3, 3043.0], [80.4, 3052.0], [80.5, 3059.0], [80.6, 3066.0], [80.7, 3074.0], [80.8, 3084.0], [80.9, 3091.0], [81.0, 3100.0], [81.1, 3108.0], [81.2, 3118.0], [81.3, 3126.0], [81.4, 3134.0], [81.5, 3140.0], [81.6, 3145.0], [81.7, 3153.0], [81.8, 3161.0], [81.9, 3169.0], [82.0, 3178.0], [82.1, 3186.0], [82.2, 3195.0], [82.3, 3204.0], [82.4, 3214.0], [82.5, 3222.0], [82.6, 3231.0], [82.7, 3240.0], [82.8, 3252.0], [82.9, 3261.0], [83.0, 3269.0], [83.1, 3278.0], [83.2, 3285.0], [83.3, 3294.0], [83.4, 3303.0], [83.5, 3311.0], [83.6, 3321.0], [83.7, 3327.0], [83.8, 3337.0], [83.9, 3345.0], [84.0, 3355.0], [84.1, 3365.0], [84.2, 3373.0], [84.3, 3382.0], [84.4, 3389.0], [84.5, 3400.0], [84.6, 3411.0], [84.7, 3420.0], [84.8, 3427.0], [84.9, 3440.0], [85.0, 3449.0], [85.1, 3458.0], [85.2, 3469.0], [85.3, 3477.0], [85.4, 3489.0], [85.5, 3503.0], [85.6, 3512.0], [85.7, 3523.0], [85.8, 3535.0], [85.9, 3547.0], [86.0, 3554.0], [86.1, 3564.0], [86.2, 3573.0], [86.3, 3583.0], [86.4, 3592.0], [86.5, 3606.0], [86.6, 3618.0], [86.7, 3630.0], [86.8, 3640.0], [86.9, 3655.0], [87.0, 3668.0], [87.1, 3677.0], [87.2, 3688.0], [87.3, 3697.0], [87.4, 3711.0], [87.5, 3720.0], [87.6, 3732.0], [87.7, 3747.0], [87.8, 3760.0], [87.9, 3774.0], [88.0, 3790.0], [88.1, 3802.0], [88.2, 3813.0], [88.3, 3827.0], [88.4, 3845.0], [88.5, 3862.0], [88.6, 3875.0], [88.7, 3887.0], [88.8, 3903.0], [88.9, 3916.0], [89.0, 3933.0], [89.1, 3953.0], [89.2, 3969.0], [89.3, 3986.0], [89.4, 4001.0], [89.5, 4019.0], [89.6, 4038.0], [89.7, 4057.0], [89.8, 4072.0], [89.9, 4093.0], [90.0, 4116.0], [90.1, 4130.0], [90.2, 4154.0], [90.3, 4176.0], [90.4, 4193.0], [90.5, 4211.0], [90.6, 4230.0], [90.7, 4253.0], [90.8, 4278.0], [90.9, 4300.0], [91.0, 4321.0], [91.1, 4350.0], [91.2, 4373.0], [91.3, 4396.0], [91.4, 4413.0], [91.5, 4437.0], [91.6, 4464.0], [91.7, 4488.0], [91.8, 4511.0], [91.9, 4536.0], [92.0, 4562.0], [92.1, 4588.0], [92.2, 4614.0], [92.3, 4640.0], [92.4, 4668.0], [92.5, 4698.0], [92.6, 4719.0], [92.7, 4743.0], [92.8, 4779.0], [92.9, 4810.0], [93.0, 4855.0], [93.1, 4885.0], [93.2, 4920.0], [93.3, 4953.0], [93.4, 4992.0], [93.5, 5027.0], [93.6, 5058.0], [93.7, 5097.0], [93.8, 5141.0], [93.9, 5192.0], [94.0, 5253.0], [94.1, 5298.0], [94.2, 5349.0], [94.3, 5392.0], [94.4, 5441.0], [94.5, 5485.0], [94.6, 5522.0], [94.7, 5563.0], [94.8, 5604.0], [94.9, 5649.0], [95.0, 5721.0], [95.1, 5791.0], [95.2, 5858.0], [95.3, 5901.0], [95.4, 5956.0], [95.5, 6018.0], [95.6, 6104.0], [95.7, 6183.0], [95.8, 6270.0], [95.9, 6331.0], [96.0, 6395.0], [96.1, 6483.0], [96.2, 6544.0], [96.3, 6652.0], [96.4, 6771.0], [96.5, 6875.0], [96.6, 6987.0], [96.7, 7090.0], [96.8, 7235.0], [96.9, 7356.0], [97.0, 7464.0], [97.1, 7560.0], [97.2, 7681.0], [97.3, 7844.0], [97.4, 7986.0], [97.5, 8093.0], [97.6, 8247.0], [97.7, 8370.0], [97.8, 8566.0], [97.9, 8695.0], [98.0, 8820.0], [98.1, 8936.0], [98.2, 9080.0], [98.3, 9239.0], [98.4, 9415.0], [98.5, 9605.0], [98.6, 9834.0], [98.7, 10058.0], [98.8, 10410.0], [98.9, 10735.0], [99.0, 11188.0], [99.1, 11949.0], [99.2, 12568.0], [99.3, 13765.0], [99.4, 15286.0], [99.5, 16166.0], [99.6, 16920.0], [99.7, 18807.0], [99.8, 22865.0], [99.9, 30110.0]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[0.0, 1018.0], [0.1, 1018.0], [0.2, 1018.0], [0.3, 1018.0], [0.4, 1018.0], [0.5, 1018.0], [0.6, 1018.0], [0.7, 1018.0], [0.8, 1018.0], [0.9, 1018.0], [1.0, 1018.0], [1.1, 1018.0], [1.2, 1018.0], [1.3, 1018.0], [1.4, 1018.0], [1.5, 1018.0], [1.6, 1018.0], [1.7, 1018.0], [1.8, 1018.0], [1.9, 1018.0], [2.0, 1018.0], [2.1, 1018.0], [2.2, 1018.0], [2.3, 1018.0], [2.4, 1018.0], [2.5, 1018.0], [2.6, 1018.0], [2.7, 1018.0], [2.8, 1018.0], [2.9, 1018.0], [3.0, 1018.0], [3.1, 1018.0], [3.2, 1018.0], [3.3, 1018.0], [3.4, 1018.0], [3.5, 1018.0], [3.6, 1018.0], [3.7, 1018.0], [3.8, 1018.0], [3.9, 1018.0], [4.0, 1018.0], [4.1, 1018.0], [4.2, 1018.0], [4.3, 1018.0], [4.4, 1018.0], [4.5, 1018.0], [4.6, 1018.0], [4.7, 1018.0], [4.8, 1018.0], [4.9, 1018.0], [5.0, 1018.0], [5.1, 1018.0], [5.2, 1018.0], [5.3, 1018.0], [5.4, 1018.0], [5.5, 1018.0], [5.6, 1018.0], [5.7, 1018.0], [5.8, 1018.0], [5.9, 1018.0], [6.0, 1018.0], [6.1, 1018.0], [6.2, 1018.0], [6.3, 1018.0], [6.4, 1018.0], [6.5, 1018.0], [6.6, 1018.0], [6.7, 1018.0], [6.8, 1018.0], [6.9, 1018.0], [7.0, 1018.0], [7.1, 1018.0], [7.2, 1018.0], [7.3, 1018.0], [7.4, 1018.0], [7.5, 1018.0], [7.6, 1018.0], [7.7, 1018.0], [7.8, 1018.0], [7.9, 1018.0], [8.0, 1018.0], [8.1, 1018.0], [8.2, 1018.0], [8.3, 1018.0], [8.4, 1018.0], [8.5, 1018.0], [8.6, 1018.0], [8.7, 1018.0], [8.8, 1018.0], [8.9, 1018.0], [9.0, 1018.0], [9.1, 1018.0], [9.2, 1018.0], [9.3, 1018.0], [9.4, 1018.0], [9.5, 1018.0], [9.6, 1018.0], [9.7, 1018.0], [9.8, 1018.0], [9.9, 1018.0], [10.0, 1018.0], [10.1, 1018.0], [10.2, 1018.0], [10.3, 1018.0], [10.4, 1018.0], [10.5, 1018.0], [10.6, 1018.0], [10.7, 1018.0], [10.8, 1018.0], [10.9, 1018.0], [11.0, 1018.0], [11.1, 1018.0], [11.2, 1018.0], [11.3, 1018.0], [11.4, 1018.0], [11.5, 1018.0], [11.6, 1018.0], [11.7, 1018.0], [11.8, 1018.0], [11.9, 1018.0], [12.0, 1018.0], [12.1, 1018.0], [12.2, 1018.0], [12.3, 1018.0], [12.4, 1018.0], [12.5, 1018.0], [12.6, 1018.0], [12.7, 1018.0], [12.8, 1018.0], [12.9, 1018.0], [13.0, 1018.0], [13.1, 1018.0], [13.2, 1018.0], [13.3, 1018.0], [13.4, 1018.0], [13.5, 1018.0], [13.6, 1018.0], [13.7, 1018.0], [13.8, 1018.0], [13.9, 1018.0], [14.0, 1018.0], [14.1, 1018.0], [14.2, 1018.0], [14.3, 1018.0], [14.4, 1018.0], [14.5, 1018.0], [14.6, 1018.0], [14.7, 1018.0], [14.8, 1018.0], [14.9, 1018.0], [15.0, 1018.0], [15.1, 1018.0], [15.2, 1018.0], [15.3, 1018.0], [15.4, 1018.0], [15.5, 1018.0], [15.6, 1018.0], [15.7, 1018.0], [15.8, 1018.0], [15.9, 1018.0], [16.0, 1018.0], [16.1, 1018.0], [16.2, 1018.0], [16.3, 1018.0], [16.4, 1018.0], [16.5, 1018.0], [16.6, 1018.0], [16.7, 1018.0], [16.8, 1018.0], [16.9, 1018.0], [17.0, 1018.0], [17.1, 1018.0], [17.2, 1018.0], [17.3, 1018.0], [17.4, 1018.0], [17.5, 1018.0], [17.6, 1018.0], [17.7, 1018.0], [17.8, 1018.0], [17.9, 1018.0], [18.0, 1018.0], [18.1, 1018.0], [18.2, 1018.0], [18.3, 1018.0], [18.4, 1018.0], [18.5, 1018.0], [18.6, 1018.0], [18.7, 1018.0], [18.8, 1018.0], [18.9, 1018.0], [19.0, 1018.0], [19.1, 1018.0], [19.2, 1018.0], [19.3, 1018.0], [19.4, 1018.0], [19.5, 1018.0], [19.6, 1018.0], [19.7, 1018.0], [19.8, 1018.0], [19.9, 1018.0], [20.0, 1018.0], [20.1, 1018.0], [20.2, 1018.0], [20.3, 1018.0], [20.4, 1018.0], [20.5, 1018.0], [20.6, 1018.0], [20.7, 1018.0], [20.8, 1018.0], [20.9, 1018.0], [21.0, 1018.0], [21.1, 1018.0], [21.2, 1018.0], [21.3, 1018.0], [21.4, 1018.0], [21.5, 1018.0], [21.6, 1018.0], [21.7, 1018.0], [21.8, 1018.0], [21.9, 1018.0], [22.0, 1018.0], [22.1, 1018.0], [22.2, 1018.0], [22.3, 1018.0], [22.4, 1018.0], [22.5, 1018.0], [22.6, 1018.0], [22.7, 1018.0], [22.8, 1018.0], [22.9, 1018.0], [23.0, 1018.0], [23.1, 1018.0], [23.2, 1018.0], [23.3, 1018.0], [23.4, 1018.0], [23.5, 1018.0], [23.6, 1018.0], [23.7, 1018.0], [23.8, 1018.0], [23.9, 1018.0], [24.0, 1018.0], [24.1, 1018.0], [24.2, 1018.0], [24.3, 1018.0], [24.4, 1018.0], [24.5, 1018.0], [24.6, 1018.0], [24.7, 1018.0], [24.8, 1018.0], [24.9, 1018.0], [25.0, 1018.0], [25.1, 1018.0], [25.2, 1018.0], [25.3, 1018.0], [25.4, 1018.0], [25.5, 1018.0], [25.6, 1018.0], [25.7, 1018.0], [25.8, 1018.0], [25.9, 1018.0], [26.0, 1018.0], [26.1, 1018.0], [26.2, 1018.0], [26.3, 1018.0], [26.4, 1018.0], [26.5, 1018.0], [26.6, 1018.0], [26.7, 1018.0], [26.8, 1018.0], [26.9, 1018.0], [27.0, 1018.0], [27.1, 1018.0], [27.2, 1018.0], [27.3, 1018.0], [27.4, 1018.0], [27.5, 1018.0], [27.6, 1018.0], [27.7, 1018.0], [27.8, 1018.0], [27.9, 1018.0], [28.0, 1018.0], [28.1, 1018.0], [28.2, 1018.0], [28.3, 1018.0], [28.4, 1018.0], [28.5, 1018.0], [28.6, 1018.0], [28.7, 1018.0], [28.8, 1018.0], [28.9, 1018.0], [29.0, 1018.0], [29.1, 1018.0], [29.2, 1018.0], [29.3, 1018.0], [29.4, 1018.0], [29.5, 1018.0], [29.6, 1018.0], [29.7, 1018.0], [29.8, 1018.0], [29.9, 1018.0], [30.0, 1018.0], [30.1, 1018.0], [30.2, 1018.0], [30.3, 1018.0], [30.4, 1018.0], [30.5, 1018.0], [30.6, 1018.0], [30.7, 1018.0], [30.8, 1018.0], [30.9, 1018.0], [31.0, 1018.0], [31.1, 1018.0], [31.2, 1018.0], [31.3, 1018.0], [31.4, 1018.0], [31.5, 1018.0], [31.6, 1018.0], [31.7, 1018.0], [31.8, 1018.0], [31.9, 1018.0], [32.0, 1018.0], [32.1, 1018.0], [32.2, 1018.0], [32.3, 1018.0], [32.4, 1018.0], [32.5, 1018.0], [32.6, 1018.0], [32.7, 1018.0], [32.8, 1018.0], [32.9, 1018.0], [33.0, 1018.0], [33.1, 1018.0], [33.2, 1018.0], [33.3, 1018.0], [33.4, 1018.0], [33.5, 1018.0], [33.6, 1018.0], [33.7, 1018.0], [33.8, 1018.0], [33.9, 1018.0], [34.0, 1018.0], [34.1, 1018.0], [34.2, 1018.0], [34.3, 1018.0], [34.4, 1018.0], [34.5, 1018.0], [34.6, 1018.0], [34.7, 1018.0], [34.8, 1018.0], [34.9, 1018.0], [35.0, 1018.0], [35.1, 1018.0], [35.2, 1018.0], [35.3, 1018.0], [35.4, 1018.0], [35.5, 1018.0], [35.6, 1018.0], [35.7, 1018.0], [35.8, 1018.0], [35.9, 1018.0], [36.0, 1018.0], [36.1, 1018.0], [36.2, 1018.0], [36.3, 1018.0], [36.4, 1018.0], [36.5, 1018.0], [36.6, 1018.0], [36.7, 1018.0], [36.8, 1018.0], [36.9, 1018.0], [37.0, 1018.0], [37.1, 1018.0], [37.2, 1018.0], [37.3, 1018.0], [37.4, 1018.0], [37.5, 1018.0], [37.6, 1018.0], [37.7, 1018.0], [37.8, 1018.0], [37.9, 1018.0], [38.0, 1018.0], [38.1, 1018.0], [38.2, 1018.0], [38.3, 1018.0], [38.4, 1018.0], [38.5, 1018.0], [38.6, 1018.0], [38.7, 1018.0], [38.8, 1018.0], [38.9, 1018.0], [39.0, 1018.0], [39.1, 1018.0], [39.2, 1018.0], [39.3, 1018.0], [39.4, 1018.0], [39.5, 1018.0], [39.6, 1018.0], [39.7, 1018.0], [39.8, 1018.0], [39.9, 1018.0], [40.0, 1018.0], [40.1, 1018.0], [40.2, 1018.0], [40.3, 1018.0], [40.4, 1018.0], [40.5, 1018.0], [40.6, 1018.0], [40.7, 1018.0], [40.8, 1018.0], [40.9, 1018.0], [41.0, 1018.0], [41.1, 1018.0], [41.2, 1018.0], [41.3, 1018.0], [41.4, 1018.0], [41.5, 1018.0], [41.6, 1018.0], [41.7, 1018.0], [41.8, 1018.0], [41.9, 1018.0], [42.0, 1018.0], [42.1, 1018.0], [42.2, 1018.0], [42.3, 1018.0], [42.4, 1018.0], [42.5, 1018.0], [42.6, 1018.0], [42.7, 1018.0], [42.8, 1018.0], [42.9, 1018.0], [43.0, 1018.0], [43.1, 1018.0], [43.2, 1018.0], [43.3, 1018.0], [43.4, 1018.0], [43.5, 1018.0], [43.6, 1018.0], [43.7, 1018.0], [43.8, 1018.0], [43.9, 1018.0], [44.0, 1018.0], [44.1, 1018.0], [44.2, 1018.0], [44.3, 1018.0], [44.4, 1018.0], [44.5, 1018.0], [44.6, 1018.0], [44.7, 1018.0], [44.8, 1018.0], [44.9, 1018.0], [45.0, 1018.0], [45.1, 1018.0], [45.2, 1018.0], [45.3, 1018.0], [45.4, 1018.0], [45.5, 1018.0], [45.6, 1018.0], [45.7, 1018.0], [45.8, 1018.0], [45.9, 1018.0], [46.0, 1018.0], [46.1, 1018.0], [46.2, 1018.0], [46.3, 1018.0], [46.4, 1018.0], [46.5, 1018.0], [46.6, 1018.0], [46.7, 1018.0], [46.8, 1018.0], [46.9, 1018.0], [47.0, 1018.0], [47.1, 1018.0], [47.2, 1018.0], [47.3, 1018.0], [47.4, 1018.0], [47.5, 1018.0], [47.6, 1018.0], [47.7, 1018.0], [47.8, 1018.0], [47.9, 1018.0], [48.0, 1018.0], [48.1, 1018.0], [48.2, 1018.0], [48.3, 1018.0], [48.4, 1018.0], [48.5, 1018.0], [48.6, 1018.0], [48.7, 1018.0], [48.8, 1018.0], [48.9, 1018.0], [49.0, 1018.0], [49.1, 1018.0], [49.2, 1018.0], [49.3, 1018.0], [49.4, 1018.0], [49.5, 1018.0], [49.6, 1018.0], [49.7, 1018.0], [49.8, 1018.0], [49.9, 1018.0], [50.0, 1018.0], [50.1, 1018.0], [50.2, 1018.0], [50.3, 1018.0], [50.4, 1018.0], [50.5, 1018.0], [50.6, 1018.0], [50.7, 1018.0], [50.8, 1018.0], [50.9, 1018.0], [51.0, 1018.0], [51.1, 1018.0], [51.2, 1018.0], [51.3, 1018.0], [51.4, 1018.0], [51.5, 1018.0], [51.6, 1018.0], [51.7, 1018.0], [51.8, 1018.0], [51.9, 1018.0], [52.0, 1018.0], [52.1, 1018.0], [52.2, 1018.0], [52.3, 1018.0], [52.4, 1018.0], [52.5, 1018.0], [52.6, 1018.0], [52.7, 1018.0], [52.8, 1018.0], [52.9, 1018.0], [53.0, 1018.0], [53.1, 1018.0], [53.2, 1018.0], [53.3, 1018.0], [53.4, 1018.0], [53.5, 1018.0], [53.6, 1018.0], [53.7, 1018.0], [53.8, 1018.0], [53.9, 1018.0], [54.0, 1018.0], [54.1, 1018.0], [54.2, 1018.0], [54.3, 1018.0], [54.4, 1018.0], [54.5, 1018.0], [54.6, 1018.0], [54.7, 1018.0], [54.8, 1018.0], [54.9, 1018.0], [55.0, 1018.0], [55.1, 1018.0], [55.2, 1018.0], [55.3, 1018.0], [55.4, 1018.0], [55.5, 1018.0], [55.6, 1018.0], [55.7, 1018.0], [55.8, 1018.0], [55.9, 1018.0], [56.0, 1018.0], [56.1, 1018.0], [56.2, 1018.0], [56.3, 1018.0], [56.4, 1018.0], [56.5, 1018.0], [56.6, 1018.0], [56.7, 1018.0], [56.8, 1018.0], [56.9, 1018.0], [57.0, 1018.0], [57.1, 1018.0], [57.2, 1018.0], [57.3, 1018.0], [57.4, 1018.0], [57.5, 1018.0], [57.6, 1018.0], [57.7, 1018.0], [57.8, 1018.0], [57.9, 1018.0], [58.0, 1018.0], [58.1, 1018.0], [58.2, 1018.0], [58.3, 1018.0], [58.4, 1018.0], [58.5, 1018.0], [58.6, 1018.0], [58.7, 1018.0], [58.8, 1018.0], [58.9, 1018.0], [59.0, 1018.0], [59.1, 1018.0], [59.2, 1018.0], [59.3, 1018.0], [59.4, 1018.0], [59.5, 1018.0], [59.6, 1018.0], [59.7, 1018.0], [59.8, 1018.0], [59.9, 1018.0], [60.0, 1018.0], [60.1, 1018.0], [60.2, 1018.0], [60.3, 1018.0], [60.4, 1018.0], [60.5, 1018.0], [60.6, 1018.0], [60.7, 1018.0], [60.8, 1018.0], [60.9, 1018.0], [61.0, 1018.0], [61.1, 1018.0], [61.2, 1018.0], [61.3, 1018.0], [61.4, 1018.0], [61.5, 1018.0], [61.6, 1018.0], [61.7, 1018.0], [61.8, 1018.0], [61.9, 1018.0], [62.0, 1018.0], [62.1, 1018.0], [62.2, 1018.0], [62.3, 1018.0], [62.4, 1018.0], [62.5, 1018.0], [62.6, 1018.0], [62.7, 1018.0], [62.8, 1018.0], [62.9, 1018.0], [63.0, 1018.0], [63.1, 1018.0], [63.2, 1018.0], [63.3, 1018.0], [63.4, 1018.0], [63.5, 1018.0], [63.6, 1018.0], [63.7, 1018.0], [63.8, 1018.0], [63.9, 1018.0], [64.0, 1018.0], [64.1, 1018.0], [64.2, 1018.0], [64.3, 1018.0], [64.4, 1018.0], [64.5, 1018.0], [64.6, 1018.0], [64.7, 1018.0], [64.8, 1018.0], [64.9, 1018.0], [65.0, 1018.0], [65.1, 1018.0], [65.2, 1018.0], [65.3, 1018.0], [65.4, 1018.0], [65.5, 1018.0], [65.6, 1018.0], [65.7, 1018.0], [65.8, 1018.0], [65.9, 1018.0], [66.0, 1018.0], [66.1, 1018.0], [66.2, 1018.0], [66.3, 1018.0], [66.4, 1018.0], [66.5, 1018.0], [66.6, 1018.0], [66.7, 1018.0], [66.8, 1018.0], [66.9, 1018.0], [67.0, 1018.0], [67.1, 1018.0], [67.2, 1018.0], [67.3, 1018.0], [67.4, 1018.0], [67.5, 1018.0], [67.6, 1018.0], [67.7, 1018.0], [67.8, 1018.0], [67.9, 1018.0], [68.0, 1018.0], [68.1, 1018.0], [68.2, 1018.0], [68.3, 1018.0], [68.4, 1018.0], [68.5, 1018.0], [68.6, 1018.0], [68.7, 1018.0], [68.8, 1018.0], [68.9, 1018.0], [69.0, 1018.0], [69.1, 1018.0], [69.2, 1018.0], [69.3, 1018.0], [69.4, 1018.0], [69.5, 1018.0], [69.6, 1018.0], [69.7, 1018.0], [69.8, 1018.0], [69.9, 1018.0], [70.0, 1018.0], [70.1, 1018.0], [70.2, 1018.0], [70.3, 1018.0], [70.4, 1018.0], [70.5, 1018.0], [70.6, 1018.0], [70.7, 1018.0], [70.8, 1018.0], [70.9, 1018.0], [71.0, 1018.0], [71.1, 1018.0], [71.2, 1018.0], [71.3, 1018.0], [71.4, 1018.0], [71.5, 1018.0], [71.6, 1018.0], [71.7, 1018.0], [71.8, 1018.0], [71.9, 1018.0], [72.0, 1018.0], [72.1, 1018.0], [72.2, 1018.0], [72.3, 1018.0], [72.4, 1018.0], [72.5, 1018.0], [72.6, 1018.0], [72.7, 1018.0], [72.8, 1018.0], [72.9, 1018.0], [73.0, 1018.0], [73.1, 1018.0], [73.2, 1018.0], [73.3, 1018.0], [73.4, 1018.0], [73.5, 1018.0], [73.6, 1018.0], [73.7, 1018.0], [73.8, 1018.0], [73.9, 1018.0], [74.0, 1018.0], [74.1, 1018.0], [74.2, 1018.0], [74.3, 1018.0], [74.4, 1018.0], [74.5, 1018.0], [74.6, 1018.0], [74.7, 1018.0], [74.8, 1018.0], [74.9, 1018.0], [75.0, 1018.0], [75.1, 1018.0], [75.2, 1018.0], [75.3, 1018.0], [75.4, 1018.0], [75.5, 1018.0], [75.6, 1018.0], [75.7, 1018.0], [75.8, 1018.0], [75.9, 1018.0], [76.0, 1018.0], [76.1, 1018.0], [76.2, 1018.0], [76.3, 1018.0], [76.4, 1018.0], [76.5, 1018.0], [76.6, 1018.0], [76.7, 1018.0], [76.8, 1018.0], [76.9, 1018.0], [77.0, 1018.0], [77.1, 1018.0], [77.2, 1018.0], [77.3, 1018.0], [77.4, 1018.0], [77.5, 1018.0], [77.6, 1018.0], [77.7, 1018.0], [77.8, 1018.0], [77.9, 1018.0], [78.0, 1018.0], [78.1, 1018.0], [78.2, 1018.0], [78.3, 1018.0], [78.4, 1018.0], [78.5, 1018.0], [78.6, 1018.0], [78.7, 1018.0], [78.8, 1018.0], [78.9, 1018.0], [79.0, 1018.0], [79.1, 1018.0], [79.2, 1018.0], [79.3, 1018.0], [79.4, 1018.0], [79.5, 1018.0], [79.6, 1018.0], [79.7, 1018.0], [79.8, 1018.0], [79.9, 1018.0], [80.0, 1018.0], [80.1, 1018.0], [80.2, 1018.0], [80.3, 1018.0], [80.4, 1018.0], [80.5, 1018.0], [80.6, 1018.0], [80.7, 1018.0], [80.8, 1018.0], [80.9, 1018.0], [81.0, 1018.0], [81.1, 1018.0], [81.2, 1018.0], [81.3, 1018.0], [81.4, 1018.0], [81.5, 1018.0], [81.6, 1018.0], [81.7, 1018.0], [81.8, 1018.0], [81.9, 1018.0], [82.0, 1018.0], [82.1, 1018.0], [82.2, 1018.0], [82.3, 1018.0], [82.4, 1018.0], [82.5, 1018.0], [82.6, 1018.0], [82.7, 1018.0], [82.8, 1018.0], [82.9, 1018.0], [83.0, 1018.0], [83.1, 1018.0], [83.2, 1018.0], [83.3, 1018.0], [83.4, 1018.0], [83.5, 1018.0], [83.6, 1018.0], [83.7, 1018.0], [83.8, 1018.0], [83.9, 1018.0], [84.0, 1018.0], [84.1, 1018.0], [84.2, 1018.0], [84.3, 1018.0], [84.4, 1018.0], [84.5, 1018.0], [84.6, 1018.0], [84.7, 1018.0], [84.8, 1018.0], [84.9, 1018.0], [85.0, 1018.0], [85.1, 1018.0], [85.2, 1018.0], [85.3, 1018.0], [85.4, 1018.0], [85.5, 1018.0], [85.6, 1018.0], [85.7, 1018.0], [85.8, 1018.0], [85.9, 1018.0], [86.0, 1018.0], [86.1, 1018.0], [86.2, 1018.0], [86.3, 1018.0], [86.4, 1018.0], [86.5, 1018.0], [86.6, 1018.0], [86.7, 1018.0], [86.8, 1018.0], [86.9, 1018.0], [87.0, 1018.0], [87.1, 1018.0], [87.2, 1018.0], [87.3, 1018.0], [87.4, 1018.0], [87.5, 1018.0], [87.6, 1018.0], [87.7, 1018.0], [87.8, 1018.0], [87.9, 1018.0], [88.0, 1018.0], [88.1, 1018.0], [88.2, 1018.0], [88.3, 1018.0], [88.4, 1018.0], [88.5, 1018.0], [88.6, 1018.0], [88.7, 1018.0], [88.8, 1018.0], [88.9, 1018.0], [89.0, 1018.0], [89.1, 1018.0], [89.2, 1018.0], [89.3, 1018.0], [89.4, 1018.0], [89.5, 1018.0], [89.6, 1018.0], [89.7, 1018.0], [89.8, 1018.0], [89.9, 1018.0], [90.0, 1018.0], [90.1, 1018.0], [90.2, 1018.0], [90.3, 1018.0], [90.4, 1018.0], [90.5, 1018.0], [90.6, 1018.0], [90.7, 1018.0], [90.8, 1018.0], [90.9, 1018.0], [91.0, 1018.0], [91.1, 1018.0], [91.2, 1018.0], [91.3, 1018.0], [91.4, 1018.0], [91.5, 1018.0], [91.6, 1018.0], [91.7, 1018.0], [91.8, 1018.0], [91.9, 1018.0], [92.0, 1018.0], [92.1, 1018.0], [92.2, 1018.0], [92.3, 1018.0], [92.4, 1018.0], [92.5, 1018.0], [92.6, 1018.0], [92.7, 1018.0], [92.8, 1018.0], [92.9, 1018.0], [93.0, 1018.0], [93.1, 1018.0], [93.2, 1018.0], [93.3, 1018.0], [93.4, 1018.0], [93.5, 1018.0], [93.6, 1018.0], [93.7, 1018.0], [93.8, 1018.0], [93.9, 1018.0], [94.0, 1018.0], [94.1, 1018.0], [94.2, 1018.0], [94.3, 1018.0], [94.4, 1018.0], [94.5, 1018.0], [94.6, 1018.0], [94.7, 1018.0], [94.8, 1018.0], [94.9, 1018.0], [95.0, 1018.0], [95.1, 1018.0], [95.2, 1018.0], [95.3, 1018.0], [95.4, 1018.0], [95.5, 1018.0], [95.6, 1018.0], [95.7, 1018.0], [95.8, 1018.0], [95.9, 1018.0], [96.0, 1018.0], [96.1, 1018.0], [96.2, 1018.0], [96.3, 1018.0], [96.4, 1018.0], [96.5, 1018.0], [96.6, 1018.0], [96.7, 1018.0], [96.8, 1018.0], [96.9, 1018.0], [97.0, 1018.0], [97.1, 1018.0], [97.2, 1018.0], [97.3, 1018.0], [97.4, 1018.0], [97.5, 1018.0], [97.6, 1018.0], [97.7, 1018.0], [97.8, 1018.0], [97.9, 1018.0], [98.0, 1018.0], [98.1, 1018.0], [98.2, 1018.0], [98.3, 1018.0], [98.4, 1018.0], [98.5, 1018.0], [98.6, 1018.0], [98.7, 1018.0], [98.8, 1018.0], [98.9, 1018.0], [99.0, 1018.0], [99.1, 1018.0], [99.2, 1018.0], [99.3, 1018.0], [99.4, 1018.0], [99.5, 1018.0], [99.6, 1018.0], [99.7, 1018.0], [99.8, 1018.0], [99.9, 1018.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 3325.0, "series": [{"data": [[41700.0, 1.0], [56500.0, 1.0], [300.0, 23.0], [79400.0, 1.0], [400.0, 156.0], [500.0, 515.0], [600.0, 1425.0], [700.0, 2596.0], [800.0, 3031.0], [900.0, 3325.0], [1000.0, 2802.0], [1100.0, 1906.0], [1200.0, 1278.0], [1300.0, 988.0], [1400.0, 930.0], [1500.0, 870.0], [1600.0, 901.0], [1700.0, 1098.0], [1800.0, 1140.0], [1900.0, 1196.0], [2000.0, 1239.0], [2100.0, 1073.0], [2300.0, 988.0], [2200.0, 955.0], [2400.0, 818.0], [2500.0, 832.0], [2600.0, 831.0], [2700.0, 758.0], [2800.0, 648.0], [2900.0, 634.0], [3000.0, 536.0], [3100.0, 532.0], [3300.0, 466.0], [3200.0, 450.0], [3400.0, 412.0], [3500.0, 401.0], [3700.0, 317.0], [3600.0, 357.0], [3800.0, 282.0], [3900.0, 260.0], [4000.0, 216.0], [4200.0, 190.0], [4100.0, 216.0], [4300.0, 173.0], [4400.0, 181.0], [4600.0, 147.0], [4500.0, 167.0], [4800.0, 115.0], [4700.0, 146.0], [74500.0, 2.0], [5000.0, 123.0], [4900.0, 113.0], [5100.0, 89.0], [5300.0, 86.0], [5200.0, 72.0], [5600.0, 81.0], [5500.0, 102.0], [5400.0, 96.0], [5800.0, 75.0], [5700.0, 53.0], [6000.0, 50.0], [5900.0, 75.0], [6100.0, 55.0], [6200.0, 51.0], [6300.0, 61.0], [6400.0, 52.0], [6500.0, 50.0], [6600.0, 36.0], [6700.0, 39.0], [6900.0, 39.0], [6800.0, 39.0], [7100.0, 28.0], [7000.0, 35.0], [7300.0, 40.0], [7400.0, 41.0], [7200.0, 32.0], [7500.0, 37.0], [7600.0, 35.0], [7700.0, 25.0], [7900.0, 33.0], [7800.0, 23.0], [8000.0, 37.0], [8100.0, 22.0], [8300.0, 32.0], [8400.0, 19.0], [8600.0, 32.0], [8500.0, 22.0], [8700.0, 34.0], [8200.0, 39.0], [9000.0, 32.0], [9100.0, 28.0], [8800.0, 33.0], [8900.0, 27.0], [9200.0, 24.0], [9600.0, 16.0], [9400.0, 25.0], [9300.0, 22.0], [9700.0, 21.0], [9500.0, 19.0], [10100.0, 10.0], [9900.0, 18.0], [10200.0, 15.0], [9800.0, 22.0], [10000.0, 15.0], [10500.0, 10.0], [10400.0, 16.0], [10600.0, 12.0], [10700.0, 10.0], [10300.0, 9.0], [11200.0, 8.0], [11100.0, 14.0], [10800.0, 8.0], [11000.0, 8.0], [10900.0, 9.0], [11400.0, 11.0], [11600.0, 1.0], [11500.0, 2.0], [11300.0, 4.0], [11700.0, 6.0], [12000.0, 7.0], [11900.0, 3.0], [12100.0, 15.0], [11800.0, 4.0], [12200.0, 5.0], [12700.0, 6.0], [12500.0, 7.0], [12300.0, 5.0], [12400.0, 3.0], [12600.0, 1.0], [12800.0, 5.0], [12900.0, 3.0], [13200.0, 7.0], [13100.0, 6.0], [13500.0, 4.0], [13400.0, 1.0], [13600.0, 5.0], [13800.0, 3.0], [13700.0, 4.0], [14200.0, 4.0], [13900.0, 2.0], [14100.0, 3.0], [14000.0, 4.0], [14300.0, 1.0], [14800.0, 2.0], [14700.0, 4.0], [14600.0, 2.0], [14500.0, 1.0], [15300.0, 5.0], [15200.0, 2.0], [15100.0, 6.0], [14900.0, 3.0], [15000.0, 3.0], [15400.0, 5.0], [15700.0, 5.0], [15800.0, 2.0], [15500.0, 2.0], [15600.0, 2.0], [16200.0, 5.0], [16300.0, 10.0], [15900.0, 5.0], [16100.0, 6.0], [16000.0, 9.0], [16800.0, 3.0], [16600.0, 4.0], [16400.0, 6.0], [17400.0, 2.0], [17200.0, 2.0], [17000.0, 1.0], [18000.0, 5.0], [17800.0, 4.0], [17600.0, 3.0], [18400.0, 1.0], [19200.0, 1.0], [19000.0, 3.0], [18800.0, 1.0], [18600.0, 1.0], [20200.0, 2.0], [20000.0, 4.0], [19800.0, 1.0], [20800.0, 1.0], [21200.0, 2.0], [20600.0, 1.0], [21000.0, 1.0], [22000.0, 2.0], [22200.0, 3.0], [23200.0, 2.0], [22800.0, 2.0], [23000.0, 1.0], [23600.0, 1.0], [25200.0, 2.0], [24800.0, 1.0], [25000.0, 1.0], [26000.0, 1.0], [26600.0, 1.0], [25600.0, 1.0], [25800.0, 1.0], [27200.0, 1.0], [27400.0, 1.0], [27000.0, 1.0], [28000.0, 1.0], [28400.0, 2.0], [27800.0, 2.0], [29000.0, 1.0], [29600.0, 1.0], [30600.0, 2.0], [31600.0, 1.0], [32400.0, 1.0], [32600.0, 1.0], [32000.0, 1.0], [32800.0, 1.0], [40400.0, 1.0], [58400.0, 1.0], [57600.0, 2.0], [60400.0, 1.0], [101500.0, 1.0], [34300.0, 1.0], [34700.0, 2.0], [37900.0, 1.0], [46300.0, 1.0], [51900.0, 1.0], [54700.0, 1.0], [57100.0, 1.0], [87700.0, 2.0], [16500.0, 9.0], [16700.0, 3.0], [16900.0, 1.0], [17300.0, 3.0], [17100.0, 4.0], [17500.0, 3.0], [18300.0, 2.0], [17900.0, 3.0], [18100.0, 1.0], [17700.0, 1.0], [19100.0, 1.0], [18500.0, 2.0], [18900.0, 2.0], [18700.0, 2.0], [20100.0, 4.0], [20300.0, 1.0], [19900.0, 1.0], [21100.0, 1.0], [21300.0, 1.0], [21500.0, 2.0], [21900.0, 1.0], [21700.0, 1.0], [22100.0, 1.0], [22300.0, 1.0], [22500.0, 1.0], [23100.0, 5.0], [22700.0, 1.0], [24500.0, 1.0], [23700.0, 1.0], [23900.0, 1.0], [24100.0, 2.0], [24900.0, 1.0], [26100.0, 2.0], [26900.0, 1.0], [27500.0, 1.0], [28100.0, 1.0], [29700.0, 2.0], [30500.0, 1.0], [30100.0, 1.0], [30700.0, 1.0], [31500.0, 1.0], [32300.0, 1.0], [32500.0, 1.0], [32700.0, 1.0], [34200.0, 2.0], [35800.0, 1.0], [54600.0, 2.0], [60600.0, 1.0], [87600.0, 1.0]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[1000.0, 1.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 101500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 22367.0, "series": [{"data": [[0.0, 181.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 18800.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 22367.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 9.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.71951828E12, "maxY": 180.0, "series": [{"data": [[1.71951828E12, 1.0]], "isOverall": false, "label": "setUpAutenticacionCognito", "isController": false}, {"data": [[1.71951852E12, 180.0], [1.7195187E12, 180.0], [1.71951864E12, 180.0], [1.71951834E12, 163.97270280661323], [1.71951882E12, 180.0], [1.71951828E12, 56.94869109947649], [1.71951876E12, 180.0], [1.71951846E12, 180.0], [1.7195184E12, 180.0], [1.71951888E12, 173.44787803873103], [1.71951858E12, 180.0]], "isOverall": false, "label": "consultarPlaca", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71951888E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 354.0, "minX": 1.0, "maxY": 34741.0, "series": [{"data": [[2.0, 34741.0], [3.0, 11888.666666666666], [4.0, 10790.666666666666], [5.0, 11158.333333333334], [6.0, 9324.0], [7.0, 6539.8], [8.0, 354.0], [9.0, 19923.222222222223], [10.0, 22241.5], [11.0, 4809.75], [12.0, 3302.571428571429], [13.0, 2644.8571428571427], [14.0, 3428.285714285714], [15.0, 3127.4], [16.0, 1963.0], [17.0, 2952.8333333333335], [18.0, 2735.2], [19.0, 1610.0], [20.0, 1087.2727272727273], [21.0, 1696.8], [22.0, 1756.5], [23.0, 1745.0833333333335], [24.0, 8803.666666666666], [25.0, 2842.6666666666665], [26.0, 968.0833333333333], [27.0, 1516.75], [28.0, 1242.3076923076924], [29.0, 1826.7142857142858], [30.0, 2151.5], [31.0, 1220.3846153846152], [32.0, 1064.8181818181818], [33.0, 1105.0], [34.0, 1255.7857142857142], [35.0, 1682.5555555555557], [36.0, 2227.3999999999996], [37.0, 2092.4545454545455], [38.0, 1485.1], [39.0, 1048.375], [40.0, 1024.0], [41.0, 1426.4444444444443], [42.0, 1036.5384615384614], [43.0, 1336.3636363636365], [44.0, 1217.6], [45.0, 1492.7692307692305], [46.0, 1045.846153846154], [47.0, 1252.0], [48.0, 1173.0769230769233], [49.0, 1203.75], [50.0, 1119.529411764706], [51.0, 1227.166666666667], [52.0, 1363.5833333333333], [53.0, 1220.75], [54.0, 1577.230769230769], [55.0, 1515.090909090909], [56.0, 1477.2857142857142], [57.0, 3217.5], [58.0, 2487.642857142857], [59.0, 1452.0], [60.0, 1319.9333333333336], [61.0, 1707.3333333333333], [62.0, 1368.9166666666665], [63.0, 1321.8571428571431], [64.0, 3272.0], [65.0, 1544.9090909090908], [66.0, 1684.2857142857144], [67.0, 1923.0], [68.0, 1910.7333333333333], [69.0, 1596.9333333333334], [70.0, 1775.7894736842106], [71.0, 1578.4615384615386], [72.0, 1525.875], [73.0, 1553.0714285714287], [74.0, 1961.4444444444443], [75.0, 3724.5], [76.0, 4418.6], [77.0, 1873.1764705882351], [78.0, 2013.8333333333335], [79.0, 1974.1250000000002], [80.0, 2168.1333333333337], [81.0, 1592.3999999999999], [82.0, 2033.642857142857], [83.0, 1977.6666666666667], [84.0, 1964.9285714285718], [85.0, 2094.0], [86.0, 2120.6470588235293], [87.0, 2222.75], [88.0, 2184.75], [89.0, 2013.8], [90.0, 2770.444444444444], [91.0, 2025.1739130434776], [92.0, 2113.1111111111113], [93.0, 2305.571428571429], [94.0, 2212.6], [95.0, 2095.454545454545], [96.0, 2269.5789473684213], [97.0, 2181.928571428571], [98.0, 2261.307692307693], [99.0, 2489.2000000000003], [100.0, 2393.3125000000005], [101.0, 2325.4444444444443], [102.0, 1808.909090909091], [103.0, 2382.111111111111], [104.0, 2776.5], [105.0, 2483.0666666666666], [106.0, 2693.4], [107.0, 2597.181818181818], [108.0, 2278.5], [109.0, 2162.1875], [110.0, 2895.9], [111.0, 2882.2], [112.0, 2814.583333333333], [113.0, 3209.7999999999997], [114.0, 3191.9], [115.0, 2372.4666666666667], [116.0, 2515.416666666667], [117.0, 2972.8749999999995], [118.0, 3051.6315789473683], [119.0, 3091.916666666667], [120.0, 2798.045454545454], [121.0, 2761.2999999999997], [122.0, 3031.6499999999996], [123.0, 2791.1428571428573], [124.0, 2801.3124999999995], [125.0, 2470.333333333333], [126.0, 2354.1], [127.0, 2491.5], [128.0, 2842.846153846154], [129.0, 3071.117647058824], [130.0, 2807.4375], [131.0, 2843.5], [132.0, 3013.736842105263], [133.0, 2822.125], [134.0, 3617.3333333333335], [135.0, 3155.3125000000005], [136.0, 2919.5454545454545], [137.0, 2728.238095238096], [138.0, 2841.8333333333335], [139.0, 3247.9444444444443], [140.0, 2801.6666666666665], [141.0, 3297.9230769230767], [142.0, 3244.631578947369], [143.0, 3199.25], [144.0, 2928.3333333333335], [145.0, 2725.6470588235297], [146.0, 3330.9090909090905], [147.0, 3209.1428571428573], [148.0, 3079.3846153846157], [149.0, 3310.588235294118], [150.0, 3869.1428571428573], [151.0, 3234.7999999999997], [152.0, 2946.3636363636365], [153.0, 2601.2500000000005], [154.0, 3175.3333333333335], [155.0, 3456.222222222222], [156.0, 3084.181818181818], [157.0, 3192.052631578947], [158.0, 3220.0], [159.0, 3195.357142857143], [160.0, 2658.4999999999995], [161.0, 3127.6666666666665], [162.0, 3177.4444444444443], [163.0, 2635.8], [164.0, 3653.8636363636365], [165.0, 3152.666666666667], [166.0, 3447.571428571429], [167.0, 3523.133333333333], [168.0, 3389.5000000000005], [169.0, 2007.0], [170.0, 3674.409090909091], [171.0, 3186.0833333333335], [172.0, 3610.7058823529405], [173.0, 3064.333333333333], [174.0, 3503.8421052631584], [175.0, 3258.25], [176.0, 3888.9411764705887], [177.0, 4235.624999999999], [178.0, 2763.25], [180.0, 2266.182917804378], [179.0, 752.0]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[175.76595899022996, 2286.391333784697]], "isOverall": false, "label": "getPlate-Aggregated", "isController": false}, {"data": [[1.0, 1018.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}, {"data": [[1.0, 1018.0]], "isOverall": false, "label": "loginAFlypass-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 180.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7500.383333333333, "minX": 1.71951828E12, "maxY": 74797.91666666667, "series": [{"data": [[1.71951852E12, 30595.6], [1.7195187E12, 37957.86666666667], [1.71951864E12, 37435.833333333336], [1.71951834E12, 20331.983333333334], [1.71951882E12, 40103.85], [1.71951828E12, 7500.383333333333], [1.71951876E12, 40184.433333333334], [1.71951846E12, 28594.333333333332], [1.7195184E12, 27383.15], [1.71951888E12, 19122.333333333332], [1.71951858E12, 34433.933333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71951852E12, 57079.166666666664], [1.7195187E12, 70729.16666666667], [1.71951864E12, 69839.58333333333], [1.71951834E12, 37931.25], [1.71951882E12, 74666.66666666667], [1.71951828E12, 13932.933333333332], [1.71951876E12, 74797.91666666667], [1.71951846E12, 53345.833333333336], [1.7195184E12, 51085.416666666664], [1.71951888E12, 35335.416666666664], [1.71951858E12, 64239.583333333336]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71951888E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1018.0, "minX": 1.71951828E12, "maxY": 3426.5624759707844, "series": [{"data": [[1.71951852E12, 2577.115738375067], [1.7195187E12, 2054.8491032776665], [1.71951864E12, 1937.1317602839877], [1.71951834E12, 3426.5624759707844], [1.71951882E12, 1868.34673955486], [1.71951828E12, 1359.8324607329832], [1.71951876E12, 1919.7271487039557], [1.71951846E12, 2741.274466921822], [1.7195184E12, 2906.2532115329727], [1.71951888E12, 2258.1755253399274], [1.71951858E12, 2248.46129398411]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[1.71951828E12, 1018.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71951888E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1014.0, "minX": 1.71951828E12, "maxY": 3402.956170703573, "series": [{"data": [[1.71951852E12, 2562.879918242215], [1.7195187E12, 2038.8039579468104], [1.71951864E12, 1931.567341825022], [1.71951834E12, 3402.956170703573], [1.71951882E12, 1841.6632174931663], [1.71951828E12, 1341.2858638743458], [1.71951876E12, 1882.8187487819177], [1.71951846E12, 2726.737834882451], [1.7195184E12, 2892.7616328860986], [1.71951888E12, 2118.8549649773395], [1.71951858E12, 2240.1575482406306]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[1.71951828E12, 1014.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71951888E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 281.49319371727756, "minX": 1.71951828E12, "maxY": 2133.223320972392, "series": [{"data": [[1.71951852E12, 703.0743484925897], [1.7195187E12, 1757.5650381364683], [1.71951864E12, 1484.912925454162], [1.71951834E12, 381.20415224913506], [1.71951882E12, 1745.8246778602115], [1.71951828E12, 281.49319371727756], [1.71951876E12, 1739.3966088481795], [1.71951846E12, 570.7020229633683], [1.7195184E12, 521.295746502996], [1.71951888E12, 2133.223320972392], [1.71951858E12, 1112.5929625425651]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[1.71951828E12, 880.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71951888E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 338.0, "minX": 1.71951828E12, "maxY": 58421.0, "series": [{"data": [[1.71951852E12, 9950.0], [1.7195187E12, 57149.0], [1.71951864E12, 34367.0], [1.71951834E12, 11247.0], [1.71951882E12, 58421.0], [1.71951828E12, 3454.0], [1.71951876E12, 54707.0], [1.71951846E12, 14268.0], [1.7195184E12, 10566.0], [1.71951888E12, 57695.0], [1.71951858E12, 29062.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71951852E12, 3955.5], [1.7195187E12, 4040.0000000000055], [1.71951864E12, 3521.0], [1.71951834E12, 4938.6], [1.71951882E12, 3668.4000000000033], [1.71951828E12, 2210.9], [1.71951876E12, 3684.0], [1.71951846E12, 4030.6999999999994], [1.7195184E12, 4385.199999999999], [1.71951888E12, 4655.599999999997], [1.71951858E12, 3581.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71951852E12, 7387.849999999997], [1.7195187E12, 16082.02999999999], [1.71951864E12, 11160.800000000007], [1.71951834E12, 6926.92], [1.71951882E12, 14972.06], [1.71951828E12, 2953.089999999997], [1.71951876E12, 16067.199999999988], [1.71951846E12, 6166.629999999994], [1.7195184E12, 6884.800000000001], [1.71951888E12, 17867.079999999998], [1.71951858E12, 8694.179999999982]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71951852E12, 4752.0], [1.7195187E12, 7807.799999999999], [1.71951864E12, 5876.5], [1.71951834E12, 5567.5], [1.71951882E12, 7132.3999999999905], [1.71951828E12, 2538.0], [1.71951876E12, 7201.5], [1.71951846E12, 4597.099999999999], [1.7195184E12, 5081.799999999998], [1.71951888E12, 8322.599999999997], [1.71951858E12, 5557.999999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.71951852E12, 504.0], [1.7195187E12, 364.0], [1.71951864E12, 406.0], [1.71951834E12, 777.0], [1.71951882E12, 362.0], [1.71951828E12, 346.0], [1.71951876E12, 445.0], [1.71951846E12, 713.0], [1.7195184E12, 547.0], [1.71951888E12, 338.0], [1.71951858E12, 373.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71951852E12, 2331.5], [1.7195187E12, 1063.5], [1.71951864E12, 1215.0], [1.71951834E12, 3266.0], [1.71951882E12, 919.5], [1.71951828E12, 1263.0], [1.71951876E12, 986.0], [1.71951846E12, 2585.0], [1.7195184E12, 2677.0], [1.71951888E12, 949.0], [1.71951858E12, 1798.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71951888E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 377.0, "minX": 1.0, "maxY": 101528.0, "series": [{"data": [[2.0, 16788.5], [3.0, 15415.0], [4.0, 13904.0], [5.0, 377.0], [9.0, 476.0], [14.0, 3911.5], [15.0, 501.0], [19.0, 1488.0], [20.0, 3245.0], [21.0, 617.0], [22.0, 2227.5], [24.0, 3092.5], [25.0, 3078.0], [26.0, 1769.5], [27.0, 712.0], [28.0, 1351.0], [29.0, 1353.0], [30.0, 873.0], [31.0, 1211.0], [33.0, 2756.0], [34.0, 1464.5], [35.0, 2772.0], [37.0, 2757.0], [36.0, 3383.5], [38.0, 2994.0], [39.0, 2050.0], [40.0, 3009.0], [41.0, 3547.5], [42.0, 2331.5], [43.0, 2043.0], [44.0, 3175.5], [45.0, 3266.0], [46.0, 2449.0], [47.0, 2386.0], [48.0, 3162.5], [49.0, 2693.5], [50.0, 2822.0], [51.0, 2579.0], [53.0, 2821.0], [52.0, 2983.5], [55.0, 2419.0], [54.0, 2292.5], [57.0, 2259.0], [56.0, 2067.5], [58.0, 2198.0], [59.0, 2050.0], [60.0, 2672.0], [61.0, 2440.0], [63.0, 2267.0], [62.0, 2032.0], [64.0, 2255.5], [67.0, 2414.5], [65.0, 2081.0], [66.0, 1842.0], [71.0, 1615.5], [68.0, 2067.5], [69.0, 2336.0], [70.0, 1483.5], [72.0, 1845.0], [73.0, 1707.5], [75.0, 1932.0], [74.0, 1273.5], [77.0, 1895.0], [76.0, 1870.0], [78.0, 1190.0], [79.0, 1149.5], [83.0, 1200.5], [82.0, 1519.0], [81.0, 1132.5], [80.0, 1060.0], [84.0, 1078.5], [85.0, 1422.0], [87.0, 1186.5], [86.0, 1057.0], [88.0, 1073.0], [90.0, 1085.0], [89.0, 1165.0], [91.0, 1122.0], [94.0, 1018.0], [92.0, 1198.0], [95.0, 1060.5], [93.0, 984.0], [96.0, 1063.0], [97.0, 1113.0], [98.0, 1156.0], [99.0, 1003.0], [102.0, 909.5], [103.0, 1072.0], [100.0, 910.5], [101.0, 1028.0], [107.0, 1130.0], [104.0, 1064.5], [105.0, 1012.5], [106.0, 1023.5], [108.0, 1242.0], [109.0, 939.0], [111.0, 2074.0], [110.0, 770.5], [113.0, 1072.0], [112.0, 1074.5], [114.0, 1896.0], [115.0, 792.0], [116.0, 1472.0], [119.0, 950.0], [117.0, 907.0], [120.0, 1071.5], [1.0, 16307.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[66.0, 101528.0], [4.0, 74534.0], [79.0, 60647.0], [77.0, 60405.0], [80.0, 79470.0], [93.0, 74547.0], [3.0, 87728.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 120.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 16788.5, "series": [{"data": [[2.0, 16788.5], [3.0, 15415.0], [4.0, 13904.0], [5.0, 377.0], [9.0, 450.0], [14.0, 3908.5], [15.0, 500.0], [19.0, 1488.0], [20.0, 3245.0], [21.0, 597.0], [22.0, 2224.0], [24.0, 3092.0], [25.0, 3078.0], [26.0, 1764.5], [27.0, 693.0], [28.0, 1350.5], [29.0, 1282.0], [30.0, 830.0], [31.0, 1168.0], [33.0, 2750.0], [34.0, 1424.5], [35.0, 2734.5], [37.0, 2694.0], [36.0, 3322.0], [38.0, 2989.0], [39.0, 2041.0], [40.0, 2988.5], [41.0, 3540.5], [42.0, 2314.0], [43.0, 2034.0], [44.0, 3163.0], [45.0, 3184.0], [46.0, 2436.0], [47.0, 2364.0], [48.0, 3131.0], [49.0, 2691.0], [50.0, 2808.0], [51.0, 2548.0], [53.0, 2798.0], [52.0, 2977.5], [55.0, 2393.0], [54.0, 2273.5], [57.0, 2239.0], [56.0, 2046.0], [58.0, 2179.0], [59.0, 2039.0], [60.0, 2659.0], [61.0, 2426.5], [63.0, 2263.0], [62.0, 2020.0], [64.0, 2235.0], [67.0, 2406.0], [65.0, 2050.0], [66.0, 1828.0], [71.0, 1615.0], [68.0, 2063.0], [69.0, 2323.0], [70.0, 1476.0], [72.0, 1840.5], [73.0, 1697.5], [75.0, 1932.0], [74.0, 1265.0], [77.0, 1890.0], [76.0, 1845.5], [78.0, 1187.5], [79.0, 1145.5], [83.0, 1192.5], [82.0, 1517.0], [81.0, 1132.0], [80.0, 1060.0], [84.0, 1067.0], [85.0, 1422.0], [87.0, 1179.5], [86.0, 1056.0], [88.0, 1071.5], [90.0, 1083.5], [89.0, 1165.0], [91.0, 1121.0], [94.0, 1015.0], [92.0, 1189.0], [95.0, 1056.5], [93.0, 981.5], [96.0, 1059.5], [97.0, 1091.0], [98.0, 1151.0], [99.0, 1003.0], [102.0, 909.5], [103.0, 1062.0], [100.0, 910.5], [101.0, 1028.0], [107.0, 1127.0], [104.0, 1060.5], [105.0, 1012.0], [106.0, 1018.0], [108.0, 1233.5], [109.0, 935.0], [111.0, 2061.0], [110.0, 770.5], [113.0, 1066.0], [112.0, 1071.5], [114.0, 1896.0], [115.0, 791.0], [116.0, 1472.0], [119.0, 950.0], [117.0, 907.0], [120.0, 1069.0], [1.0, 16305.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[66.0, 0.0], [4.0, 0.0], [79.0, 0.0], [77.0, 0.0], [80.0, 0.0], [93.0, 0.0], [3.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 120.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 17.4, "minX": 1.71951828E12, "maxY": 85.66666666666667, "series": [{"data": [[1.71951852E12, 65.18333333333334], [1.7195187E12, 80.68333333333334], [1.71951864E12, 79.9], [1.71951834E12, 44.8], [1.71951882E12, 85.1], [1.71951828E12, 17.4], [1.71951876E12, 85.66666666666667], [1.71951846E12, 61.05], [1.7195184E12, 58.18333333333333], [1.71951888E12, 37.766666666666666], [1.71951858E12, 73.55]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71951888E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71951828E12, "maxY": 85.48333333333333, "series": [{"data": [[1.7195187E12, 0.016666666666666666], [1.71951882E12, 0.016666666666666666], [1.71951876E12, 0.03333333333333333], [1.71951888E12, 0.06666666666666667]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.71951852E12, 65.23333333333333], [1.7195187E12, 80.83333333333333], [1.71951864E12, 79.81666666666666], [1.71951834E12, 43.35], [1.71951882E12, 85.33333333333333], [1.71951828E12, 15.933333333333334], [1.71951876E12, 85.48333333333333], [1.71951846E12, 60.96666666666667], [1.7195184E12, 58.38333333333333], [1.71951888E12, 40.38333333333333], [1.71951858E12, 73.41666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71951882E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71951888E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71951828E12, "maxY": 85.48333333333333, "series": [{"data": [[1.71951828E12, 0.016666666666666666]], "isOverall": false, "label": "loginAFlypass-success", "isController": false}, {"data": [[1.7195187E12, 0.016666666666666666], [1.71951882E12, 0.03333333333333333], [1.71951876E12, 0.03333333333333333], [1.71951888E12, 0.06666666666666667]], "isOverall": false, "label": "getPlate-failure", "isController": false}, {"data": [[1.71951852E12, 65.23333333333333], [1.7195187E12, 80.83333333333333], [1.71951864E12, 79.81666666666666], [1.71951834E12, 43.35], [1.71951882E12, 85.33333333333333], [1.71951828E12, 15.916666666666666], [1.71951876E12, 85.48333333333333], [1.71951846E12, 60.96666666666667], [1.7195184E12, 58.38333333333333], [1.71951888E12, 40.38333333333333], [1.71951858E12, 73.41666666666667]], "isOverall": false, "label": "getPlate-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71951888E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71951828E12, "maxY": 85.48333333333333, "series": [{"data": [[1.71951852E12, 65.23333333333333], [1.7195187E12, 80.83333333333333], [1.71951864E12, 79.81666666666666], [1.71951834E12, 43.35], [1.71951882E12, 85.33333333333333], [1.71951828E12, 15.933333333333334], [1.71951876E12, 85.48333333333333], [1.71951846E12, 60.96666666666667], [1.7195184E12, 58.38333333333333], [1.71951888E12, 40.38333333333333], [1.71951858E12, 73.41666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7195187E12, 0.016666666666666666], [1.71951882E12, 0.03333333333333333], [1.71951876E12, 0.03333333333333333], [1.71951888E12, 0.06666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71951888E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

