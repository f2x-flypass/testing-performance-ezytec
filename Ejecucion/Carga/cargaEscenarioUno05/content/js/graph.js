/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 299.0, "minX": 0.0, "maxY": 25240.0, "series": [{"data": [[0.0, 841.0], [0.1, 841.0], [0.2, 841.0], [0.3, 841.0], [0.4, 841.0], [0.5, 841.0], [0.6, 845.0], [0.7, 845.0], [0.8, 845.0], [0.9, 845.0], [1.0, 845.0], [1.1, 845.0], [1.2, 868.0], [1.3, 868.0], [1.4, 868.0], [1.5, 868.0], [1.6, 868.0], [1.7, 868.0], [1.8, 875.0], [1.9, 875.0], [2.0, 875.0], [2.1, 875.0], [2.2, 875.0], [2.3, 875.0], [2.4, 885.0], [2.5, 885.0], [2.6, 885.0], [2.7, 885.0], [2.8, 885.0], [2.9, 885.0], [3.0, 890.0], [3.1, 890.0], [3.2, 890.0], [3.3, 890.0], [3.4, 890.0], [3.5, 890.0], [3.6, 899.0], [3.7, 899.0], [3.8, 899.0], [3.9, 899.0], [4.0, 899.0], [4.1, 899.0], [4.2, 913.0], [4.3, 913.0], [4.4, 913.0], [4.5, 913.0], [4.6, 913.0], [4.7, 913.0], [4.8, 916.0], [4.9, 916.0], [5.0, 916.0], [5.1, 916.0], [5.2, 916.0], [5.3, 916.0], [5.4, 924.0], [5.5, 924.0], [5.6, 924.0], [5.7, 924.0], [5.8, 924.0], [5.9, 924.0], [6.0, 930.0], [6.1, 930.0], [6.2, 930.0], [6.3, 930.0], [6.4, 930.0], [6.5, 930.0], [6.6, 933.0], [6.7, 933.0], [6.8, 933.0], [6.9, 933.0], [7.0, 933.0], [7.1, 933.0], [7.2, 937.0], [7.3, 937.0], [7.4, 937.0], [7.5, 937.0], [7.6, 937.0], [7.7, 937.0], [7.8, 937.0], [7.9, 937.0], [8.0, 937.0], [8.1, 937.0], [8.2, 937.0], [8.3, 943.0], [8.4, 943.0], [8.5, 943.0], [8.6, 943.0], [8.7, 943.0], [8.8, 943.0], [8.9, 952.0], [9.0, 952.0], [9.1, 952.0], [9.2, 952.0], [9.3, 952.0], [9.4, 952.0], [9.5, 961.0], [9.6, 961.0], [9.7, 961.0], [9.8, 961.0], [9.9, 961.0], [10.0, 961.0], [10.1, 961.0], [10.2, 961.0], [10.3, 961.0], [10.4, 961.0], [10.5, 961.0], [10.6, 961.0], [10.7, 964.0], [10.8, 964.0], [10.9, 964.0], [11.0, 964.0], [11.1, 964.0], [11.2, 964.0], [11.3, 965.0], [11.4, 965.0], [11.5, 965.0], [11.6, 965.0], [11.7, 965.0], [11.8, 965.0], [11.9, 971.0], [12.0, 971.0], [12.1, 971.0], [12.2, 971.0], [12.3, 971.0], [12.4, 971.0], [12.5, 971.0], [12.6, 971.0], [12.7, 971.0], [12.8, 971.0], [12.9, 971.0], [13.0, 971.0], [13.1, 978.0], [13.2, 978.0], [13.3, 978.0], [13.4, 978.0], [13.5, 978.0], [13.6, 978.0], [13.7, 984.0], [13.8, 984.0], [13.9, 984.0], [14.0, 984.0], [14.1, 984.0], [14.2, 984.0], [14.3, 986.0], [14.4, 986.0], [14.5, 986.0], [14.6, 986.0], [14.7, 986.0], [14.8, 989.0], [14.9, 989.0], [15.0, 989.0], [15.1, 989.0], [15.2, 989.0], [15.3, 989.0], [15.4, 989.0], [15.5, 989.0], [15.6, 989.0], [15.7, 989.0], [15.8, 989.0], [15.9, 989.0], [16.0, 989.0], [16.1, 989.0], [16.2, 989.0], [16.3, 989.0], [16.4, 989.0], [16.5, 989.0], [16.6, 994.0], [16.7, 994.0], [16.8, 994.0], [16.9, 994.0], [17.0, 994.0], [17.1, 994.0], [17.2, 994.0], [17.3, 994.0], [17.4, 994.0], [17.5, 994.0], [17.6, 994.0], [17.7, 994.0], [17.8, 1001.0], [17.9, 1001.0], [18.0, 1001.0], [18.1, 1001.0], [18.2, 1001.0], [18.3, 1001.0], [18.4, 1002.0], [18.5, 1002.0], [18.6, 1002.0], [18.7, 1002.0], [18.8, 1002.0], [18.9, 1002.0], [19.0, 1005.0], [19.1, 1005.0], [19.2, 1005.0], [19.3, 1005.0], [19.4, 1005.0], [19.5, 1005.0], [19.6, 1014.0], [19.7, 1014.0], [19.8, 1014.0], [19.9, 1014.0], [20.0, 1014.0], [20.1, 1014.0], [20.2, 1015.0], [20.3, 1015.0], [20.4, 1015.0], [20.5, 1015.0], [20.6, 1015.0], [20.7, 1015.0], [20.8, 1020.0], [20.9, 1020.0], [21.0, 1020.0], [21.1, 1020.0], [21.2, 1020.0], [21.3, 1020.0], [21.4, 1024.0], [21.5, 1024.0], [21.6, 1024.0], [21.7, 1024.0], [21.8, 1024.0], [21.9, 1026.0], [22.0, 1026.0], [22.1, 1026.0], [22.2, 1026.0], [22.3, 1026.0], [22.4, 1026.0], [22.5, 1028.0], [22.6, 1028.0], [22.7, 1028.0], [22.8, 1028.0], [22.9, 1028.0], [23.0, 1028.0], [23.1, 1032.0], [23.2, 1032.0], [23.3, 1032.0], [23.4, 1032.0], [23.5, 1032.0], [23.6, 1032.0], [23.7, 1033.0], [23.8, 1033.0], [23.9, 1033.0], [24.0, 1033.0], [24.1, 1033.0], [24.2, 1033.0], [24.3, 1033.0], [24.4, 1033.0], [24.5, 1033.0], [24.6, 1033.0], [24.7, 1033.0], [24.8, 1033.0], [24.9, 1037.0], [25.0, 1037.0], [25.1, 1037.0], [25.2, 1037.0], [25.3, 1037.0], [25.4, 1037.0], [25.5, 1039.0], [25.6, 1039.0], [25.7, 1039.0], [25.8, 1039.0], [25.9, 1039.0], [26.0, 1039.0], [26.1, 1060.0], [26.2, 1060.0], [26.3, 1060.0], [26.4, 1060.0], [26.5, 1060.0], [26.6, 1060.0], [26.7, 1061.0], [26.8, 1061.0], [26.9, 1061.0], [27.0, 1061.0], [27.1, 1061.0], [27.2, 1061.0], [27.3, 1069.0], [27.4, 1069.0], [27.5, 1069.0], [27.6, 1069.0], [27.7, 1069.0], [27.8, 1069.0], [27.9, 1071.0], [28.0, 1071.0], [28.1, 1071.0], [28.2, 1071.0], [28.3, 1071.0], [28.4, 1071.0], [28.5, 1079.0], [28.6, 1079.0], [28.7, 1079.0], [28.8, 1079.0], [28.9, 1079.0], [29.0, 1087.0], [29.1, 1087.0], [29.2, 1087.0], [29.3, 1087.0], [29.4, 1087.0], [29.5, 1087.0], [29.6, 1093.0], [29.7, 1093.0], [29.8, 1093.0], [29.9, 1093.0], [30.0, 1093.0], [30.1, 1093.0], [30.2, 1111.0], [30.3, 1111.0], [30.4, 1111.0], [30.5, 1111.0], [30.6, 1111.0], [30.7, 1111.0], [30.8, 1112.0], [30.9, 1112.0], [31.0, 1112.0], [31.1, 1112.0], [31.2, 1112.0], [31.3, 1112.0], [31.4, 1114.0], [31.5, 1114.0], [31.6, 1114.0], [31.7, 1114.0], [31.8, 1114.0], [31.9, 1114.0], [32.0, 1135.0], [32.1, 1135.0], [32.2, 1135.0], [32.3, 1135.0], [32.4, 1135.0], [32.5, 1135.0], [32.6, 1142.0], [32.7, 1142.0], [32.8, 1142.0], [32.9, 1142.0], [33.0, 1142.0], [33.1, 1142.0], [33.2, 1148.0], [33.3, 1148.0], [33.4, 1148.0], [33.5, 1148.0], [33.6, 1148.0], [33.7, 1148.0], [33.8, 1155.0], [33.9, 1155.0], [34.0, 1155.0], [34.1, 1155.0], [34.2, 1155.0], [34.3, 1155.0], [34.4, 1156.0], [34.5, 1156.0], [34.6, 1156.0], [34.7, 1156.0], [34.8, 1156.0], [34.9, 1156.0], [35.0, 1157.0], [35.1, 1157.0], [35.2, 1157.0], [35.3, 1157.0], [35.4, 1157.0], [35.5, 1157.0], [35.6, 1159.0], [35.7, 1159.0], [35.8, 1159.0], [35.9, 1159.0], [36.0, 1159.0], [36.1, 1162.0], [36.2, 1162.0], [36.3, 1162.0], [36.4, 1162.0], [36.5, 1162.0], [36.6, 1162.0], [36.7, 1169.0], [36.8, 1169.0], [36.9, 1169.0], [37.0, 1169.0], [37.1, 1169.0], [37.2, 1169.0], [37.3, 1174.0], [37.4, 1174.0], [37.5, 1174.0], [37.6, 1174.0], [37.7, 1174.0], [37.8, 1174.0], [37.9, 1178.0], [38.0, 1178.0], [38.1, 1178.0], [38.2, 1178.0], [38.3, 1178.0], [38.4, 1178.0], [38.5, 1179.0], [38.6, 1179.0], [38.7, 1179.0], [38.8, 1179.0], [38.9, 1179.0], [39.0, 1179.0], [39.1, 1186.0], [39.2, 1186.0], [39.3, 1186.0], [39.4, 1186.0], [39.5, 1186.0], [39.6, 1186.0], [39.7, 1187.0], [39.8, 1187.0], [39.9, 1187.0], [40.0, 1187.0], [40.1, 1187.0], [40.2, 1187.0], [40.3, 1190.0], [40.4, 1190.0], [40.5, 1190.0], [40.6, 1190.0], [40.7, 1190.0], [40.8, 1190.0], [40.9, 1194.0], [41.0, 1194.0], [41.1, 1194.0], [41.2, 1194.0], [41.3, 1194.0], [41.4, 1194.0], [41.5, 1197.0], [41.6, 1197.0], [41.7, 1197.0], [41.8, 1197.0], [41.9, 1197.0], [42.0, 1197.0], [42.1, 1198.0], [42.2, 1198.0], [42.3, 1198.0], [42.4, 1198.0], [42.5, 1198.0], [42.6, 1198.0], [42.7, 1199.0], [42.8, 1199.0], [42.9, 1199.0], [43.0, 1199.0], [43.1, 1199.0], [43.2, 1203.0], [43.3, 1203.0], [43.4, 1203.0], [43.5, 1203.0], [43.6, 1203.0], [43.7, 1203.0], [43.8, 1211.0], [43.9, 1211.0], [44.0, 1211.0], [44.1, 1211.0], [44.2, 1211.0], [44.3, 1211.0], [44.4, 1214.0], [44.5, 1214.0], [44.6, 1214.0], [44.7, 1214.0], [44.8, 1214.0], [44.9, 1214.0], [45.0, 1218.0], [45.1, 1218.0], [45.2, 1218.0], [45.3, 1218.0], [45.4, 1218.0], [45.5, 1218.0], [45.6, 1221.0], [45.7, 1221.0], [45.8, 1221.0], [45.9, 1221.0], [46.0, 1221.0], [46.1, 1221.0], [46.2, 1226.0], [46.3, 1226.0], [46.4, 1226.0], [46.5, 1226.0], [46.6, 1226.0], [46.7, 1226.0], [46.8, 1239.0], [46.9, 1239.0], [47.0, 1239.0], [47.1, 1239.0], [47.2, 1239.0], [47.3, 1239.0], [47.4, 1253.0], [47.5, 1253.0], [47.6, 1253.0], [47.7, 1253.0], [47.8, 1253.0], [47.9, 1253.0], [48.0, 1254.0], [48.1, 1254.0], [48.2, 1254.0], [48.3, 1254.0], [48.4, 1254.0], [48.5, 1254.0], [48.6, 1255.0], [48.7, 1255.0], [48.8, 1255.0], [48.9, 1255.0], [49.0, 1255.0], [49.1, 1255.0], [49.2, 1262.0], [49.3, 1262.0], [49.4, 1262.0], [49.5, 1262.0], [49.6, 1262.0], [49.7, 1262.0], [49.8, 1269.0], [49.9, 1269.0], [50.0, 1269.0], [50.1, 1269.0], [50.2, 1269.0], [50.3, 1287.0], [50.4, 1287.0], [50.5, 1287.0], [50.6, 1287.0], [50.7, 1287.0], [50.8, 1287.0], [50.9, 1288.0], [51.0, 1288.0], [51.1, 1288.0], [51.2, 1288.0], [51.3, 1288.0], [51.4, 1288.0], [51.5, 1295.0], [51.6, 1295.0], [51.7, 1295.0], [51.8, 1295.0], [51.9, 1295.0], [52.0, 1295.0], [52.1, 1306.0], [52.2, 1306.0], [52.3, 1306.0], [52.4, 1306.0], [52.5, 1306.0], [52.6, 1306.0], [52.7, 1312.0], [52.8, 1312.0], [52.9, 1312.0], [53.0, 1312.0], [53.1, 1312.0], [53.2, 1312.0], [53.3, 1325.0], [53.4, 1325.0], [53.5, 1325.0], [53.6, 1325.0], [53.7, 1325.0], [53.8, 1325.0], [53.9, 1326.0], [54.0, 1326.0], [54.1, 1326.0], [54.2, 1326.0], [54.3, 1326.0], [54.4, 1326.0], [54.5, 1330.0], [54.6, 1330.0], [54.7, 1330.0], [54.8, 1330.0], [54.9, 1330.0], [55.0, 1330.0], [55.1, 1335.0], [55.2, 1335.0], [55.3, 1335.0], [55.4, 1335.0], [55.5, 1335.0], [55.6, 1335.0], [55.7, 1351.0], [55.8, 1351.0], [55.9, 1351.0], [56.0, 1351.0], [56.1, 1351.0], [56.2, 1351.0], [56.3, 1351.0], [56.4, 1351.0], [56.5, 1351.0], [56.6, 1351.0], [56.7, 1351.0], [56.8, 1351.0], [56.9, 1356.0], [57.0, 1356.0], [57.1, 1356.0], [57.2, 1356.0], [57.3, 1356.0], [57.4, 1357.0], [57.5, 1357.0], [57.6, 1357.0], [57.7, 1357.0], [57.8, 1357.0], [57.9, 1357.0], [58.0, 1362.0], [58.1, 1362.0], [58.2, 1362.0], [58.3, 1362.0], [58.4, 1362.0], [58.5, 1362.0], [58.6, 1367.0], [58.7, 1367.0], [58.8, 1367.0], [58.9, 1367.0], [59.0, 1367.0], [59.1, 1367.0], [59.2, 1369.0], [59.3, 1369.0], [59.4, 1369.0], [59.5, 1369.0], [59.6, 1369.0], [59.7, 1369.0], [59.8, 1383.0], [59.9, 1383.0], [60.0, 1383.0], [60.1, 1383.0], [60.2, 1383.0], [60.3, 1383.0], [60.4, 1385.0], [60.5, 1385.0], [60.6, 1385.0], [60.7, 1385.0], [60.8, 1385.0], [60.9, 1385.0], [61.0, 1404.0], [61.1, 1404.0], [61.2, 1404.0], [61.3, 1404.0], [61.4, 1404.0], [61.5, 1404.0], [61.6, 1405.0], [61.7, 1405.0], [61.8, 1405.0], [61.9, 1405.0], [62.0, 1405.0], [62.1, 1405.0], [62.2, 1405.0], [62.3, 1405.0], [62.4, 1405.0], [62.5, 1405.0], [62.6, 1405.0], [62.7, 1405.0], [62.8, 1412.0], [62.9, 1412.0], [63.0, 1412.0], [63.1, 1412.0], [63.2, 1412.0], [63.3, 1412.0], [63.4, 1435.0], [63.5, 1435.0], [63.6, 1435.0], [63.7, 1435.0], [63.8, 1435.0], [63.9, 1435.0], [64.0, 1441.0], [64.1, 1441.0], [64.2, 1441.0], [64.3, 1441.0], [64.4, 1441.0], [64.5, 1445.0], [64.6, 1445.0], [64.7, 1445.0], [64.8, 1445.0], [64.9, 1445.0], [65.0, 1445.0], [65.1, 1463.0], [65.2, 1463.0], [65.3, 1463.0], [65.4, 1463.0], [65.5, 1463.0], [65.6, 1463.0], [65.7, 1475.0], [65.8, 1475.0], [65.9, 1475.0], [66.0, 1475.0], [66.1, 1475.0], [66.2, 1475.0], [66.3, 1477.0], [66.4, 1477.0], [66.5, 1477.0], [66.6, 1477.0], [66.7, 1477.0], [66.8, 1477.0], [66.9, 1499.0], [67.0, 1499.0], [67.1, 1499.0], [67.2, 1499.0], [67.3, 1499.0], [67.4, 1499.0], [67.5, 1540.0], [67.6, 1540.0], [67.7, 1540.0], [67.8, 1540.0], [67.9, 1540.0], [68.0, 1540.0], [68.1, 1551.0], [68.2, 1551.0], [68.3, 1551.0], [68.4, 1551.0], [68.5, 1551.0], [68.6, 1551.0], [68.7, 1561.0], [68.8, 1561.0], [68.9, 1561.0], [69.0, 1561.0], [69.1, 1561.0], [69.2, 1561.0], [69.3, 1569.0], [69.4, 1569.0], [69.5, 1569.0], [69.6, 1569.0], [69.7, 1569.0], [69.8, 1569.0], [69.9, 1573.0], [70.0, 1573.0], [70.1, 1573.0], [70.2, 1573.0], [70.3, 1573.0], [70.4, 1573.0], [70.5, 1578.0], [70.6, 1578.0], [70.7, 1578.0], [70.8, 1578.0], [70.9, 1578.0], [71.0, 1578.0], [71.1, 1588.0], [71.2, 1588.0], [71.3, 1588.0], [71.4, 1588.0], [71.5, 1588.0], [71.6, 1595.0], [71.7, 1595.0], [71.8, 1595.0], [71.9, 1595.0], [72.0, 1595.0], [72.1, 1595.0], [72.2, 1601.0], [72.3, 1601.0], [72.4, 1601.0], [72.5, 1601.0], [72.6, 1601.0], [72.7, 1601.0], [72.8, 1601.0], [72.9, 1601.0], [73.0, 1601.0], [73.1, 1601.0], [73.2, 1601.0], [73.3, 1601.0], [73.4, 1605.0], [73.5, 1605.0], [73.6, 1605.0], [73.7, 1605.0], [73.8, 1605.0], [73.9, 1605.0], [74.0, 1610.0], [74.1, 1610.0], [74.2, 1610.0], [74.3, 1610.0], [74.4, 1610.0], [74.5, 1610.0], [74.6, 1619.0], [74.7, 1619.0], [74.8, 1619.0], [74.9, 1619.0], [75.0, 1619.0], [75.1, 1619.0], [75.2, 1634.0], [75.3, 1634.0], [75.4, 1634.0], [75.5, 1634.0], [75.6, 1634.0], [75.7, 1634.0], [75.8, 1639.0], [75.9, 1639.0], [76.0, 1639.0], [76.1, 1639.0], [76.2, 1639.0], [76.3, 1639.0], [76.4, 1657.0], [76.5, 1657.0], [76.6, 1657.0], [76.7, 1657.0], [76.8, 1657.0], [76.9, 1657.0], [77.0, 1662.0], [77.1, 1662.0], [77.2, 1662.0], [77.3, 1662.0], [77.4, 1662.0], [77.5, 1662.0], [77.6, 1670.0], [77.7, 1670.0], [77.8, 1670.0], [77.9, 1670.0], [78.0, 1670.0], [78.1, 1670.0], [78.2, 1672.0], [78.3, 1672.0], [78.4, 1672.0], [78.5, 1672.0], [78.6, 1672.0], [78.7, 1735.0], [78.8, 1735.0], [78.9, 1735.0], [79.0, 1735.0], [79.1, 1735.0], [79.2, 1735.0], [79.3, 1742.0], [79.4, 1742.0], [79.5, 1742.0], [79.6, 1742.0], [79.7, 1742.0], [79.8, 1742.0], [79.9, 1743.0], [80.0, 1743.0], [80.1, 1743.0], [80.2, 1743.0], [80.3, 1743.0], [80.4, 1743.0], [80.5, 1747.0], [80.6, 1747.0], [80.7, 1747.0], [80.8, 1747.0], [80.9, 1747.0], [81.0, 1747.0], [81.1, 1806.0], [81.2, 1806.0], [81.3, 1806.0], [81.4, 1806.0], [81.5, 1806.0], [81.6, 1806.0], [81.7, 1826.0], [81.8, 1826.0], [81.9, 1826.0], [82.0, 1826.0], [82.1, 1826.0], [82.2, 1826.0], [82.3, 1827.0], [82.4, 1827.0], [82.5, 1827.0], [82.6, 1827.0], [82.7, 1827.0], [82.8, 1827.0], [82.9, 1847.0], [83.0, 1847.0], [83.1, 1847.0], [83.2, 1847.0], [83.3, 1847.0], [83.4, 1847.0], [83.5, 1850.0], [83.6, 1850.0], [83.7, 1850.0], [83.8, 1850.0], [83.9, 1850.0], [84.0, 1850.0], [84.1, 1854.0], [84.2, 1854.0], [84.3, 1854.0], [84.4, 1854.0], [84.5, 1854.0], [84.6, 1854.0], [84.7, 1860.0], [84.8, 1860.0], [84.9, 1860.0], [85.0, 1860.0], [85.1, 1860.0], [85.2, 1860.0], [85.3, 1861.0], [85.4, 1861.0], [85.5, 1861.0], [85.6, 1861.0], [85.7, 1861.0], [85.8, 1879.0], [85.9, 1879.0], [86.0, 1879.0], [86.1, 1879.0], [86.2, 1879.0], [86.3, 1879.0], [86.4, 1883.0], [86.5, 1883.0], [86.6, 1883.0], [86.7, 1883.0], [86.8, 1883.0], [86.9, 1883.0], [87.0, 1916.0], [87.1, 1916.0], [87.2, 1916.0], [87.3, 1916.0], [87.4, 1916.0], [87.5, 1916.0], [87.6, 1941.0], [87.7, 1941.0], [87.8, 1941.0], [87.9, 1941.0], [88.0, 1941.0], [88.1, 1941.0], [88.2, 1941.0], [88.3, 1941.0], [88.4, 1941.0], [88.5, 1941.0], [88.6, 1941.0], [88.7, 1941.0], [88.8, 1946.0], [88.9, 1946.0], [89.0, 1946.0], [89.1, 1946.0], [89.2, 1946.0], [89.3, 1946.0], [89.4, 1952.0], [89.5, 1952.0], [89.6, 1952.0], [89.7, 1952.0], [89.8, 1952.0], [89.9, 1952.0], [90.0, 1966.0], [90.1, 1966.0], [90.2, 1966.0], [90.3, 1966.0], [90.4, 1966.0], [90.5, 1966.0], [90.6, 2038.0], [90.7, 2038.0], [90.8, 2038.0], [90.9, 2038.0], [91.0, 2038.0], [91.1, 2038.0], [91.2, 2048.0], [91.3, 2048.0], [91.4, 2048.0], [91.5, 2048.0], [91.6, 2048.0], [91.7, 2048.0], [91.8, 2049.0], [91.9, 2049.0], [92.0, 2049.0], [92.1, 2049.0], [92.2, 2049.0], [92.3, 2049.0], [92.4, 2051.0], [92.5, 2051.0], [92.6, 2051.0], [92.7, 2051.0], [92.8, 2051.0], [92.9, 2251.0], [93.0, 2251.0], [93.1, 2251.0], [93.2, 2251.0], [93.3, 2251.0], [93.4, 2251.0], [93.5, 2358.0], [93.6, 2358.0], [93.7, 2358.0], [93.8, 2358.0], [93.9, 2358.0], [94.0, 2358.0], [94.1, 2680.0], [94.2, 2680.0], [94.3, 2680.0], [94.4, 2680.0], [94.5, 2680.0], [94.6, 2680.0], [94.7, 2759.0], [94.8, 2759.0], [94.9, 2759.0], [95.0, 2759.0], [95.1, 2759.0], [95.2, 2759.0], [95.3, 3089.0], [95.4, 3089.0], [95.5, 3089.0], [95.6, 3089.0], [95.7, 3089.0], [95.8, 3089.0], [95.9, 3273.0], [96.0, 3273.0], [96.1, 3273.0], [96.2, 3273.0], [96.3, 3273.0], [96.4, 3273.0], [96.5, 3648.0], [96.6, 3648.0], [96.7, 3648.0], [96.8, 3648.0], [96.9, 3648.0], [97.0, 3648.0], [97.1, 4519.0], [97.2, 4519.0], [97.3, 4519.0], [97.4, 4519.0], [97.5, 4519.0], [97.6, 4519.0], [97.7, 4880.0], [97.8, 4880.0], [97.9, 4880.0], [98.0, 4880.0], [98.1, 4880.0], [98.2, 4880.0], [98.3, 24329.0], [98.4, 24329.0], [98.5, 24329.0], [98.6, 24329.0], [98.7, 24329.0], [98.8, 24329.0], [98.9, 24905.0], [99.0, 24905.0], [99.1, 24905.0], [99.2, 24905.0], [99.3, 24905.0], [99.4, 24905.0], [99.5, 25240.0], [99.6, 25240.0], [99.7, 25240.0], [99.8, 25240.0], [99.9, 25240.0]], "isOverall": false, "label": "trackVehicleExit", "isController": false}, {"data": [[0.0, 402.0], [0.1, 402.0], [0.2, 402.0], [0.3, 430.0], [0.4, 430.0], [0.5, 430.0], [0.6, 446.0], [0.7, 446.0], [0.8, 446.0], [0.9, 458.0], [1.0, 458.0], [1.1, 458.0], [1.2, 461.0], [1.3, 461.0], [1.4, 461.0], [1.5, 471.0], [1.6, 471.0], [1.7, 471.0], [1.8, 474.0], [1.9, 474.0], [2.0, 474.0], [2.1, 476.0], [2.2, 476.0], [2.3, 476.0], [2.4, 479.0], [2.5, 479.0], [2.6, 479.0], [2.7, 481.0], [2.8, 481.0], [2.9, 481.0], [3.0, 481.0], [3.1, 481.0], [3.2, 481.0], [3.3, 489.0], [3.4, 489.0], [3.5, 489.0], [3.6, 490.0], [3.7, 490.0], [3.8, 490.0], [3.9, 496.0], [4.0, 496.0], [4.1, 500.0], [4.2, 500.0], [4.3, 500.0], [4.4, 505.0], [4.5, 505.0], [4.6, 505.0], [4.7, 507.0], [4.8, 507.0], [4.9, 507.0], [5.0, 508.0], [5.1, 508.0], [5.2, 508.0], [5.3, 509.0], [5.4, 509.0], [5.5, 509.0], [5.6, 510.0], [5.7, 510.0], [5.8, 510.0], [5.9, 516.0], [6.0, 516.0], [6.1, 516.0], [6.2, 516.0], [6.3, 516.0], [6.4, 516.0], [6.5, 520.0], [6.6, 520.0], [6.7, 520.0], [6.8, 524.0], [6.9, 524.0], [7.0, 524.0], [7.1, 525.0], [7.2, 525.0], [7.3, 525.0], [7.4, 525.0], [7.5, 525.0], [7.6, 525.0], [7.7, 525.0], [7.8, 525.0], [7.9, 528.0], [8.0, 528.0], [8.1, 528.0], [8.2, 530.0], [8.3, 530.0], [8.4, 530.0], [8.5, 531.0], [8.6, 531.0], [8.7, 531.0], [8.8, 531.0], [8.9, 531.0], [9.0, 531.0], [9.1, 532.0], [9.2, 532.0], [9.3, 532.0], [9.4, 535.0], [9.5, 535.0], [9.6, 535.0], [9.7, 535.0], [9.8, 535.0], [9.9, 535.0], [10.0, 537.0], [10.1, 537.0], [10.2, 537.0], [10.3, 540.0], [10.4, 540.0], [10.5, 540.0], [10.6, 540.0], [10.7, 540.0], [10.8, 540.0], [10.9, 540.0], [11.0, 540.0], [11.1, 540.0], [11.2, 543.0], [11.3, 543.0], [11.4, 543.0], [11.5, 543.0], [11.6, 543.0], [11.7, 546.0], [11.8, 546.0], [11.9, 546.0], [12.0, 549.0], [12.1, 549.0], [12.2, 549.0], [12.3, 549.0], [12.4, 549.0], [12.5, 549.0], [12.6, 552.0], [12.7, 552.0], [12.8, 552.0], [12.9, 554.0], [13.0, 554.0], [13.1, 554.0], [13.2, 554.0], [13.3, 554.0], [13.4, 554.0], [13.5, 555.0], [13.6, 555.0], [13.7, 555.0], [13.8, 558.0], [13.9, 558.0], [14.0, 558.0], [14.1, 564.0], [14.2, 564.0], [14.3, 564.0], [14.4, 565.0], [14.5, 565.0], [14.6, 565.0], [14.7, 567.0], [14.8, 567.0], [14.9, 567.0], [15.0, 567.0], [15.1, 567.0], [15.2, 567.0], [15.3, 568.0], [15.4, 568.0], [15.5, 568.0], [15.6, 568.0], [15.7, 568.0], [15.8, 569.0], [15.9, 569.0], [16.0, 569.0], [16.1, 571.0], [16.2, 571.0], [16.3, 571.0], [16.4, 572.0], [16.5, 572.0], [16.6, 572.0], [16.7, 572.0], [16.8, 572.0], [16.9, 572.0], [17.0, 574.0], [17.1, 574.0], [17.2, 574.0], [17.3, 574.0], [17.4, 574.0], [17.5, 574.0], [17.6, 575.0], [17.7, 575.0], [17.8, 575.0], [17.9, 576.0], [18.0, 576.0], [18.1, 576.0], [18.2, 579.0], [18.3, 579.0], [18.4, 579.0], [18.5, 581.0], [18.6, 581.0], [18.7, 581.0], [18.8, 581.0], [18.9, 581.0], [19.0, 581.0], [19.1, 581.0], [19.2, 581.0], [19.3, 587.0], [19.4, 587.0], [19.5, 587.0], [19.6, 587.0], [19.7, 587.0], [19.8, 587.0], [19.9, 589.0], [20.0, 589.0], [20.1, 589.0], [20.2, 592.0], [20.3, 592.0], [20.4, 592.0], [20.5, 595.0], [20.6, 595.0], [20.7, 595.0], [20.8, 596.0], [20.9, 596.0], [21.0, 596.0], [21.1, 597.0], [21.2, 597.0], [21.3, 597.0], [21.4, 597.0], [21.5, 597.0], [21.6, 597.0], [21.7, 599.0], [21.8, 599.0], [21.9, 599.0], [22.0, 599.0], [22.1, 599.0], [22.2, 599.0], [22.3, 600.0], [22.4, 600.0], [22.5, 600.0], [22.6, 610.0], [22.7, 610.0], [22.8, 610.0], [22.9, 610.0], [23.0, 610.0], [23.1, 612.0], [23.2, 612.0], [23.3, 612.0], [23.4, 613.0], [23.5, 613.0], [23.6, 613.0], [23.7, 614.0], [23.8, 614.0], [23.9, 614.0], [24.0, 617.0], [24.1, 617.0], [24.2, 617.0], [24.3, 617.0], [24.4, 617.0], [24.5, 617.0], [24.6, 618.0], [24.7, 618.0], [24.8, 618.0], [24.9, 618.0], [25.0, 618.0], [25.1, 618.0], [25.2, 622.0], [25.3, 622.0], [25.4, 622.0], [25.5, 623.0], [25.6, 623.0], [25.7, 623.0], [25.8, 623.0], [25.9, 623.0], [26.0, 623.0], [26.1, 626.0], [26.2, 626.0], [26.3, 626.0], [26.4, 632.0], [26.5, 632.0], [26.6, 632.0], [26.7, 636.0], [26.8, 636.0], [26.9, 636.0], [27.0, 637.0], [27.1, 637.0], [27.2, 641.0], [27.3, 641.0], [27.4, 641.0], [27.5, 643.0], [27.6, 643.0], [27.7, 643.0], [27.8, 644.0], [27.9, 644.0], [28.0, 644.0], [28.1, 648.0], [28.2, 648.0], [28.3, 648.0], [28.4, 649.0], [28.5, 649.0], [28.6, 649.0], [28.7, 650.0], [28.8, 650.0], [28.9, 650.0], [29.0, 655.0], [29.1, 655.0], [29.2, 655.0], [29.3, 659.0], [29.4, 659.0], [29.5, 659.0], [29.6, 662.0], [29.7, 662.0], [29.8, 662.0], [29.9, 663.0], [30.0, 663.0], [30.1, 663.0], [30.2, 670.0], [30.3, 670.0], [30.4, 670.0], [30.5, 671.0], [30.6, 671.0], [30.7, 671.0], [30.8, 672.0], [30.9, 672.0], [31.0, 672.0], [31.1, 672.0], [31.2, 672.0], [31.3, 673.0], [31.4, 673.0], [31.5, 673.0], [31.6, 673.0], [31.7, 673.0], [31.8, 673.0], [31.9, 674.0], [32.0, 674.0], [32.1, 674.0], [32.2, 674.0], [32.3, 674.0], [32.4, 674.0], [32.5, 674.0], [32.6, 674.0], [32.7, 674.0], [32.8, 675.0], [32.9, 675.0], [33.0, 675.0], [33.1, 676.0], [33.2, 676.0], [33.3, 676.0], [33.4, 679.0], [33.5, 679.0], [33.6, 679.0], [33.7, 680.0], [33.8, 680.0], [33.9, 680.0], [34.0, 683.0], [34.1, 683.0], [34.2, 683.0], [34.3, 684.0], [34.4, 684.0], [34.5, 684.0], [34.6, 687.0], [34.7, 687.0], [34.8, 688.0], [34.9, 688.0], [35.0, 688.0], [35.1, 692.0], [35.2, 692.0], [35.3, 692.0], [35.4, 694.0], [35.5, 694.0], [35.6, 694.0], [35.7, 694.0], [35.8, 694.0], [35.9, 694.0], [36.0, 696.0], [36.1, 696.0], [36.2, 696.0], [36.3, 698.0], [36.4, 698.0], [36.5, 698.0], [36.6, 698.0], [36.7, 698.0], [36.8, 698.0], [36.9, 699.0], [37.0, 699.0], [37.1, 699.0], [37.2, 704.0], [37.3, 704.0], [37.4, 704.0], [37.5, 708.0], [37.6, 708.0], [37.7, 708.0], [37.8, 708.0], [37.9, 708.0], [38.0, 708.0], [38.1, 711.0], [38.2, 711.0], [38.3, 711.0], [38.4, 711.0], [38.5, 711.0], [38.6, 712.0], [38.7, 712.0], [38.8, 712.0], [38.9, 712.0], [39.0, 712.0], [39.1, 712.0], [39.2, 714.0], [39.3, 714.0], [39.4, 714.0], [39.5, 716.0], [39.6, 716.0], [39.7, 716.0], [39.8, 716.0], [39.9, 716.0], [40.0, 716.0], [40.1, 717.0], [40.2, 717.0], [40.3, 717.0], [40.4, 725.0], [40.5, 725.0], [40.6, 725.0], [40.7, 729.0], [40.8, 729.0], [40.9, 729.0], [41.0, 729.0], [41.1, 729.0], [41.2, 729.0], [41.3, 734.0], [41.4, 734.0], [41.5, 734.0], [41.6, 736.0], [41.7, 736.0], [41.8, 736.0], [41.9, 737.0], [42.0, 737.0], [42.1, 737.0], [42.2, 738.0], [42.3, 738.0], [42.4, 739.0], [42.5, 739.0], [42.6, 739.0], [42.7, 740.0], [42.8, 740.0], [42.9, 740.0], [43.0, 744.0], [43.1, 744.0], [43.2, 744.0], [43.3, 746.0], [43.4, 746.0], [43.5, 746.0], [43.6, 747.0], [43.7, 747.0], [43.8, 747.0], [43.9, 750.0], [44.0, 750.0], [44.1, 750.0], [44.2, 751.0], [44.3, 751.0], [44.4, 751.0], [44.5, 751.0], [44.6, 751.0], [44.7, 751.0], [44.8, 752.0], [44.9, 752.0], [45.0, 752.0], [45.1, 756.0], [45.2, 756.0], [45.3, 756.0], [45.4, 757.0], [45.5, 757.0], [45.6, 757.0], [45.7, 760.0], [45.8, 760.0], [45.9, 760.0], [46.0, 761.0], [46.1, 761.0], [46.2, 768.0], [46.3, 768.0], [46.4, 768.0], [46.5, 769.0], [46.6, 769.0], [46.7, 769.0], [46.8, 769.0], [46.9, 769.0], [47.0, 769.0], [47.1, 770.0], [47.2, 770.0], [47.3, 770.0], [47.4, 771.0], [47.5, 771.0], [47.6, 771.0], [47.7, 771.0], [47.8, 771.0], [47.9, 771.0], [48.0, 772.0], [48.1, 772.0], [48.2, 772.0], [48.3, 772.0], [48.4, 772.0], [48.5, 772.0], [48.6, 775.0], [48.7, 775.0], [48.8, 775.0], [48.9, 776.0], [49.0, 776.0], [49.1, 776.0], [49.2, 779.0], [49.3, 779.0], [49.4, 779.0], [49.5, 780.0], [49.6, 780.0], [49.7, 780.0], [49.8, 780.0], [49.9, 780.0], [50.0, 780.0], [50.1, 783.0], [50.2, 783.0], [50.3, 784.0], [50.4, 784.0], [50.5, 784.0], [50.6, 784.0], [50.7, 784.0], [50.8, 784.0], [50.9, 787.0], [51.0, 787.0], [51.1, 787.0], [51.2, 788.0], [51.3, 788.0], [51.4, 788.0], [51.5, 789.0], [51.6, 789.0], [51.7, 789.0], [51.8, 791.0], [51.9, 791.0], [52.0, 791.0], [52.1, 793.0], [52.2, 793.0], [52.3, 793.0], [52.4, 797.0], [52.5, 797.0], [52.6, 797.0], [52.7, 798.0], [52.8, 798.0], [52.9, 798.0], [53.0, 801.0], [53.1, 801.0], [53.2, 801.0], [53.3, 801.0], [53.4, 801.0], [53.5, 801.0], [53.6, 805.0], [53.7, 805.0], [53.8, 805.0], [53.9, 806.0], [54.0, 806.0], [54.1, 808.0], [54.2, 808.0], [54.3, 808.0], [54.4, 809.0], [54.5, 809.0], [54.6, 809.0], [54.7, 812.0], [54.8, 812.0], [54.9, 812.0], [55.0, 817.0], [55.1, 817.0], [55.2, 817.0], [55.3, 819.0], [55.4, 819.0], [55.5, 819.0], [55.6, 819.0], [55.7, 819.0], [55.8, 819.0], [55.9, 820.0], [56.0, 820.0], [56.1, 820.0], [56.2, 821.0], [56.3, 821.0], [56.4, 821.0], [56.5, 823.0], [56.6, 823.0], [56.7, 823.0], [56.8, 836.0], [56.9, 836.0], [57.0, 836.0], [57.1, 837.0], [57.2, 837.0], [57.3, 837.0], [57.4, 841.0], [57.5, 841.0], [57.6, 841.0], [57.7, 845.0], [57.8, 845.0], [57.9, 846.0], [58.0, 846.0], [58.1, 846.0], [58.2, 848.0], [58.3, 848.0], [58.4, 848.0], [58.5, 849.0], [58.6, 849.0], [58.7, 849.0], [58.8, 853.0], [58.9, 853.0], [59.0, 853.0], [59.1, 854.0], [59.2, 854.0], [59.3, 854.0], [59.4, 855.0], [59.5, 855.0], [59.6, 855.0], [59.7, 856.0], [59.8, 856.0], [59.9, 856.0], [60.0, 857.0], [60.1, 857.0], [60.2, 857.0], [60.3, 863.0], [60.4, 863.0], [60.5, 863.0], [60.6, 863.0], [60.7, 863.0], [60.8, 863.0], [60.9, 865.0], [61.0, 865.0], [61.1, 865.0], [61.2, 869.0], [61.3, 869.0], [61.4, 869.0], [61.5, 870.0], [61.6, 870.0], [61.7, 875.0], [61.8, 875.0], [61.9, 875.0], [62.0, 881.0], [62.1, 881.0], [62.2, 881.0], [62.3, 884.0], [62.4, 884.0], [62.5, 884.0], [62.6, 886.0], [62.7, 886.0], [62.8, 886.0], [62.9, 892.0], [63.0, 892.0], [63.1, 892.0], [63.2, 893.0], [63.3, 893.0], [63.4, 893.0], [63.5, 901.0], [63.6, 901.0], [63.7, 901.0], [63.8, 905.0], [63.9, 905.0], [64.0, 905.0], [64.1, 907.0], [64.2, 907.0], [64.3, 907.0], [64.4, 923.0], [64.5, 923.0], [64.6, 923.0], [64.7, 930.0], [64.8, 930.0], [64.9, 930.0], [65.0, 934.0], [65.1, 934.0], [65.2, 934.0], [65.3, 936.0], [65.4, 936.0], [65.5, 937.0], [65.6, 937.0], [65.7, 937.0], [65.8, 937.0], [65.9, 937.0], [66.0, 937.0], [66.1, 941.0], [66.2, 941.0], [66.3, 941.0], [66.4, 957.0], [66.5, 957.0], [66.6, 957.0], [66.7, 958.0], [66.8, 958.0], [66.9, 958.0], [67.0, 959.0], [67.1, 959.0], [67.2, 959.0], [67.3, 961.0], [67.4, 961.0], [67.5, 961.0], [67.6, 964.0], [67.7, 964.0], [67.8, 964.0], [67.9, 977.0], [68.0, 977.0], [68.1, 977.0], [68.2, 978.0], [68.3, 978.0], [68.4, 978.0], [68.5, 979.0], [68.6, 979.0], [68.7, 979.0], [68.8, 979.0], [68.9, 979.0], [69.0, 979.0], [69.1, 980.0], [69.2, 980.0], [69.3, 988.0], [69.4, 988.0], [69.5, 988.0], [69.6, 991.0], [69.7, 991.0], [69.8, 991.0], [69.9, 994.0], [70.0, 994.0], [70.1, 994.0], [70.2, 1004.0], [70.3, 1004.0], [70.4, 1004.0], [70.5, 1005.0], [70.6, 1005.0], [70.7, 1005.0], [70.8, 1008.0], [70.9, 1008.0], [71.0, 1008.0], [71.1, 1015.0], [71.2, 1015.0], [71.3, 1015.0], [71.4, 1015.0], [71.5, 1015.0], [71.6, 1015.0], [71.7, 1017.0], [71.8, 1017.0], [71.9, 1017.0], [72.0, 1021.0], [72.1, 1021.0], [72.2, 1021.0], [72.3, 1022.0], [72.4, 1022.0], [72.5, 1022.0], [72.6, 1025.0], [72.7, 1025.0], [72.8, 1025.0], [72.9, 1027.0], [73.0, 1027.0], [73.1, 1028.0], [73.2, 1028.0], [73.3, 1028.0], [73.4, 1029.0], [73.5, 1029.0], [73.6, 1029.0], [73.7, 1039.0], [73.8, 1039.0], [73.9, 1039.0], [74.0, 1042.0], [74.1, 1042.0], [74.2, 1042.0], [74.3, 1043.0], [74.4, 1043.0], [74.5, 1043.0], [74.6, 1047.0], [74.7, 1047.0], [74.8, 1047.0], [74.9, 1058.0], [75.0, 1058.0], [75.1, 1058.0], [75.2, 1061.0], [75.3, 1061.0], [75.4, 1061.0], [75.5, 1062.0], [75.6, 1062.0], [75.7, 1062.0], [75.8, 1068.0], [75.9, 1068.0], [76.0, 1068.0], [76.1, 1078.0], [76.2, 1078.0], [76.3, 1078.0], [76.4, 1093.0], [76.5, 1093.0], [76.6, 1093.0], [76.7, 1094.0], [76.8, 1094.0], [76.9, 1094.0], [77.0, 1110.0], [77.1, 1110.0], [77.2, 1113.0], [77.3, 1113.0], [77.4, 1113.0], [77.5, 1113.0], [77.6, 1113.0], [77.7, 1113.0], [77.8, 1116.0], [77.9, 1116.0], [78.0, 1116.0], [78.1, 1122.0], [78.2, 1122.0], [78.3, 1122.0], [78.4, 1124.0], [78.5, 1124.0], [78.6, 1124.0], [78.7, 1125.0], [78.8, 1125.0], [78.9, 1125.0], [79.0, 1130.0], [79.1, 1130.0], [79.2, 1130.0], [79.3, 1132.0], [79.4, 1132.0], [79.5, 1132.0], [79.6, 1141.0], [79.7, 1141.0], [79.8, 1141.0], [79.9, 1142.0], [80.0, 1142.0], [80.1, 1142.0], [80.2, 1144.0], [80.3, 1144.0], [80.4, 1144.0], [80.5, 1156.0], [80.6, 1156.0], [80.7, 1156.0], [80.8, 1159.0], [80.9, 1159.0], [81.0, 1163.0], [81.1, 1163.0], [81.2, 1163.0], [81.3, 1165.0], [81.4, 1165.0], [81.5, 1165.0], [81.6, 1173.0], [81.7, 1173.0], [81.8, 1173.0], [81.9, 1174.0], [82.0, 1174.0], [82.1, 1174.0], [82.2, 1177.0], [82.3, 1177.0], [82.4, 1177.0], [82.5, 1191.0], [82.6, 1191.0], [82.7, 1191.0], [82.8, 1193.0], [82.9, 1193.0], [83.0, 1193.0], [83.1, 1194.0], [83.2, 1194.0], [83.3, 1194.0], [83.4, 1199.0], [83.5, 1199.0], [83.6, 1199.0], [83.7, 1217.0], [83.8, 1217.0], [83.9, 1217.0], [84.0, 1221.0], [84.1, 1221.0], [84.2, 1221.0], [84.3, 1228.0], [84.4, 1228.0], [84.5, 1228.0], [84.6, 1231.0], [84.7, 1231.0], [84.8, 1243.0], [84.9, 1243.0], [85.0, 1243.0], [85.1, 1270.0], [85.2, 1270.0], [85.3, 1270.0], [85.4, 1272.0], [85.5, 1272.0], [85.6, 1272.0], [85.7, 1272.0], [85.8, 1272.0], [85.9, 1272.0], [86.0, 1288.0], [86.1, 1288.0], [86.2, 1288.0], [86.3, 1293.0], [86.4, 1293.0], [86.5, 1293.0], [86.6, 1299.0], [86.7, 1299.0], [86.8, 1299.0], [86.9, 1300.0], [87.0, 1300.0], [87.1, 1300.0], [87.2, 1312.0], [87.3, 1312.0], [87.4, 1312.0], [87.5, 1330.0], [87.6, 1330.0], [87.7, 1330.0], [87.8, 1336.0], [87.9, 1336.0], [88.0, 1336.0], [88.1, 1350.0], [88.2, 1350.0], [88.3, 1350.0], [88.4, 1351.0], [88.5, 1351.0], [88.6, 1354.0], [88.7, 1354.0], [88.8, 1354.0], [88.9, 1360.0], [89.0, 1360.0], [89.1, 1360.0], [89.2, 1364.0], [89.3, 1364.0], [89.4, 1364.0], [89.5, 1378.0], [89.6, 1378.0], [89.7, 1378.0], [89.8, 1384.0], [89.9, 1384.0], [90.0, 1384.0], [90.1, 1390.0], [90.2, 1390.0], [90.3, 1390.0], [90.4, 1394.0], [90.5, 1394.0], [90.6, 1394.0], [90.7, 1397.0], [90.8, 1397.0], [90.9, 1397.0], [91.0, 1401.0], [91.1, 1401.0], [91.2, 1401.0], [91.3, 1435.0], [91.4, 1435.0], [91.5, 1435.0], [91.6, 1475.0], [91.7, 1475.0], [91.8, 1475.0], [91.9, 1475.0], [92.0, 1475.0], [92.1, 1475.0], [92.2, 1530.0], [92.3, 1530.0], [92.4, 1535.0], [92.5, 1535.0], [92.6, 1535.0], [92.7, 1538.0], [92.8, 1538.0], [92.9, 1538.0], [93.0, 1546.0], [93.1, 1546.0], [93.2, 1546.0], [93.3, 1588.0], [93.4, 1588.0], [93.5, 1588.0], [93.6, 1600.0], [93.7, 1600.0], [93.8, 1600.0], [93.9, 1616.0], [94.0, 1616.0], [94.1, 1616.0], [94.2, 1640.0], [94.3, 1640.0], [94.4, 1640.0], [94.5, 1695.0], [94.6, 1695.0], [94.7, 1695.0], [94.8, 1723.0], [94.9, 1723.0], [95.0, 1723.0], [95.1, 1794.0], [95.2, 1794.0], [95.3, 1794.0], [95.4, 1796.0], [95.5, 1796.0], [95.6, 1796.0], [95.7, 1848.0], [95.8, 1848.0], [95.9, 1848.0], [96.0, 1856.0], [96.1, 1856.0], [96.2, 1985.0], [96.3, 1985.0], [96.4, 1985.0], [96.5, 2081.0], [96.6, 2081.0], [96.7, 2081.0], [96.8, 2135.0], [96.9, 2135.0], [97.0, 2135.0], [97.1, 2308.0], [97.2, 2308.0], [97.3, 2308.0], [97.4, 2468.0], [97.5, 2468.0], [97.6, 2468.0], [97.7, 2469.0], [97.8, 2469.0], [97.9, 2469.0], [98.0, 2478.0], [98.1, 2478.0], [98.2, 2478.0], [98.3, 2585.0], [98.4, 2585.0], [98.5, 2585.0], [98.6, 2779.0], [98.7, 2779.0], [98.8, 2779.0], [98.9, 2918.0], [99.0, 2918.0], [99.1, 2918.0], [99.2, 4172.0], [99.3, 4172.0], [99.4, 4172.0], [99.5, 4512.0], [99.6, 4512.0], [99.7, 4512.0], [99.8, 5046.0], [99.9, 5046.0]], "isOverall": false, "label": "trackVehicleEntry", "isController": false}, {"data": [[0.0, 299.0], [0.1, 300.0], [0.2, 301.0], [0.3, 303.0], [0.4, 305.0], [0.5, 305.0], [0.6, 305.0], [0.7, 306.0], [0.8, 306.0], [0.9, 307.0], [1.0, 307.0], [1.1, 308.0], [1.2, 308.0], [1.3, 308.0], [1.4, 308.0], [1.5, 308.0], [1.6, 308.0], [1.7, 309.0], [1.8, 309.0], [1.9, 309.0], [2.0, 309.0], [2.1, 309.0], [2.2, 309.0], [2.3, 309.0], [2.4, 309.0], [2.5, 310.0], [2.6, 310.0], [2.7, 310.0], [2.8, 310.0], [2.9, 310.0], [3.0, 310.0], [3.1, 310.0], [3.2, 310.0], [3.3, 310.0], [3.4, 310.0], [3.5, 310.0], [3.6, 311.0], [3.7, 311.0], [3.8, 311.0], [3.9, 311.0], [4.0, 311.0], [4.1, 311.0], [4.2, 311.0], [4.3, 311.0], [4.4, 312.0], [4.5, 312.0], [4.6, 312.0], [4.7, 312.0], [4.8, 312.0], [4.9, 313.0], [5.0, 313.0], [5.1, 313.0], [5.2, 313.0], [5.3, 313.0], [5.4, 313.0], [5.5, 313.0], [5.6, 313.0], [5.7, 313.0], [5.8, 313.0], [5.9, 313.0], [6.0, 313.0], [6.1, 313.0], [6.2, 313.0], [6.3, 314.0], [6.4, 314.0], [6.5, 314.0], [6.6, 314.0], [6.7, 314.0], [6.8, 314.0], [6.9, 314.0], [7.0, 314.0], [7.1, 314.0], [7.2, 314.0], [7.3, 314.0], [7.4, 315.0], [7.5, 315.0], [7.6, 315.0], [7.7, 315.0], [7.8, 315.0], [7.9, 315.0], [8.0, 315.0], [8.1, 315.0], [8.2, 315.0], [8.3, 315.0], [8.4, 315.0], [8.5, 315.0], [8.6, 315.0], [8.7, 315.0], [8.8, 315.0], [8.9, 316.0], [9.0, 316.0], [9.1, 316.0], [9.2, 316.0], [9.3, 316.0], [9.4, 316.0], [9.5, 316.0], [9.6, 316.0], [9.7, 316.0], [9.8, 316.0], [9.9, 316.0], [10.0, 316.0], [10.1, 316.0], [10.2, 317.0], [10.3, 317.0], [10.4, 317.0], [10.5, 317.0], [10.6, 317.0], [10.7, 317.0], [10.8, 317.0], [10.9, 317.0], [11.0, 317.0], [11.1, 317.0], [11.2, 317.0], [11.3, 317.0], [11.4, 317.0], [11.5, 318.0], [11.6, 318.0], [11.7, 318.0], [11.8, 318.0], [11.9, 318.0], [12.0, 318.0], [12.1, 318.0], [12.2, 318.0], [12.3, 318.0], [12.4, 318.0], [12.5, 318.0], [12.6, 318.0], [12.7, 318.0], [12.8, 318.0], [12.9, 318.0], [13.0, 318.0], [13.1, 318.0], [13.2, 318.0], [13.3, 318.0], [13.4, 318.0], [13.5, 319.0], [13.6, 319.0], [13.7, 319.0], [13.8, 319.0], [13.9, 319.0], [14.0, 319.0], [14.1, 319.0], [14.2, 319.0], [14.3, 319.0], [14.4, 319.0], [14.5, 319.0], [14.6, 319.0], [14.7, 319.0], [14.8, 319.0], [14.9, 320.0], [15.0, 320.0], [15.1, 320.0], [15.2, 320.0], [15.3, 320.0], [15.4, 320.0], [15.5, 320.0], [15.6, 320.0], [15.7, 320.0], [15.8, 320.0], [15.9, 320.0], [16.0, 320.0], [16.1, 320.0], [16.2, 320.0], [16.3, 320.0], [16.4, 321.0], [16.5, 321.0], [16.6, 321.0], [16.7, 321.0], [16.8, 321.0], [16.9, 321.0], [17.0, 321.0], [17.1, 321.0], [17.2, 321.0], [17.3, 321.0], [17.4, 321.0], [17.5, 321.0], [17.6, 321.0], [17.7, 321.0], [17.8, 321.0], [17.9, 321.0], [18.0, 321.0], [18.1, 321.0], [18.2, 321.0], [18.3, 321.0], [18.4, 321.0], [18.5, 321.0], [18.6, 322.0], [18.7, 322.0], [18.8, 322.0], [18.9, 322.0], [19.0, 322.0], [19.1, 322.0], [19.2, 322.0], [19.3, 322.0], [19.4, 322.0], [19.5, 322.0], [19.6, 322.0], [19.7, 322.0], [19.8, 322.0], [19.9, 322.0], [20.0, 322.0], [20.1, 322.0], [20.2, 322.0], [20.3, 322.0], [20.4, 323.0], [20.5, 323.0], [20.6, 323.0], [20.7, 323.0], [20.8, 323.0], [20.9, 323.0], [21.0, 323.0], [21.1, 323.0], [21.2, 323.0], [21.3, 323.0], [21.4, 323.0], [21.5, 323.0], [21.6, 323.0], [21.7, 323.0], [21.8, 323.0], [21.9, 323.0], [22.0, 323.0], [22.1, 323.0], [22.2, 323.0], [22.3, 324.0], [22.4, 324.0], [22.5, 324.0], [22.6, 324.0], [22.7, 324.0], [22.8, 324.0], [22.9, 324.0], [23.0, 324.0], [23.1, 324.0], [23.2, 324.0], [23.3, 324.0], [23.4, 324.0], [23.5, 324.0], [23.6, 324.0], [23.7, 324.0], [23.8, 324.0], [23.9, 324.0], [24.0, 324.0], [24.1, 324.0], [24.2, 324.0], [24.3, 324.0], [24.4, 325.0], [24.5, 325.0], [24.6, 325.0], [24.7, 325.0], [24.8, 325.0], [24.9, 325.0], [25.0, 325.0], [25.1, 325.0], [25.2, 325.0], [25.3, 325.0], [25.4, 325.0], [25.5, 325.0], [25.6, 325.0], [25.7, 325.0], [25.8, 325.0], [25.9, 325.0], [26.0, 326.0], [26.1, 326.0], [26.2, 326.0], [26.3, 326.0], [26.4, 326.0], [26.5, 326.0], [26.6, 326.0], [26.7, 326.0], [26.8, 326.0], [26.9, 326.0], [27.0, 326.0], [27.1, 326.0], [27.2, 326.0], [27.3, 326.0], [27.4, 326.0], [27.5, 327.0], [27.6, 327.0], [27.7, 327.0], [27.8, 327.0], [27.9, 327.0], [28.0, 327.0], [28.1, 327.0], [28.2, 327.0], [28.3, 327.0], [28.4, 327.0], [28.5, 327.0], [28.6, 327.0], [28.7, 327.0], [28.8, 328.0], [28.9, 328.0], [29.0, 328.0], [29.1, 328.0], [29.2, 328.0], [29.3, 328.0], [29.4, 329.0], [29.5, 329.0], [29.6, 329.0], [29.7, 329.0], [29.8, 329.0], [29.9, 329.0], [30.0, 329.0], [30.1, 329.0], [30.2, 329.0], [30.3, 329.0], [30.4, 329.0], [30.5, 329.0], [30.6, 330.0], [30.7, 330.0], [30.8, 330.0], [30.9, 330.0], [31.0, 330.0], [31.1, 330.0], [31.2, 330.0], [31.3, 330.0], [31.4, 331.0], [31.5, 331.0], [31.6, 331.0], [31.7, 331.0], [31.8, 331.0], [31.9, 331.0], [32.0, 331.0], [32.1, 331.0], [32.2, 331.0], [32.3, 331.0], [32.4, 331.0], [32.5, 331.0], [32.6, 331.0], [32.7, 332.0], [32.8, 332.0], [32.9, 332.0], [33.0, 332.0], [33.1, 332.0], [33.2, 332.0], [33.3, 332.0], [33.4, 332.0], [33.5, 332.0], [33.6, 332.0], [33.7, 332.0], [33.8, 333.0], [33.9, 333.0], [34.0, 333.0], [34.1, 333.0], [34.2, 333.0], [34.3, 333.0], [34.4, 334.0], [34.5, 334.0], [34.6, 334.0], [34.7, 334.0], [34.8, 334.0], [34.9, 334.0], [35.0, 334.0], [35.1, 334.0], [35.2, 334.0], [35.3, 334.0], [35.4, 335.0], [35.5, 335.0], [35.6, 335.0], [35.7, 335.0], [35.8, 335.0], [35.9, 335.0], [36.0, 336.0], [36.1, 336.0], [36.2, 336.0], [36.3, 336.0], [36.4, 336.0], [36.5, 336.0], [36.6, 337.0], [36.7, 337.0], [36.8, 337.0], [36.9, 338.0], [37.0, 338.0], [37.1, 338.0], [37.2, 339.0], [37.3, 339.0], [37.4, 339.0], [37.5, 339.0], [37.6, 339.0], [37.7, 340.0], [37.8, 340.0], [37.9, 340.0], [38.0, 340.0], [38.1, 340.0], [38.2, 340.0], [38.3, 340.0], [38.4, 341.0], [38.5, 341.0], [38.6, 341.0], [38.7, 341.0], [38.8, 341.0], [38.9, 341.0], [39.0, 342.0], [39.1, 342.0], [39.2, 342.0], [39.3, 342.0], [39.4, 342.0], [39.5, 342.0], [39.6, 343.0], [39.7, 343.0], [39.8, 343.0], [39.9, 343.0], [40.0, 343.0], [40.1, 343.0], [40.2, 343.0], [40.3, 343.0], [40.4, 343.0], [40.5, 344.0], [40.6, 344.0], [40.7, 344.0], [40.8, 344.0], [40.9, 344.0], [41.0, 344.0], [41.1, 344.0], [41.2, 344.0], [41.3, 344.0], [41.4, 345.0], [41.5, 345.0], [41.6, 346.0], [41.7, 346.0], [41.8, 347.0], [41.9, 347.0], [42.0, 347.0], [42.1, 347.0], [42.2, 347.0], [42.3, 347.0], [42.4, 347.0], [42.5, 348.0], [42.6, 348.0], [42.7, 348.0], [42.8, 348.0], [42.9, 349.0], [43.0, 349.0], [43.1, 350.0], [43.2, 350.0], [43.3, 350.0], [43.4, 350.0], [43.5, 350.0], [43.6, 350.0], [43.7, 351.0], [43.8, 351.0], [43.9, 351.0], [44.0, 352.0], [44.1, 352.0], [44.2, 352.0], [44.3, 352.0], [44.4, 353.0], [44.5, 354.0], [44.6, 354.0], [44.7, 355.0], [44.8, 355.0], [44.9, 355.0], [45.0, 356.0], [45.1, 356.0], [45.2, 356.0], [45.3, 357.0], [45.4, 357.0], [45.5, 357.0], [45.6, 358.0], [45.7, 358.0], [45.8, 358.0], [45.9, 358.0], [46.0, 359.0], [46.1, 359.0], [46.2, 359.0], [46.3, 359.0], [46.4, 359.0], [46.5, 360.0], [46.6, 360.0], [46.7, 361.0], [46.8, 361.0], [46.9, 361.0], [47.0, 361.0], [47.1, 361.0], [47.2, 362.0], [47.3, 362.0], [47.4, 362.0], [47.5, 362.0], [47.6, 362.0], [47.7, 362.0], [47.8, 362.0], [47.9, 362.0], [48.0, 362.0], [48.1, 362.0], [48.2, 363.0], [48.3, 363.0], [48.4, 363.0], [48.5, 363.0], [48.6, 363.0], [48.7, 363.0], [48.8, 363.0], [48.9, 363.0], [49.0, 363.0], [49.1, 363.0], [49.2, 363.0], [49.3, 364.0], [49.4, 364.0], [49.5, 364.0], [49.6, 364.0], [49.7, 364.0], [49.8, 364.0], [49.9, 364.0], [50.0, 364.0], [50.1, 365.0], [50.2, 365.0], [50.3, 365.0], [50.4, 365.0], [50.5, 365.0], [50.6, 365.0], [50.7, 365.0], [50.8, 365.0], [50.9, 365.0], [51.0, 365.0], [51.1, 365.0], [51.2, 365.0], [51.3, 365.0], [51.4, 365.0], [51.5, 365.0], [51.6, 366.0], [51.7, 366.0], [51.8, 366.0], [51.9, 366.0], [52.0, 366.0], [52.1, 366.0], [52.2, 367.0], [52.3, 367.0], [52.4, 367.0], [52.5, 367.0], [52.6, 367.0], [52.7, 367.0], [52.8, 367.0], [52.9, 367.0], [53.0, 367.0], [53.1, 367.0], [53.2, 367.0], [53.3, 367.0], [53.4, 367.0], [53.5, 367.0], [53.6, 367.0], [53.7, 367.0], [53.8, 367.0], [53.9, 367.0], [54.0, 367.0], [54.1, 368.0], [54.2, 368.0], [54.3, 368.0], [54.4, 368.0], [54.5, 368.0], [54.6, 368.0], [54.7, 368.0], [54.8, 368.0], [54.9, 368.0], [55.0, 368.0], [55.1, 368.0], [55.2, 368.0], [55.3, 368.0], [55.4, 368.0], [55.5, 369.0], [55.6, 369.0], [55.7, 369.0], [55.8, 369.0], [55.9, 369.0], [56.0, 369.0], [56.1, 369.0], [56.2, 369.0], [56.3, 369.0], [56.4, 369.0], [56.5, 369.0], [56.6, 369.0], [56.7, 370.0], [56.8, 370.0], [56.9, 370.0], [57.0, 370.0], [57.1, 370.0], [57.2, 370.0], [57.3, 370.0], [57.4, 370.0], [57.5, 370.0], [57.6, 370.0], [57.7, 370.0], [57.8, 370.0], [57.9, 370.0], [58.0, 370.0], [58.1, 370.0], [58.2, 370.0], [58.3, 370.0], [58.4, 370.0], [58.5, 370.0], [58.6, 371.0], [58.7, 371.0], [58.8, 371.0], [58.9, 371.0], [59.0, 371.0], [59.1, 371.0], [59.2, 371.0], [59.3, 371.0], [59.4, 371.0], [59.5, 371.0], [59.6, 371.0], [59.7, 371.0], [59.8, 371.0], [59.9, 371.0], [60.0, 371.0], [60.1, 371.0], [60.2, 372.0], [60.3, 372.0], [60.4, 372.0], [60.5, 372.0], [60.6, 372.0], [60.7, 372.0], [60.8, 372.0], [60.9, 372.0], [61.0, 372.0], [61.1, 372.0], [61.2, 372.0], [61.3, 372.0], [61.4, 372.0], [61.5, 372.0], [61.6, 372.0], [61.7, 372.0], [61.8, 373.0], [61.9, 373.0], [62.0, 373.0], [62.1, 373.0], [62.2, 373.0], [62.3, 373.0], [62.4, 373.0], [62.5, 373.0], [62.6, 373.0], [62.7, 373.0], [62.8, 373.0], [62.9, 373.0], [63.0, 373.0], [63.1, 374.0], [63.2, 374.0], [63.3, 374.0], [63.4, 374.0], [63.5, 374.0], [63.6, 374.0], [63.7, 374.0], [63.8, 374.0], [63.9, 374.0], [64.0, 374.0], [64.1, 374.0], [64.2, 374.0], [64.3, 374.0], [64.4, 374.0], [64.5, 374.0], [64.6, 374.0], [64.7, 375.0], [64.8, 375.0], [64.9, 375.0], [65.0, 375.0], [65.1, 375.0], [65.2, 375.0], [65.3, 375.0], [65.4, 375.0], [65.5, 375.0], [65.6, 375.0], [65.7, 375.0], [65.8, 375.0], [65.9, 375.0], [66.0, 376.0], [66.1, 376.0], [66.2, 376.0], [66.3, 376.0], [66.4, 376.0], [66.5, 376.0], [66.6, 376.0], [66.7, 376.0], [66.8, 376.0], [66.9, 376.0], [67.0, 376.0], [67.1, 376.0], [67.2, 376.0], [67.3, 376.0], [67.4, 376.0], [67.5, 376.0], [67.6, 376.0], [67.7, 376.0], [67.8, 376.0], [67.9, 376.0], [68.0, 377.0], [68.1, 377.0], [68.2, 377.0], [68.3, 377.0], [68.4, 377.0], [68.5, 377.0], [68.6, 377.0], [68.7, 377.0], [68.8, 377.0], [68.9, 377.0], [69.0, 377.0], [69.1, 377.0], [69.2, 377.0], [69.3, 377.0], [69.4, 377.0], [69.5, 377.0], [69.6, 377.0], [69.7, 377.0], [69.8, 377.0], [69.9, 377.0], [70.0, 378.0], [70.1, 378.0], [70.2, 378.0], [70.3, 378.0], [70.4, 378.0], [70.5, 378.0], [70.6, 378.0], [70.7, 378.0], [70.8, 378.0], [70.9, 378.0], [71.0, 378.0], [71.1, 378.0], [71.2, 378.0], [71.3, 378.0], [71.4, 378.0], [71.5, 379.0], [71.6, 379.0], [71.7, 379.0], [71.8, 379.0], [71.9, 379.0], [72.0, 379.0], [72.1, 379.0], [72.2, 379.0], [72.3, 379.0], [72.4, 379.0], [72.5, 379.0], [72.6, 379.0], [72.7, 379.0], [72.8, 379.0], [72.9, 380.0], [73.0, 380.0], [73.1, 380.0], [73.2, 380.0], [73.3, 380.0], [73.4, 380.0], [73.5, 380.0], [73.6, 380.0], [73.7, 381.0], [73.8, 381.0], [73.9, 381.0], [74.0, 381.0], [74.1, 381.0], [74.2, 381.0], [74.3, 381.0], [74.4, 381.0], [74.5, 381.0], [74.6, 381.0], [74.7, 381.0], [74.8, 381.0], [74.9, 381.0], [75.0, 381.0], [75.1, 381.0], [75.2, 381.0], [75.3, 381.0], [75.4, 381.0], [75.5, 381.0], [75.6, 381.0], [75.7, 381.0], [75.8, 381.0], [75.9, 381.0], [76.0, 381.0], [76.1, 382.0], [76.2, 382.0], [76.3, 382.0], [76.4, 382.0], [76.5, 382.0], [76.6, 382.0], [76.7, 382.0], [76.8, 382.0], [76.9, 382.0], [77.0, 382.0], [77.1, 382.0], [77.2, 383.0], [77.3, 383.0], [77.4, 383.0], [77.5, 383.0], [77.6, 383.0], [77.7, 383.0], [77.8, 383.0], [77.9, 383.0], [78.0, 383.0], [78.1, 383.0], [78.2, 383.0], [78.3, 383.0], [78.4, 384.0], [78.5, 384.0], [78.6, 384.0], [78.7, 384.0], [78.8, 384.0], [78.9, 384.0], [79.0, 384.0], [79.1, 384.0], [79.2, 384.0], [79.3, 384.0], [79.4, 384.0], [79.5, 384.0], [79.6, 384.0], [79.7, 384.0], [79.8, 385.0], [79.9, 385.0], [80.0, 385.0], [80.1, 385.0], [80.2, 385.0], [80.3, 385.0], [80.4, 385.0], [80.5, 385.0], [80.6, 385.0], [80.7, 385.0], [80.8, 385.0], [80.9, 385.0], [81.0, 385.0], [81.1, 386.0], [81.2, 386.0], [81.3, 386.0], [81.4, 386.0], [81.5, 386.0], [81.6, 386.0], [81.7, 386.0], [81.8, 386.0], [81.9, 386.0], [82.0, 386.0], [82.1, 387.0], [82.2, 387.0], [82.3, 387.0], [82.4, 387.0], [82.5, 387.0], [82.6, 387.0], [82.7, 388.0], [82.8, 388.0], [82.9, 388.0], [83.0, 388.0], [83.1, 388.0], [83.2, 388.0], [83.3, 388.0], [83.4, 388.0], [83.5, 388.0], [83.6, 388.0], [83.7, 389.0], [83.8, 389.0], [83.9, 389.0], [84.0, 389.0], [84.1, 389.0], [84.2, 389.0], [84.3, 390.0], [84.4, 390.0], [84.5, 390.0], [84.6, 390.0], [84.7, 390.0], [84.8, 390.0], [84.9, 391.0], [85.0, 391.0], [85.1, 391.0], [85.2, 391.0], [85.3, 391.0], [85.4, 391.0], [85.5, 391.0], [85.6, 391.0], [85.7, 391.0], [85.8, 391.0], [85.9, 391.0], [86.0, 391.0], [86.1, 392.0], [86.2, 392.0], [86.3, 392.0], [86.4, 392.0], [86.5, 392.0], [86.6, 392.0], [86.7, 392.0], [86.8, 392.0], [86.9, 393.0], [87.0, 393.0], [87.1, 393.0], [87.2, 393.0], [87.3, 393.0], [87.4, 393.0], [87.5, 393.0], [87.6, 394.0], [87.7, 394.0], [87.8, 394.0], [87.9, 394.0], [88.0, 394.0], [88.1, 394.0], [88.2, 394.0], [88.3, 394.0], [88.4, 395.0], [88.5, 395.0], [88.6, 395.0], [88.7, 395.0], [88.8, 395.0], [88.9, 395.0], [89.0, 396.0], [89.1, 396.0], [89.2, 396.0], [89.3, 396.0], [89.4, 397.0], [89.5, 398.0], [89.6, 398.0], [89.7, 398.0], [89.8, 398.0], [89.9, 398.0], [90.0, 398.0], [90.1, 398.0], [90.2, 398.0], [90.3, 398.0], [90.4, 398.0], [90.5, 399.0], [90.6, 399.0], [90.7, 399.0], [90.8, 399.0], [90.9, 399.0], [91.0, 400.0], [91.1, 400.0], [91.2, 400.0], [91.3, 401.0], [91.4, 401.0], [91.5, 401.0], [91.6, 402.0], [91.7, 402.0], [91.8, 402.0], [91.9, 402.0], [92.0, 402.0], [92.1, 402.0], [92.2, 402.0], [92.3, 402.0], [92.4, 403.0], [92.5, 403.0], [92.6, 403.0], [92.7, 403.0], [92.8, 404.0], [92.9, 404.0], [93.0, 404.0], [93.1, 405.0], [93.2, 405.0], [93.3, 405.0], [93.4, 405.0], [93.5, 406.0], [93.6, 406.0], [93.7, 406.0], [93.8, 406.0], [93.9, 407.0], [94.0, 407.0], [94.1, 407.0], [94.2, 407.0], [94.3, 407.0], [94.4, 409.0], [94.5, 410.0], [94.6, 410.0], [94.7, 411.0], [94.8, 411.0], [94.9, 411.0], [95.0, 412.0], [95.1, 412.0], [95.2, 414.0], [95.3, 418.0], [95.4, 420.0], [95.5, 420.0], [95.6, 420.0], [95.7, 422.0], [95.8, 423.0], [95.9, 425.0], [96.0, 426.0], [96.1, 427.0], [96.2, 428.0], [96.3, 429.0], [96.4, 429.0], [96.5, 429.0], [96.6, 429.0], [96.7, 431.0], [96.8, 431.0], [96.9, 432.0], [97.0, 434.0], [97.1, 435.0], [97.2, 436.0], [97.3, 437.0], [97.4, 438.0], [97.5, 439.0], [97.6, 442.0], [97.7, 442.0], [97.8, 444.0], [97.9, 445.0], [98.0, 446.0], [98.1, 447.0], [98.2, 450.0], [98.3, 450.0], [98.4, 457.0], [98.5, 460.0], [98.6, 460.0], [98.7, 460.0], [98.8, 465.0], [98.9, 468.0], [99.0, 469.0], [99.1, 474.0], [99.2, 492.0], [99.3, 503.0], [99.4, 533.0], [99.5, 543.0], [99.6, 623.0], [99.7, 645.0], [99.8, 976.0], [99.9, 1038.0]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[0.0, 1451.0], [0.1, 1451.0], [0.2, 1451.0], [0.3, 1451.0], [0.4, 1451.0], [0.5, 1451.0], [0.6, 1451.0], [0.7, 1451.0], [0.8, 1451.0], [0.9, 1451.0], [1.0, 1451.0], [1.1, 1451.0], [1.2, 1451.0], [1.3, 1451.0], [1.4, 1451.0], [1.5, 1451.0], [1.6, 1451.0], [1.7, 1451.0], [1.8, 1451.0], [1.9, 1451.0], [2.0, 1451.0], [2.1, 1451.0], [2.2, 1451.0], [2.3, 1451.0], [2.4, 1451.0], [2.5, 1451.0], [2.6, 1451.0], [2.7, 1451.0], [2.8, 1451.0], [2.9, 1451.0], [3.0, 1451.0], [3.1, 1451.0], [3.2, 1451.0], [3.3, 1451.0], [3.4, 1451.0], [3.5, 1451.0], [3.6, 1451.0], [3.7, 1451.0], [3.8, 1451.0], [3.9, 1451.0], [4.0, 1451.0], [4.1, 1451.0], [4.2, 1451.0], [4.3, 1451.0], [4.4, 1451.0], [4.5, 1451.0], [4.6, 1451.0], [4.7, 1451.0], [4.8, 1451.0], [4.9, 1451.0], [5.0, 1451.0], [5.1, 1451.0], [5.2, 1451.0], [5.3, 1451.0], [5.4, 1451.0], [5.5, 1451.0], [5.6, 1451.0], [5.7, 1451.0], [5.8, 1451.0], [5.9, 1451.0], [6.0, 1451.0], [6.1, 1451.0], [6.2, 1451.0], [6.3, 1451.0], [6.4, 1451.0], [6.5, 1451.0], [6.6, 1451.0], [6.7, 1451.0], [6.8, 1451.0], [6.9, 1451.0], [7.0, 1451.0], [7.1, 1451.0], [7.2, 1451.0], [7.3, 1451.0], [7.4, 1451.0], [7.5, 1451.0], [7.6, 1451.0], [7.7, 1451.0], [7.8, 1451.0], [7.9, 1451.0], [8.0, 1451.0], [8.1, 1451.0], [8.2, 1451.0], [8.3, 1451.0], [8.4, 1451.0], [8.5, 1451.0], [8.6, 1451.0], [8.7, 1451.0], [8.8, 1451.0], [8.9, 1451.0], [9.0, 1451.0], [9.1, 1451.0], [9.2, 1451.0], [9.3, 1451.0], [9.4, 1451.0], [9.5, 1451.0], [9.6, 1451.0], [9.7, 1451.0], [9.8, 1451.0], [9.9, 1451.0], [10.0, 1451.0], [10.1, 1451.0], [10.2, 1451.0], [10.3, 1451.0], [10.4, 1451.0], [10.5, 1451.0], [10.6, 1451.0], [10.7, 1451.0], [10.8, 1451.0], [10.9, 1451.0], [11.0, 1451.0], [11.1, 1451.0], [11.2, 1451.0], [11.3, 1451.0], [11.4, 1451.0], [11.5, 1451.0], [11.6, 1451.0], [11.7, 1451.0], [11.8, 1451.0], [11.9, 1451.0], [12.0, 1451.0], [12.1, 1451.0], [12.2, 1451.0], [12.3, 1451.0], [12.4, 1451.0], [12.5, 1451.0], [12.6, 1451.0], [12.7, 1451.0], [12.8, 1451.0], [12.9, 1451.0], [13.0, 1451.0], [13.1, 1451.0], [13.2, 1451.0], [13.3, 1451.0], [13.4, 1451.0], [13.5, 1451.0], [13.6, 1451.0], [13.7, 1451.0], [13.8, 1451.0], [13.9, 1451.0], [14.0, 1451.0], [14.1, 1451.0], [14.2, 1451.0], [14.3, 1451.0], [14.4, 1451.0], [14.5, 1451.0], [14.6, 1451.0], [14.7, 1451.0], [14.8, 1451.0], [14.9, 1451.0], [15.0, 1451.0], [15.1, 1451.0], [15.2, 1451.0], [15.3, 1451.0], [15.4, 1451.0], [15.5, 1451.0], [15.6, 1451.0], [15.7, 1451.0], [15.8, 1451.0], [15.9, 1451.0], [16.0, 1451.0], [16.1, 1451.0], [16.2, 1451.0], [16.3, 1451.0], [16.4, 1451.0], [16.5, 1451.0], [16.6, 1451.0], [16.7, 1451.0], [16.8, 1451.0], [16.9, 1451.0], [17.0, 1451.0], [17.1, 1451.0], [17.2, 1451.0], [17.3, 1451.0], [17.4, 1451.0], [17.5, 1451.0], [17.6, 1451.0], [17.7, 1451.0], [17.8, 1451.0], [17.9, 1451.0], [18.0, 1451.0], [18.1, 1451.0], [18.2, 1451.0], [18.3, 1451.0], [18.4, 1451.0], [18.5, 1451.0], [18.6, 1451.0], [18.7, 1451.0], [18.8, 1451.0], [18.9, 1451.0], [19.0, 1451.0], [19.1, 1451.0], [19.2, 1451.0], [19.3, 1451.0], [19.4, 1451.0], [19.5, 1451.0], [19.6, 1451.0], [19.7, 1451.0], [19.8, 1451.0], [19.9, 1451.0], [20.0, 1451.0], [20.1, 1451.0], [20.2, 1451.0], [20.3, 1451.0], [20.4, 1451.0], [20.5, 1451.0], [20.6, 1451.0], [20.7, 1451.0], [20.8, 1451.0], [20.9, 1451.0], [21.0, 1451.0], [21.1, 1451.0], [21.2, 1451.0], [21.3, 1451.0], [21.4, 1451.0], [21.5, 1451.0], [21.6, 1451.0], [21.7, 1451.0], [21.8, 1451.0], [21.9, 1451.0], [22.0, 1451.0], [22.1, 1451.0], [22.2, 1451.0], [22.3, 1451.0], [22.4, 1451.0], [22.5, 1451.0], [22.6, 1451.0], [22.7, 1451.0], [22.8, 1451.0], [22.9, 1451.0], [23.0, 1451.0], [23.1, 1451.0], [23.2, 1451.0], [23.3, 1451.0], [23.4, 1451.0], [23.5, 1451.0], [23.6, 1451.0], [23.7, 1451.0], [23.8, 1451.0], [23.9, 1451.0], [24.0, 1451.0], [24.1, 1451.0], [24.2, 1451.0], [24.3, 1451.0], [24.4, 1451.0], [24.5, 1451.0], [24.6, 1451.0], [24.7, 1451.0], [24.8, 1451.0], [24.9, 1451.0], [25.0, 1451.0], [25.1, 1451.0], [25.2, 1451.0], [25.3, 1451.0], [25.4, 1451.0], [25.5, 1451.0], [25.6, 1451.0], [25.7, 1451.0], [25.8, 1451.0], [25.9, 1451.0], [26.0, 1451.0], [26.1, 1451.0], [26.2, 1451.0], [26.3, 1451.0], [26.4, 1451.0], [26.5, 1451.0], [26.6, 1451.0], [26.7, 1451.0], [26.8, 1451.0], [26.9, 1451.0], [27.0, 1451.0], [27.1, 1451.0], [27.2, 1451.0], [27.3, 1451.0], [27.4, 1451.0], [27.5, 1451.0], [27.6, 1451.0], [27.7, 1451.0], [27.8, 1451.0], [27.9, 1451.0], [28.0, 1451.0], [28.1, 1451.0], [28.2, 1451.0], [28.3, 1451.0], [28.4, 1451.0], [28.5, 1451.0], [28.6, 1451.0], [28.7, 1451.0], [28.8, 1451.0], [28.9, 1451.0], [29.0, 1451.0], [29.1, 1451.0], [29.2, 1451.0], [29.3, 1451.0], [29.4, 1451.0], [29.5, 1451.0], [29.6, 1451.0], [29.7, 1451.0], [29.8, 1451.0], [29.9, 1451.0], [30.0, 1451.0], [30.1, 1451.0], [30.2, 1451.0], [30.3, 1451.0], [30.4, 1451.0], [30.5, 1451.0], [30.6, 1451.0], [30.7, 1451.0], [30.8, 1451.0], [30.9, 1451.0], [31.0, 1451.0], [31.1, 1451.0], [31.2, 1451.0], [31.3, 1451.0], [31.4, 1451.0], [31.5, 1451.0], [31.6, 1451.0], [31.7, 1451.0], [31.8, 1451.0], [31.9, 1451.0], [32.0, 1451.0], [32.1, 1451.0], [32.2, 1451.0], [32.3, 1451.0], [32.4, 1451.0], [32.5, 1451.0], [32.6, 1451.0], [32.7, 1451.0], [32.8, 1451.0], [32.9, 1451.0], [33.0, 1451.0], [33.1, 1451.0], [33.2, 1451.0], [33.3, 1451.0], [33.4, 1451.0], [33.5, 1451.0], [33.6, 1451.0], [33.7, 1451.0], [33.8, 1451.0], [33.9, 1451.0], [34.0, 1451.0], [34.1, 1451.0], [34.2, 1451.0], [34.3, 1451.0], [34.4, 1451.0], [34.5, 1451.0], [34.6, 1451.0], [34.7, 1451.0], [34.8, 1451.0], [34.9, 1451.0], [35.0, 1451.0], [35.1, 1451.0], [35.2, 1451.0], [35.3, 1451.0], [35.4, 1451.0], [35.5, 1451.0], [35.6, 1451.0], [35.7, 1451.0], [35.8, 1451.0], [35.9, 1451.0], [36.0, 1451.0], [36.1, 1451.0], [36.2, 1451.0], [36.3, 1451.0], [36.4, 1451.0], [36.5, 1451.0], [36.6, 1451.0], [36.7, 1451.0], [36.8, 1451.0], [36.9, 1451.0], [37.0, 1451.0], [37.1, 1451.0], [37.2, 1451.0], [37.3, 1451.0], [37.4, 1451.0], [37.5, 1451.0], [37.6, 1451.0], [37.7, 1451.0], [37.8, 1451.0], [37.9, 1451.0], [38.0, 1451.0], [38.1, 1451.0], [38.2, 1451.0], [38.3, 1451.0], [38.4, 1451.0], [38.5, 1451.0], [38.6, 1451.0], [38.7, 1451.0], [38.8, 1451.0], [38.9, 1451.0], [39.0, 1451.0], [39.1, 1451.0], [39.2, 1451.0], [39.3, 1451.0], [39.4, 1451.0], [39.5, 1451.0], [39.6, 1451.0], [39.7, 1451.0], [39.8, 1451.0], [39.9, 1451.0], [40.0, 1451.0], [40.1, 1451.0], [40.2, 1451.0], [40.3, 1451.0], [40.4, 1451.0], [40.5, 1451.0], [40.6, 1451.0], [40.7, 1451.0], [40.8, 1451.0], [40.9, 1451.0], [41.0, 1451.0], [41.1, 1451.0], [41.2, 1451.0], [41.3, 1451.0], [41.4, 1451.0], [41.5, 1451.0], [41.6, 1451.0], [41.7, 1451.0], [41.8, 1451.0], [41.9, 1451.0], [42.0, 1451.0], [42.1, 1451.0], [42.2, 1451.0], [42.3, 1451.0], [42.4, 1451.0], [42.5, 1451.0], [42.6, 1451.0], [42.7, 1451.0], [42.8, 1451.0], [42.9, 1451.0], [43.0, 1451.0], [43.1, 1451.0], [43.2, 1451.0], [43.3, 1451.0], [43.4, 1451.0], [43.5, 1451.0], [43.6, 1451.0], [43.7, 1451.0], [43.8, 1451.0], [43.9, 1451.0], [44.0, 1451.0], [44.1, 1451.0], [44.2, 1451.0], [44.3, 1451.0], [44.4, 1451.0], [44.5, 1451.0], [44.6, 1451.0], [44.7, 1451.0], [44.8, 1451.0], [44.9, 1451.0], [45.0, 1451.0], [45.1, 1451.0], [45.2, 1451.0], [45.3, 1451.0], [45.4, 1451.0], [45.5, 1451.0], [45.6, 1451.0], [45.7, 1451.0], [45.8, 1451.0], [45.9, 1451.0], [46.0, 1451.0], [46.1, 1451.0], [46.2, 1451.0], [46.3, 1451.0], [46.4, 1451.0], [46.5, 1451.0], [46.6, 1451.0], [46.7, 1451.0], [46.8, 1451.0], [46.9, 1451.0], [47.0, 1451.0], [47.1, 1451.0], [47.2, 1451.0], [47.3, 1451.0], [47.4, 1451.0], [47.5, 1451.0], [47.6, 1451.0], [47.7, 1451.0], [47.8, 1451.0], [47.9, 1451.0], [48.0, 1451.0], [48.1, 1451.0], [48.2, 1451.0], [48.3, 1451.0], [48.4, 1451.0], [48.5, 1451.0], [48.6, 1451.0], [48.7, 1451.0], [48.8, 1451.0], [48.9, 1451.0], [49.0, 1451.0], [49.1, 1451.0], [49.2, 1451.0], [49.3, 1451.0], [49.4, 1451.0], [49.5, 1451.0], [49.6, 1451.0], [49.7, 1451.0], [49.8, 1451.0], [49.9, 1451.0], [50.0, 1451.0], [50.1, 1451.0], [50.2, 1451.0], [50.3, 1451.0], [50.4, 1451.0], [50.5, 1451.0], [50.6, 1451.0], [50.7, 1451.0], [50.8, 1451.0], [50.9, 1451.0], [51.0, 1451.0], [51.1, 1451.0], [51.2, 1451.0], [51.3, 1451.0], [51.4, 1451.0], [51.5, 1451.0], [51.6, 1451.0], [51.7, 1451.0], [51.8, 1451.0], [51.9, 1451.0], [52.0, 1451.0], [52.1, 1451.0], [52.2, 1451.0], [52.3, 1451.0], [52.4, 1451.0], [52.5, 1451.0], [52.6, 1451.0], [52.7, 1451.0], [52.8, 1451.0], [52.9, 1451.0], [53.0, 1451.0], [53.1, 1451.0], [53.2, 1451.0], [53.3, 1451.0], [53.4, 1451.0], [53.5, 1451.0], [53.6, 1451.0], [53.7, 1451.0], [53.8, 1451.0], [53.9, 1451.0], [54.0, 1451.0], [54.1, 1451.0], [54.2, 1451.0], [54.3, 1451.0], [54.4, 1451.0], [54.5, 1451.0], [54.6, 1451.0], [54.7, 1451.0], [54.8, 1451.0], [54.9, 1451.0], [55.0, 1451.0], [55.1, 1451.0], [55.2, 1451.0], [55.3, 1451.0], [55.4, 1451.0], [55.5, 1451.0], [55.6, 1451.0], [55.7, 1451.0], [55.8, 1451.0], [55.9, 1451.0], [56.0, 1451.0], [56.1, 1451.0], [56.2, 1451.0], [56.3, 1451.0], [56.4, 1451.0], [56.5, 1451.0], [56.6, 1451.0], [56.7, 1451.0], [56.8, 1451.0], [56.9, 1451.0], [57.0, 1451.0], [57.1, 1451.0], [57.2, 1451.0], [57.3, 1451.0], [57.4, 1451.0], [57.5, 1451.0], [57.6, 1451.0], [57.7, 1451.0], [57.8, 1451.0], [57.9, 1451.0], [58.0, 1451.0], [58.1, 1451.0], [58.2, 1451.0], [58.3, 1451.0], [58.4, 1451.0], [58.5, 1451.0], [58.6, 1451.0], [58.7, 1451.0], [58.8, 1451.0], [58.9, 1451.0], [59.0, 1451.0], [59.1, 1451.0], [59.2, 1451.0], [59.3, 1451.0], [59.4, 1451.0], [59.5, 1451.0], [59.6, 1451.0], [59.7, 1451.0], [59.8, 1451.0], [59.9, 1451.0], [60.0, 1451.0], [60.1, 1451.0], [60.2, 1451.0], [60.3, 1451.0], [60.4, 1451.0], [60.5, 1451.0], [60.6, 1451.0], [60.7, 1451.0], [60.8, 1451.0], [60.9, 1451.0], [61.0, 1451.0], [61.1, 1451.0], [61.2, 1451.0], [61.3, 1451.0], [61.4, 1451.0], [61.5, 1451.0], [61.6, 1451.0], [61.7, 1451.0], [61.8, 1451.0], [61.9, 1451.0], [62.0, 1451.0], [62.1, 1451.0], [62.2, 1451.0], [62.3, 1451.0], [62.4, 1451.0], [62.5, 1451.0], [62.6, 1451.0], [62.7, 1451.0], [62.8, 1451.0], [62.9, 1451.0], [63.0, 1451.0], [63.1, 1451.0], [63.2, 1451.0], [63.3, 1451.0], [63.4, 1451.0], [63.5, 1451.0], [63.6, 1451.0], [63.7, 1451.0], [63.8, 1451.0], [63.9, 1451.0], [64.0, 1451.0], [64.1, 1451.0], [64.2, 1451.0], [64.3, 1451.0], [64.4, 1451.0], [64.5, 1451.0], [64.6, 1451.0], [64.7, 1451.0], [64.8, 1451.0], [64.9, 1451.0], [65.0, 1451.0], [65.1, 1451.0], [65.2, 1451.0], [65.3, 1451.0], [65.4, 1451.0], [65.5, 1451.0], [65.6, 1451.0], [65.7, 1451.0], [65.8, 1451.0], [65.9, 1451.0], [66.0, 1451.0], [66.1, 1451.0], [66.2, 1451.0], [66.3, 1451.0], [66.4, 1451.0], [66.5, 1451.0], [66.6, 1451.0], [66.7, 1451.0], [66.8, 1451.0], [66.9, 1451.0], [67.0, 1451.0], [67.1, 1451.0], [67.2, 1451.0], [67.3, 1451.0], [67.4, 1451.0], [67.5, 1451.0], [67.6, 1451.0], [67.7, 1451.0], [67.8, 1451.0], [67.9, 1451.0], [68.0, 1451.0], [68.1, 1451.0], [68.2, 1451.0], [68.3, 1451.0], [68.4, 1451.0], [68.5, 1451.0], [68.6, 1451.0], [68.7, 1451.0], [68.8, 1451.0], [68.9, 1451.0], [69.0, 1451.0], [69.1, 1451.0], [69.2, 1451.0], [69.3, 1451.0], [69.4, 1451.0], [69.5, 1451.0], [69.6, 1451.0], [69.7, 1451.0], [69.8, 1451.0], [69.9, 1451.0], [70.0, 1451.0], [70.1, 1451.0], [70.2, 1451.0], [70.3, 1451.0], [70.4, 1451.0], [70.5, 1451.0], [70.6, 1451.0], [70.7, 1451.0], [70.8, 1451.0], [70.9, 1451.0], [71.0, 1451.0], [71.1, 1451.0], [71.2, 1451.0], [71.3, 1451.0], [71.4, 1451.0], [71.5, 1451.0], [71.6, 1451.0], [71.7, 1451.0], [71.8, 1451.0], [71.9, 1451.0], [72.0, 1451.0], [72.1, 1451.0], [72.2, 1451.0], [72.3, 1451.0], [72.4, 1451.0], [72.5, 1451.0], [72.6, 1451.0], [72.7, 1451.0], [72.8, 1451.0], [72.9, 1451.0], [73.0, 1451.0], [73.1, 1451.0], [73.2, 1451.0], [73.3, 1451.0], [73.4, 1451.0], [73.5, 1451.0], [73.6, 1451.0], [73.7, 1451.0], [73.8, 1451.0], [73.9, 1451.0], [74.0, 1451.0], [74.1, 1451.0], [74.2, 1451.0], [74.3, 1451.0], [74.4, 1451.0], [74.5, 1451.0], [74.6, 1451.0], [74.7, 1451.0], [74.8, 1451.0], [74.9, 1451.0], [75.0, 1451.0], [75.1, 1451.0], [75.2, 1451.0], [75.3, 1451.0], [75.4, 1451.0], [75.5, 1451.0], [75.6, 1451.0], [75.7, 1451.0], [75.8, 1451.0], [75.9, 1451.0], [76.0, 1451.0], [76.1, 1451.0], [76.2, 1451.0], [76.3, 1451.0], [76.4, 1451.0], [76.5, 1451.0], [76.6, 1451.0], [76.7, 1451.0], [76.8, 1451.0], [76.9, 1451.0], [77.0, 1451.0], [77.1, 1451.0], [77.2, 1451.0], [77.3, 1451.0], [77.4, 1451.0], [77.5, 1451.0], [77.6, 1451.0], [77.7, 1451.0], [77.8, 1451.0], [77.9, 1451.0], [78.0, 1451.0], [78.1, 1451.0], [78.2, 1451.0], [78.3, 1451.0], [78.4, 1451.0], [78.5, 1451.0], [78.6, 1451.0], [78.7, 1451.0], [78.8, 1451.0], [78.9, 1451.0], [79.0, 1451.0], [79.1, 1451.0], [79.2, 1451.0], [79.3, 1451.0], [79.4, 1451.0], [79.5, 1451.0], [79.6, 1451.0], [79.7, 1451.0], [79.8, 1451.0], [79.9, 1451.0], [80.0, 1451.0], [80.1, 1451.0], [80.2, 1451.0], [80.3, 1451.0], [80.4, 1451.0], [80.5, 1451.0], [80.6, 1451.0], [80.7, 1451.0], [80.8, 1451.0], [80.9, 1451.0], [81.0, 1451.0], [81.1, 1451.0], [81.2, 1451.0], [81.3, 1451.0], [81.4, 1451.0], [81.5, 1451.0], [81.6, 1451.0], [81.7, 1451.0], [81.8, 1451.0], [81.9, 1451.0], [82.0, 1451.0], [82.1, 1451.0], [82.2, 1451.0], [82.3, 1451.0], [82.4, 1451.0], [82.5, 1451.0], [82.6, 1451.0], [82.7, 1451.0], [82.8, 1451.0], [82.9, 1451.0], [83.0, 1451.0], [83.1, 1451.0], [83.2, 1451.0], [83.3, 1451.0], [83.4, 1451.0], [83.5, 1451.0], [83.6, 1451.0], [83.7, 1451.0], [83.8, 1451.0], [83.9, 1451.0], [84.0, 1451.0], [84.1, 1451.0], [84.2, 1451.0], [84.3, 1451.0], [84.4, 1451.0], [84.5, 1451.0], [84.6, 1451.0], [84.7, 1451.0], [84.8, 1451.0], [84.9, 1451.0], [85.0, 1451.0], [85.1, 1451.0], [85.2, 1451.0], [85.3, 1451.0], [85.4, 1451.0], [85.5, 1451.0], [85.6, 1451.0], [85.7, 1451.0], [85.8, 1451.0], [85.9, 1451.0], [86.0, 1451.0], [86.1, 1451.0], [86.2, 1451.0], [86.3, 1451.0], [86.4, 1451.0], [86.5, 1451.0], [86.6, 1451.0], [86.7, 1451.0], [86.8, 1451.0], [86.9, 1451.0], [87.0, 1451.0], [87.1, 1451.0], [87.2, 1451.0], [87.3, 1451.0], [87.4, 1451.0], [87.5, 1451.0], [87.6, 1451.0], [87.7, 1451.0], [87.8, 1451.0], [87.9, 1451.0], [88.0, 1451.0], [88.1, 1451.0], [88.2, 1451.0], [88.3, 1451.0], [88.4, 1451.0], [88.5, 1451.0], [88.6, 1451.0], [88.7, 1451.0], [88.8, 1451.0], [88.9, 1451.0], [89.0, 1451.0], [89.1, 1451.0], [89.2, 1451.0], [89.3, 1451.0], [89.4, 1451.0], [89.5, 1451.0], [89.6, 1451.0], [89.7, 1451.0], [89.8, 1451.0], [89.9, 1451.0], [90.0, 1451.0], [90.1, 1451.0], [90.2, 1451.0], [90.3, 1451.0], [90.4, 1451.0], [90.5, 1451.0], [90.6, 1451.0], [90.7, 1451.0], [90.8, 1451.0], [90.9, 1451.0], [91.0, 1451.0], [91.1, 1451.0], [91.2, 1451.0], [91.3, 1451.0], [91.4, 1451.0], [91.5, 1451.0], [91.6, 1451.0], [91.7, 1451.0], [91.8, 1451.0], [91.9, 1451.0], [92.0, 1451.0], [92.1, 1451.0], [92.2, 1451.0], [92.3, 1451.0], [92.4, 1451.0], [92.5, 1451.0], [92.6, 1451.0], [92.7, 1451.0], [92.8, 1451.0], [92.9, 1451.0], [93.0, 1451.0], [93.1, 1451.0], [93.2, 1451.0], [93.3, 1451.0], [93.4, 1451.0], [93.5, 1451.0], [93.6, 1451.0], [93.7, 1451.0], [93.8, 1451.0], [93.9, 1451.0], [94.0, 1451.0], [94.1, 1451.0], [94.2, 1451.0], [94.3, 1451.0], [94.4, 1451.0], [94.5, 1451.0], [94.6, 1451.0], [94.7, 1451.0], [94.8, 1451.0], [94.9, 1451.0], [95.0, 1451.0], [95.1, 1451.0], [95.2, 1451.0], [95.3, 1451.0], [95.4, 1451.0], [95.5, 1451.0], [95.6, 1451.0], [95.7, 1451.0], [95.8, 1451.0], [95.9, 1451.0], [96.0, 1451.0], [96.1, 1451.0], [96.2, 1451.0], [96.3, 1451.0], [96.4, 1451.0], [96.5, 1451.0], [96.6, 1451.0], [96.7, 1451.0], [96.8, 1451.0], [96.9, 1451.0], [97.0, 1451.0], [97.1, 1451.0], [97.2, 1451.0], [97.3, 1451.0], [97.4, 1451.0], [97.5, 1451.0], [97.6, 1451.0], [97.7, 1451.0], [97.8, 1451.0], [97.9, 1451.0], [98.0, 1451.0], [98.1, 1451.0], [98.2, 1451.0], [98.3, 1451.0], [98.4, 1451.0], [98.5, 1451.0], [98.6, 1451.0], [98.7, 1451.0], [98.8, 1451.0], [98.9, 1451.0], [99.0, 1451.0], [99.1, 1451.0], [99.2, 1451.0], [99.3, 1451.0], [99.4, 1451.0], [99.5, 1451.0], [99.6, 1451.0], [99.7, 1451.0], [99.8, 1451.0], [99.9, 1451.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 1020.0, "series": [{"data": [[800.0, 7.0], [900.0, 23.0], [1000.0, 21.0], [1100.0, 22.0], [1200.0, 15.0], [1300.0, 15.0], [1400.0, 11.0], [1500.0, 8.0], [24300.0, 1.0], [25200.0, 1.0], [24900.0, 1.0], [1600.0, 11.0], [1700.0, 4.0], [1800.0, 10.0], [1900.0, 6.0], [2000.0, 4.0], [2300.0, 1.0], [2200.0, 1.0], [2600.0, 1.0], [2700.0, 1.0], [3000.0, 1.0], [3200.0, 1.0], [3600.0, 1.0], [4500.0, 1.0], [4800.0, 1.0]], "isOverall": false, "label": "trackVehicleExit", "isController": false}, {"data": [[600.0, 51.0], [700.0, 54.0], [800.0, 36.0], [900.0, 23.0], [1000.0, 23.0], [1100.0, 23.0], [1200.0, 11.0], [1300.0, 14.0], [1400.0, 4.0], [1500.0, 5.0], [1600.0, 4.0], [1700.0, 3.0], [1800.0, 2.0], [1900.0, 1.0], [2000.0, 1.0], [2100.0, 1.0], [2300.0, 1.0], [2400.0, 3.0], [2500.0, 1.0], [2700.0, 1.0], [2900.0, 1.0], [4100.0, 1.0], [4500.0, 1.0], [5000.0, 1.0], [400.0, 14.0], [500.0, 62.0]], "isOverall": false, "label": "trackVehicleEntry", "isController": false}, {"data": [[600.0, 2.0], [300.0, 1020.0], [400.0, 94.0], [200.0, 1.0], [1800.0, 1.0], [900.0, 1.0], [500.0, 3.0], [1000.0, 1.0]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[1400.0, 1.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 25200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 83.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1130.0, "series": [{"data": [[0.0, 1130.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 422.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 83.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.71995268E12, "maxY": 1.0, "series": [{"data": [[1.71995268E12, 1.0]], "isOverall": false, "label": "setUpAutenticacionCognito", "isController": false}, {"data": [[1.71995322E12, 1.0], [1.71995274E12, 1.0], [1.71995304E12, 1.0], [1.7199531E12, 1.0], [1.71995292E12, 1.0], [1.71995298E12, 1.0], [1.71995328E12, 1.0], [1.7199528E12, 1.0], [1.71995286E12, 1.0], [1.71995316E12, 1.0]], "isOverall": false, "label": "consultarPlaca", "isController": false}, {"data": [[1.71995322E12, 1.0], [1.71995304E12, 1.0], [1.7199531E12, 1.0], [1.71995292E12, 1.0], [1.71995298E12, 1.0], [1.71995328E12, 1.0], [1.7199528E12, 1.0], [1.71995286E12, 1.0], [1.71995316E12, 1.0]], "isOverall": false, "label": "registrarEntrada", "isController": false}, {"data": [[1.71995322E12, 1.0], [1.71995304E12, 1.0], [1.7199531E12, 1.0], [1.71995292E12, 1.0], [1.71995298E12, 1.0], [1.71995328E12, 1.0], [1.71995316E12, 1.0]], "isOverall": false, "label": "registrarSalida", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71995328E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 359.0329949238575, "minX": 1.0, "maxY": 1838.7559523809514, "series": [{"data": [[1.0, 1239.0], [3.0, 1838.7559523809514]], "isOverall": false, "label": "trackVehicleExit", "isController": false}, {"data": [[2.9881656804733727, 1835.207100591715]], "isOverall": false, "label": "trackVehicleExit-Aggregated", "isController": false}, {"data": [[2.0, 939.5333333333334], [3.0, 924.985018726592]], "isOverall": false, "label": "trackVehicleEntry", "isController": false}, {"data": [[2.780701754385964, 928.1754385964916]], "isOverall": false, "label": "trackVehicleEntry-Aggregated", "isController": false}, {"data": [[1.0, 367.18918918918916], [2.0, 364.98214285714255], [3.0, 359.0329949238575]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[2.60284951024043, 361.0258236865536]], "isOverall": false, "label": "getPlate-Aggregated", "isController": false}, {"data": [[1.0, 1451.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}, {"data": [[1.0, 1451.0]], "isOverall": false, "label": "loginAFlypass-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5.85, "minX": 1.71995268E12, "maxY": 3031.0666666666666, "series": [{"data": [[1.71995322E12, 1444.3666666666666], [1.71995274E12, 881.0666666666667], [1.71995304E12, 1555.15], [1.7199531E12, 1555.1833333333334], [1.71995292E12, 1271.05], [1.71995298E12, 1368.1666666666667], [1.71995328E12, 1411.6833333333334], [1.7199528E12, 1149.1333333333334], [1.71995286E12, 1258.7333333333333], [1.71995316E12, 1412.35], [1.71995268E12, 35.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71995322E12, 2799.6666666666665], [1.71995274E12, 1633.3], [1.71995304E12, 3031.0666666666666], [1.7199531E12, 2973.2], [1.71995292E12, 2451.4666666666667], [1.71995298E12, 2647.25], [1.71995328E12, 2734.3333333333335], [1.7199528E12, 2201.4166666666665], [1.71995286E12, 2426.1666666666665], [1.71995316E12, 2730.7], [1.71995268E12, 5.85]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71995328E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 350.00869565217397, "minX": 1.71995268E12, "maxY": 4083.999999999999, "series": [{"data": [[1.71995322E12, 2354.5769230769233], [1.71995304E12, 1144.8181818181818], [1.7199531E12, 1247.4516129032256], [1.71995292E12, 4083.999999999999], [1.71995298E12, 2846.409090909091], [1.71995328E12, 1639.2592592592594], [1.71995316E12, 1373.5238095238094]], "isOverall": false, "label": "trackVehicleExit", "isController": false}, {"data": [[1.71995322E12, 994.5277777777777], [1.71995304E12, 677.4888888888888], [1.7199531E12, 753.8372093023255], [1.71995292E12, 947.0270270270269], [1.71995298E12, 1111.7058823529412], [1.71995328E12, 1151.9090909090912], [1.7199528E12, 1151.3939393939395], [1.71995286E12, 781.627906976744], [1.71995316E12, 954.5789473684213]], "isOverall": false, "label": "trackVehicleEntry", "isController": false}, {"data": [[1.71995322E12, 350.00869565217397], [1.71995274E12, 367.46428571428567], [1.71995304E12, 364.6396396396395], [1.7199531E12, 372.94642857142856], [1.71995292E12, 360.5045045045045], [1.71995298E12, 359.3035714285715], [1.71995328E12, 350.19469026548677], [1.7199528E12, 374.7363636363637], [1.71995286E12, 355.5132743362832], [1.71995316E12, 355.7543859649124]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[1.71995268E12, 1451.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71995328E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 349.86086956521734, "minX": 1.71995268E12, "maxY": 4083.777777777778, "series": [{"data": [[1.71995322E12, 2354.5], [1.71995304E12, 1144.5454545454545], [1.7199531E12, 1247.4193548387095], [1.71995292E12, 4083.777777777778], [1.71995298E12, 2845.9545454545455], [1.71995328E12, 1639.2222222222222], [1.71995316E12, 1373.4761904761906]], "isOverall": false, "label": "trackVehicleExit", "isController": false}, {"data": [[1.71995322E12, 994.5277777777777], [1.71995304E12, 677.3333333333333], [1.7199531E12, 753.7906976744185], [1.71995292E12, 946.7837837837837], [1.71995298E12, 1111.3823529411764], [1.71995328E12, 1151.8484848484848], [1.7199528E12, 1151.3030303030305], [1.71995286E12, 781.4883720930231], [1.71995316E12, 954.4999999999999]], "isOverall": false, "label": "trackVehicleEntry", "isController": false}, {"data": [[1.71995322E12, 349.86086956521734], [1.71995274E12, 367.31250000000006], [1.71995304E12, 364.5225225225227], [1.7199531E12, 372.90178571428567], [1.71995292E12, 360.4144144144145], [1.71995298E12, 359.23214285714295], [1.71995328E12, 350.15929203539815], [1.7199528E12, 374.58181818181816], [1.71995286E12, 355.4336283185841], [1.71995316E12, 355.55263157894734]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[1.71995268E12, 1448.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71995328E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 251.11111111111106, "minX": 1.71995268E12, "maxY": 936.0, "series": [{"data": [[1.71995322E12, 267.2307692307691], [1.71995304E12, 271.66666666666674], [1.7199531E12, 367.3548387096775], [1.71995292E12, 260.8888888888889], [1.71995298E12, 262.54545454545456], [1.71995328E12, 251.11111111111106], [1.71995316E12, 264.66666666666663]], "isOverall": false, "label": "trackVehicleExit", "isController": false}, {"data": [[1.71995322E12, 264.2222222222222], [1.71995304E12, 256.51111111111106], [1.7199531E12, 265.30232558139534], [1.71995292E12, 267.7297297297296], [1.71995298E12, 265.08823529411757], [1.71995328E12, 261.00000000000006], [1.7199528E12, 260.6363636363636], [1.71995286E12, 263.0465116279069], [1.71995316E12, 266.57894736842104]], "isOverall": false, "label": "trackVehicleEntry", "isController": false}, {"data": [[1.71995322E12, 258.93043478260864], [1.71995274E12, 267.2946428571429], [1.71995304E12, 264.41441441441435], [1.7199531E12, 261.24107142857144], [1.71995292E12, 266.5945945945947], [1.71995298E12, 264.91964285714295], [1.71995328E12, 260.2123893805311], [1.7199528E12, 263.1363636363637], [1.71995286E12, 263.99999999999966], [1.71995316E12, 262.798245614035]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[1.71995268E12, 936.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71995328E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 299.0, "minX": 1.71995268E12, "maxY": 25240.0, "series": [{"data": [[1.71995322E12, 24329.0], [1.71995274E12, 623.0], [1.71995304E12, 2049.0], [1.7199531E12, 4880.0], [1.71995292E12, 25240.0], [1.71995298E12, 24905.0], [1.71995328E12, 4172.0], [1.7199528E12, 5046.0], [1.71995286E12, 1475.0], [1.71995316E12, 2051.0], [1.71995268E12, 1451.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71995322E12, 1359.4], [1.71995274E12, 419.6], [1.71995304E12, 1025.0], [1.7199531E12, 1034.2], [1.71995292E12, 1157.4], [1.71995298E12, 1620.0999999999997], [1.71995328E12, 1575.1999999999996], [1.7199528E12, 1187.1999999999998], [1.71995286E12, 798.0000000000003], [1.71995316E12, 1229.8], [1.71995268E12, 1451.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71995322E12, 8871.739999999976], [1.71995274E12, 611.3000000000004], [1.71995304E12, 1951.7999999999993], [1.7199531E12, 2965.99999999999], [1.71995292E12, 12100.099999999717], [1.71995298E12, 10838.660000000047], [1.71995328E12, 3506.7399999999916], [1.7199528E12, 3699.160000000007], [1.71995286E12, 1409.4500000000007], [1.71995316E12, 1969.599999999999], [1.71995268E12, 1451.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71995322E12, 1724.1999999999998], [1.71995274E12, 458.04999999999995], [1.71995304E12, 1281.0], [1.7199531E12, 1160.95], [1.71995292E12, 1428.0999999999985], [1.71995298E12, 2318.149999999994], [1.71995328E12, 1899.0999999999988], [1.7199528E12, 1388.8], [1.71995286E12, 1017.1000000000001], [1.71995316E12, 1547.5], [1.71995268E12, 1451.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.71995322E12, 300.0], [1.71995274E12, 299.0], [1.71995304E12, 308.0], [1.7199531E12, 303.0], [1.71995292E12, 308.0], [1.71995298E12, 311.0], [1.71995328E12, 306.0], [1.7199528E12, 308.0], [1.71995286E12, 308.0], [1.71995316E12, 301.0], [1.71995268E12, 1451.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71995322E12, 373.0], [1.71995274E12, 363.5], [1.71995304E12, 400.0], [1.7199531E12, 400.0], [1.71995292E12, 380.0], [1.71995298E12, 383.5], [1.71995328E12, 377.0], [1.7199528E12, 373.0], [1.71995286E12, 377.0], [1.71995316E12, 381.0], [1.71995268E12, 1451.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71995328E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 371.5, "minX": 1.0, "maxY": 447.0, "series": [{"data": [[1.0, 379.0], [2.0, 371.5], [4.0, 447.0], [5.0, 377.0], [3.0, 379.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 371.0, "minX": 1.0, "maxY": 447.0, "series": [{"data": [[1.0, 379.0], [2.0, 371.0], [4.0, 447.0], [5.0, 377.0], [3.0, 379.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.71995268E12, "maxY": 3.1666666666666665, "series": [{"data": [[1.71995322E12, 2.9833333333333334], [1.71995274E12, 1.8833333333333333], [1.71995304E12, 3.1666666666666665], [1.7199531E12, 3.0833333333333335], [1.71995292E12, 2.6333333333333333], [1.71995298E12, 2.783333333333333], [1.71995328E12, 2.8333333333333335], [1.7199528E12, 2.3666666666666667], [1.71995286E12, 2.6166666666666667], [1.71995316E12, 2.8666666666666667], [1.71995268E12, 0.03333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71995328E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71995268E12, "maxY": 1.9166666666666667, "series": [{"data": [[1.71995322E12, 1.9166666666666667], [1.71995274E12, 1.8666666666666667], [1.71995304E12, 1.85], [1.7199531E12, 1.8666666666666667], [1.71995292E12, 1.85], [1.71995298E12, 1.8666666666666667], [1.71995328E12, 1.8833333333333333], [1.7199528E12, 1.8333333333333333], [1.71995286E12, 1.8833333333333333], [1.71995316E12, 1.9], [1.71995268E12, 0.016666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71995322E12, 1.0333333333333334], [1.71995304E12, 1.3], [1.7199531E12, 1.2333333333333334], [1.71995292E12, 0.7666666666666667], [1.71995298E12, 0.9333333333333333], [1.71995328E12, 1.0], [1.7199528E12, 0.55], [1.71995286E12, 0.7166666666666667], [1.71995316E12, 0.9833333333333333]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71995328E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71995268E12, "maxY": 1.9166666666666667, "series": [{"data": [[1.71995268E12, 0.016666666666666666]], "isOverall": false, "label": "loginAFlypass-success", "isController": false}, {"data": [[1.71995322E12, 0.6], [1.71995304E12, 0.75], [1.7199531E12, 0.7166666666666667], [1.71995292E12, 0.6166666666666667], [1.71995298E12, 0.5666666666666667], [1.71995328E12, 0.55], [1.7199528E12, 0.55], [1.71995286E12, 0.7166666666666667], [1.71995316E12, 0.6333333333333333]], "isOverall": false, "label": "trackVehicleEntry-success", "isController": false}, {"data": [[1.71995322E12, 0.43333333333333335], [1.71995304E12, 0.55], [1.7199531E12, 0.5166666666666667], [1.71995292E12, 0.15], [1.71995298E12, 0.36666666666666664], [1.71995328E12, 0.45], [1.71995316E12, 0.35]], "isOverall": false, "label": "trackVehicleExit-success", "isController": false}, {"data": [[1.71995322E12, 1.9166666666666667], [1.71995274E12, 1.8666666666666667], [1.71995304E12, 1.85], [1.7199531E12, 1.8666666666666667], [1.71995292E12, 1.85], [1.71995298E12, 1.8666666666666667], [1.71995328E12, 1.8833333333333333], [1.7199528E12, 1.8333333333333333], [1.71995286E12, 1.8833333333333333], [1.71995316E12, 1.9]], "isOverall": false, "label": "getPlate-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71995328E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71995268E12, "maxY": 3.15, "series": [{"data": [[1.71995322E12, 2.95], [1.71995274E12, 1.8666666666666667], [1.71995304E12, 3.15], [1.7199531E12, 3.1], [1.71995292E12, 2.6166666666666667], [1.71995298E12, 2.8], [1.71995328E12, 2.8833333333333333], [1.7199528E12, 2.3833333333333333], [1.71995286E12, 2.6], [1.71995316E12, 2.8833333333333333], [1.71995268E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71995328E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

