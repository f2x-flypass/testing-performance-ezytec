/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 310.0, "minX": 0.0, "maxY": 25650.0, "series": [{"data": [[0.0, 696.0], [0.1, 696.0], [0.2, 696.0], [0.3, 696.0], [0.4, 712.0], [0.5, 712.0], [0.6, 712.0], [0.7, 723.0], [0.8, 723.0], [0.9, 723.0], [1.0, 723.0], [1.1, 738.0], [1.2, 738.0], [1.3, 738.0], [1.4, 739.0], [1.5, 739.0], [1.6, 739.0], [1.7, 739.0], [1.8, 740.0], [1.9, 740.0], [2.0, 740.0], [2.1, 740.0], [2.2, 740.0], [2.3, 740.0], [2.4, 742.0], [2.5, 742.0], [2.6, 742.0], [2.7, 742.0], [2.8, 746.0], [2.9, 746.0], [3.0, 746.0], [3.1, 749.0], [3.2, 749.0], [3.3, 749.0], [3.4, 749.0], [3.5, 757.0], [3.6, 757.0], [3.7, 757.0], [3.8, 757.0], [3.9, 757.0], [4.0, 757.0], [4.1, 762.0], [4.2, 762.0], [4.3, 762.0], [4.4, 762.0], [4.5, 763.0], [4.6, 763.0], [4.7, 763.0], [4.8, 764.0], [4.9, 764.0], [5.0, 764.0], [5.1, 764.0], [5.2, 766.0], [5.3, 766.0], [5.4, 766.0], [5.5, 770.0], [5.6, 770.0], [5.7, 770.0], [5.8, 770.0], [5.9, 771.0], [6.0, 771.0], [6.1, 771.0], [6.2, 775.0], [6.3, 775.0], [6.4, 775.0], [6.5, 776.0], [6.6, 776.0], [6.7, 776.0], [6.8, 776.0], [6.9, 781.0], [7.0, 781.0], [7.1, 781.0], [7.2, 782.0], [7.3, 782.0], [7.4, 782.0], [7.5, 782.0], [7.6, 784.0], [7.7, 784.0], [7.8, 784.0], [7.9, 785.0], [8.0, 785.0], [8.1, 785.0], [8.2, 785.0], [8.3, 785.0], [8.4, 785.0], [8.5, 785.0], [8.6, 788.0], [8.7, 788.0], [8.8, 788.0], [8.9, 788.0], [9.0, 788.0], [9.1, 788.0], [9.2, 788.0], [9.3, 788.0], [9.4, 788.0], [9.5, 788.0], [9.6, 789.0], [9.7, 789.0], [9.8, 789.0], [9.9, 790.0], [10.0, 790.0], [10.1, 790.0], [10.2, 790.0], [10.3, 790.0], [10.4, 790.0], [10.5, 790.0], [10.6, 791.0], [10.7, 791.0], [10.8, 791.0], [10.9, 791.0], [11.0, 791.0], [11.1, 791.0], [11.2, 791.0], [11.3, 793.0], [11.4, 793.0], [11.5, 793.0], [11.6, 793.0], [11.7, 794.0], [11.8, 794.0], [11.9, 794.0], [12.0, 796.0], [12.1, 796.0], [12.2, 796.0], [12.3, 799.0], [12.4, 799.0], [12.5, 799.0], [12.6, 799.0], [12.7, 800.0], [12.8, 800.0], [12.9, 800.0], [13.0, 800.0], [13.1, 800.0], [13.2, 800.0], [13.3, 800.0], [13.4, 800.0], [13.5, 800.0], [13.6, 800.0], [13.7, 801.0], [13.8, 801.0], [13.9, 801.0], [14.0, 804.0], [14.1, 804.0], [14.2, 804.0], [14.3, 804.0], [14.4, 804.0], [14.5, 804.0], [14.6, 804.0], [14.7, 806.0], [14.8, 806.0], [14.9, 806.0], [15.0, 806.0], [15.1, 806.0], [15.2, 806.0], [15.3, 806.0], [15.4, 808.0], [15.5, 808.0], [15.6, 808.0], [15.7, 809.0], [15.8, 809.0], [15.9, 809.0], [16.0, 809.0], [16.1, 809.0], [16.2, 809.0], [16.3, 809.0], [16.4, 810.0], [16.5, 810.0], [16.6, 810.0], [16.7, 810.0], [16.8, 810.0], [16.9, 810.0], [17.0, 810.0], [17.1, 811.0], [17.2, 811.0], [17.3, 811.0], [17.4, 811.0], [17.5, 813.0], [17.6, 813.0], [17.7, 813.0], [17.8, 813.0], [17.9, 813.0], [18.0, 813.0], [18.1, 815.0], [18.2, 815.0], [18.3, 815.0], [18.4, 815.0], [18.5, 816.0], [18.6, 816.0], [18.7, 816.0], [18.8, 817.0], [18.9, 817.0], [19.0, 817.0], [19.1, 817.0], [19.2, 818.0], [19.3, 818.0], [19.4, 818.0], [19.5, 819.0], [19.6, 819.0], [19.7, 819.0], [19.8, 819.0], [19.9, 819.0], [20.0, 819.0], [20.1, 819.0], [20.2, 821.0], [20.3, 821.0], [20.4, 821.0], [20.5, 821.0], [20.6, 821.0], [20.7, 821.0], [20.8, 821.0], [20.9, 821.0], [21.0, 821.0], [21.1, 821.0], [21.2, 822.0], [21.3, 822.0], [21.4, 822.0], [21.5, 822.0], [21.6, 822.0], [21.7, 822.0], [21.8, 822.0], [21.9, 823.0], [22.0, 823.0], [22.1, 823.0], [22.2, 825.0], [22.3, 825.0], [22.4, 825.0], [22.5, 825.0], [22.6, 826.0], [22.7, 826.0], [22.8, 826.0], [22.9, 828.0], [23.0, 828.0], [23.1, 828.0], [23.2, 828.0], [23.3, 830.0], [23.4, 830.0], [23.5, 830.0], [23.6, 830.0], [23.7, 830.0], [23.8, 830.0], [23.9, 830.0], [24.0, 830.0], [24.1, 830.0], [24.2, 830.0], [24.3, 831.0], [24.4, 831.0], [24.5, 831.0], [24.6, 832.0], [24.7, 832.0], [24.8, 832.0], [24.9, 832.0], [25.0, 832.0], [25.1, 832.0], [25.2, 832.0], [25.3, 835.0], [25.4, 835.0], [25.5, 835.0], [25.6, 836.0], [25.7, 836.0], [25.8, 836.0], [25.9, 836.0], [26.0, 836.0], [26.1, 836.0], [26.2, 836.0], [26.3, 838.0], [26.4, 838.0], [26.5, 838.0], [26.6, 838.0], [26.7, 838.0], [26.8, 838.0], [26.9, 838.0], [27.0, 839.0], [27.1, 839.0], [27.2, 839.0], [27.3, 839.0], [27.4, 840.0], [27.5, 840.0], [27.6, 840.0], [27.7, 844.0], [27.8, 844.0], [27.9, 844.0], [28.0, 844.0], [28.1, 844.0], [28.2, 844.0], [28.3, 844.0], [28.4, 848.0], [28.5, 848.0], [28.6, 848.0], [28.7, 849.0], [28.8, 849.0], [28.9, 849.0], [29.0, 849.0], [29.1, 851.0], [29.2, 851.0], [29.3, 851.0], [29.4, 852.0], [29.5, 852.0], [29.6, 852.0], [29.7, 853.0], [29.8, 853.0], [29.9, 853.0], [30.0, 853.0], [30.1, 856.0], [30.2, 856.0], [30.3, 856.0], [30.4, 856.0], [30.5, 856.0], [30.6, 856.0], [30.7, 856.0], [30.8, 858.0], [30.9, 858.0], [31.0, 858.0], [31.1, 858.0], [31.2, 858.0], [31.3, 858.0], [31.4, 858.0], [31.5, 858.0], [31.6, 858.0], [31.7, 858.0], [31.8, 858.0], [31.9, 858.0], [32.0, 858.0], [32.1, 859.0], [32.2, 859.0], [32.3, 859.0], [32.4, 859.0], [32.5, 860.0], [32.6, 860.0], [32.7, 860.0], [32.8, 864.0], [32.9, 864.0], [33.0, 864.0], [33.1, 864.0], [33.2, 866.0], [33.3, 866.0], [33.4, 866.0], [33.5, 867.0], [33.6, 867.0], [33.7, 867.0], [33.8, 870.0], [33.9, 870.0], [34.0, 870.0], [34.1, 870.0], [34.2, 870.0], [34.3, 870.0], [34.4, 870.0], [34.5, 870.0], [34.6, 870.0], [34.7, 870.0], [34.8, 870.0], [34.9, 870.0], [35.0, 870.0], [35.1, 870.0], [35.2, 870.0], [35.3, 870.0], [35.4, 870.0], [35.5, 871.0], [35.6, 871.0], [35.7, 871.0], [35.8, 871.0], [35.9, 871.0], [36.0, 871.0], [36.1, 871.0], [36.2, 873.0], [36.3, 873.0], [36.4, 873.0], [36.5, 873.0], [36.6, 873.0], [36.7, 873.0], [36.8, 873.0], [36.9, 874.0], [37.0, 874.0], [37.1, 874.0], [37.2, 874.0], [37.3, 874.0], [37.4, 874.0], [37.5, 874.0], [37.6, 874.0], [37.7, 874.0], [37.8, 874.0], [37.9, 875.0], [38.0, 875.0], [38.1, 875.0], [38.2, 875.0], [38.3, 877.0], [38.4, 877.0], [38.5, 877.0], [38.6, 880.0], [38.7, 880.0], [38.8, 880.0], [38.9, 880.0], [39.0, 880.0], [39.1, 880.0], [39.2, 880.0], [39.3, 880.0], [39.4, 880.0], [39.5, 880.0], [39.6, 881.0], [39.7, 881.0], [39.8, 881.0], [39.9, 881.0], [40.0, 882.0], [40.1, 882.0], [40.2, 882.0], [40.3, 886.0], [40.4, 886.0], [40.5, 886.0], [40.6, 886.0], [40.7, 886.0], [40.8, 886.0], [40.9, 886.0], [41.0, 892.0], [41.1, 892.0], [41.2, 892.0], [41.3, 894.0], [41.4, 894.0], [41.5, 894.0], [41.6, 894.0], [41.7, 897.0], [41.8, 897.0], [41.9, 897.0], [42.0, 898.0], [42.1, 898.0], [42.2, 898.0], [42.3, 898.0], [42.4, 899.0], [42.5, 899.0], [42.6, 899.0], [42.7, 900.0], [42.8, 900.0], [42.9, 900.0], [43.0, 900.0], [43.1, 901.0], [43.2, 901.0], [43.3, 901.0], [43.4, 901.0], [43.5, 901.0], [43.6, 901.0], [43.7, 905.0], [43.8, 905.0], [43.9, 905.0], [44.0, 905.0], [44.1, 905.0], [44.2, 905.0], [44.3, 905.0], [44.4, 909.0], [44.5, 909.0], [44.6, 909.0], [44.7, 909.0], [44.8, 910.0], [44.9, 910.0], [45.0, 910.0], [45.1, 911.0], [45.2, 911.0], [45.3, 911.0], [45.4, 912.0], [45.5, 912.0], [45.6, 912.0], [45.7, 912.0], [45.8, 915.0], [45.9, 915.0], [46.0, 915.0], [46.1, 917.0], [46.2, 917.0], [46.3, 917.0], [46.4, 917.0], [46.5, 918.0], [46.6, 918.0], [46.7, 918.0], [46.8, 919.0], [46.9, 919.0], [47.0, 919.0], [47.1, 923.0], [47.2, 923.0], [47.3, 923.0], [47.4, 923.0], [47.5, 924.0], [47.6, 924.0], [47.7, 924.0], [47.8, 926.0], [47.9, 926.0], [48.0, 926.0], [48.1, 926.0], [48.2, 928.0], [48.3, 928.0], [48.4, 928.0], [48.5, 928.0], [48.6, 928.0], [48.7, 928.0], [48.8, 928.0], [48.9, 929.0], [49.0, 929.0], [49.1, 929.0], [49.2, 929.0], [49.3, 929.0], [49.4, 929.0], [49.5, 930.0], [49.6, 930.0], [49.7, 930.0], [49.8, 930.0], [49.9, 930.0], [50.0, 930.0], [50.1, 930.0], [50.2, 931.0], [50.3, 931.0], [50.4, 931.0], [50.5, 931.0], [50.6, 932.0], [50.7, 932.0], [50.8, 932.0], [50.9, 932.0], [51.0, 932.0], [51.1, 932.0], [51.2, 933.0], [51.3, 933.0], [51.4, 933.0], [51.5, 933.0], [51.6, 937.0], [51.7, 937.0], [51.8, 937.0], [51.9, 937.0], [52.0, 937.0], [52.1, 937.0], [52.2, 937.0], [52.3, 939.0], [52.4, 939.0], [52.5, 939.0], [52.6, 940.0], [52.7, 940.0], [52.8, 940.0], [52.9, 940.0], [53.0, 942.0], [53.1, 942.0], [53.2, 942.0], [53.3, 944.0], [53.4, 944.0], [53.5, 944.0], [53.6, 953.0], [53.7, 953.0], [53.8, 953.0], [53.9, 953.0], [54.0, 954.0], [54.1, 954.0], [54.2, 954.0], [54.3, 954.0], [54.4, 954.0], [54.5, 954.0], [54.6, 954.0], [54.7, 954.0], [54.8, 954.0], [54.9, 954.0], [55.0, 955.0], [55.1, 955.0], [55.2, 955.0], [55.3, 956.0], [55.4, 956.0], [55.5, 956.0], [55.6, 956.0], [55.7, 956.0], [55.8, 956.0], [55.9, 956.0], [56.0, 956.0], [56.1, 956.0], [56.2, 956.0], [56.3, 956.0], [56.4, 958.0], [56.5, 958.0], [56.6, 958.0], [56.7, 958.0], [56.8, 958.0], [56.9, 958.0], [57.0, 960.0], [57.1, 960.0], [57.2, 960.0], [57.3, 960.0], [57.4, 960.0], [57.5, 960.0], [57.6, 960.0], [57.7, 961.0], [57.8, 961.0], [57.9, 961.0], [58.0, 961.0], [58.1, 963.0], [58.2, 963.0], [58.3, 963.0], [58.4, 964.0], [58.5, 964.0], [58.6, 964.0], [58.7, 964.0], [58.8, 966.0], [58.9, 966.0], [59.0, 966.0], [59.1, 966.0], [59.2, 966.0], [59.3, 966.0], [59.4, 966.0], [59.5, 966.0], [59.6, 966.0], [59.7, 966.0], [59.8, 967.0], [59.9, 967.0], [60.0, 967.0], [60.1, 969.0], [60.2, 969.0], [60.3, 969.0], [60.4, 969.0], [60.5, 972.0], [60.6, 972.0], [60.7, 972.0], [60.8, 973.0], [60.9, 973.0], [61.0, 973.0], [61.1, 973.0], [61.2, 973.0], [61.3, 973.0], [61.4, 973.0], [61.5, 977.0], [61.6, 977.0], [61.7, 977.0], [61.8, 977.0], [61.9, 977.0], [62.0, 977.0], [62.1, 977.0], [62.2, 978.0], [62.3, 978.0], [62.4, 978.0], [62.5, 979.0], [62.6, 979.0], [62.7, 979.0], [62.8, 980.0], [62.9, 980.0], [63.0, 980.0], [63.1, 980.0], [63.2, 982.0], [63.3, 982.0], [63.4, 982.0], [63.5, 984.0], [63.6, 984.0], [63.7, 984.0], [63.8, 984.0], [63.9, 985.0], [64.0, 985.0], [64.1, 985.0], [64.2, 987.0], [64.3, 987.0], [64.4, 987.0], [64.5, 987.0], [64.6, 989.0], [64.7, 989.0], [64.8, 989.0], [64.9, 996.0], [65.0, 996.0], [65.1, 996.0], [65.2, 997.0], [65.3, 997.0], [65.4, 997.0], [65.5, 997.0], [65.6, 999.0], [65.7, 999.0], [65.8, 999.0], [65.9, 1005.0], [66.0, 1005.0], [66.1, 1005.0], [66.2, 1005.0], [66.3, 1007.0], [66.4, 1007.0], [66.5, 1007.0], [66.6, 1009.0], [66.7, 1009.0], [66.8, 1009.0], [66.9, 1010.0], [67.0, 1010.0], [67.1, 1010.0], [67.2, 1010.0], [67.3, 1013.0], [67.4, 1013.0], [67.5, 1013.0], [67.6, 1016.0], [67.7, 1016.0], [67.8, 1016.0], [67.9, 1016.0], [68.0, 1018.0], [68.1, 1018.0], [68.2, 1018.0], [68.3, 1019.0], [68.4, 1019.0], [68.5, 1019.0], [68.6, 1019.0], [68.7, 1019.0], [68.8, 1019.0], [68.9, 1019.0], [69.0, 1024.0], [69.1, 1024.0], [69.2, 1024.0], [69.3, 1024.0], [69.4, 1024.0], [69.5, 1024.0], [69.6, 1024.0], [69.7, 1026.0], [69.8, 1026.0], [69.9, 1026.0], [70.0, 1028.0], [70.1, 1028.0], [70.2, 1028.0], [70.3, 1028.0], [70.4, 1034.0], [70.5, 1034.0], [70.6, 1034.0], [70.7, 1038.0], [70.8, 1038.0], [70.9, 1038.0], [71.0, 1044.0], [71.1, 1044.0], [71.2, 1044.0], [71.3, 1044.0], [71.4, 1048.0], [71.5, 1048.0], [71.6, 1048.0], [71.7, 1056.0], [71.8, 1056.0], [71.9, 1056.0], [72.0, 1056.0], [72.1, 1061.0], [72.2, 1061.0], [72.3, 1061.0], [72.4, 1061.0], [72.5, 1061.0], [72.6, 1061.0], [72.7, 1062.0], [72.8, 1062.0], [72.9, 1062.0], [73.0, 1062.0], [73.1, 1064.0], [73.2, 1064.0], [73.3, 1064.0], [73.4, 1070.0], [73.5, 1070.0], [73.6, 1070.0], [73.7, 1070.0], [73.8, 1074.0], [73.9, 1074.0], [74.0, 1074.0], [74.1, 1078.0], [74.2, 1078.0], [74.3, 1078.0], [74.4, 1078.0], [74.5, 1080.0], [74.6, 1080.0], [74.7, 1080.0], [74.8, 1082.0], [74.9, 1082.0], [75.0, 1082.0], [75.1, 1087.0], [75.2, 1087.0], [75.3, 1087.0], [75.4, 1087.0], [75.5, 1089.0], [75.6, 1089.0], [75.7, 1089.0], [75.8, 1089.0], [75.9, 1089.0], [76.0, 1089.0], [76.1, 1089.0], [76.2, 1093.0], [76.3, 1093.0], [76.4, 1093.0], [76.5, 1095.0], [76.6, 1095.0], [76.7, 1095.0], [76.8, 1096.0], [76.9, 1096.0], [77.0, 1096.0], [77.1, 1096.0], [77.2, 1097.0], [77.3, 1097.0], [77.4, 1097.0], [77.5, 1101.0], [77.6, 1101.0], [77.7, 1101.0], [77.8, 1101.0], [77.9, 1102.0], [78.0, 1102.0], [78.1, 1102.0], [78.2, 1107.0], [78.3, 1107.0], [78.4, 1107.0], [78.5, 1125.0], [78.6, 1125.0], [78.7, 1125.0], [78.8, 1125.0], [78.9, 1126.0], [79.0, 1126.0], [79.1, 1126.0], [79.2, 1128.0], [79.3, 1128.0], [79.4, 1128.0], [79.5, 1128.0], [79.6, 1138.0], [79.7, 1138.0], [79.8, 1138.0], [79.9, 1148.0], [80.0, 1148.0], [80.1, 1148.0], [80.2, 1148.0], [80.3, 1148.0], [80.4, 1148.0], [80.5, 1148.0], [80.6, 1155.0], [80.7, 1155.0], [80.8, 1155.0], [80.9, 1159.0], [81.0, 1159.0], [81.1, 1159.0], [81.2, 1159.0], [81.3, 1160.0], [81.4, 1160.0], [81.5, 1160.0], [81.6, 1162.0], [81.7, 1162.0], [81.8, 1162.0], [81.9, 1162.0], [82.0, 1168.0], [82.1, 1168.0], [82.2, 1168.0], [82.3, 1169.0], [82.4, 1169.0], [82.5, 1169.0], [82.6, 1171.0], [82.7, 1171.0], [82.8, 1171.0], [82.9, 1171.0], [83.0, 1174.0], [83.1, 1174.0], [83.2, 1174.0], [83.3, 1176.0], [83.4, 1176.0], [83.5, 1176.0], [83.6, 1176.0], [83.7, 1190.0], [83.8, 1190.0], [83.9, 1190.0], [84.0, 1191.0], [84.1, 1191.0], [84.2, 1191.0], [84.3, 1191.0], [84.4, 1202.0], [84.5, 1202.0], [84.6, 1202.0], [84.7, 1220.0], [84.8, 1220.0], [84.9, 1220.0], [85.0, 1227.0], [85.1, 1227.0], [85.2, 1227.0], [85.3, 1227.0], [85.4, 1247.0], [85.5, 1247.0], [85.6, 1247.0], [85.7, 1255.0], [85.8, 1255.0], [85.9, 1255.0], [86.0, 1255.0], [86.1, 1277.0], [86.2, 1277.0], [86.3, 1277.0], [86.4, 1281.0], [86.5, 1281.0], [86.6, 1281.0], [86.7, 1288.0], [86.8, 1288.0], [86.9, 1288.0], [87.0, 1288.0], [87.1, 1306.0], [87.2, 1306.0], [87.3, 1306.0], [87.4, 1346.0], [87.5, 1346.0], [87.6, 1346.0], [87.7, 1346.0], [87.8, 1388.0], [87.9, 1388.0], [88.0, 1388.0], [88.1, 1421.0], [88.2, 1421.0], [88.3, 1421.0], [88.4, 1484.0], [88.5, 1484.0], [88.6, 1484.0], [88.7, 1484.0], [88.8, 1501.0], [88.9, 1501.0], [89.0, 1501.0], [89.1, 1501.0], [89.2, 1501.0], [89.3, 1501.0], [89.4, 1501.0], [89.5, 1507.0], [89.6, 1507.0], [89.7, 1507.0], [89.8, 1614.0], [89.9, 1614.0], [90.0, 1614.0], [90.1, 1614.0], [90.2, 1621.0], [90.3, 1621.0], [90.4, 1621.0], [90.5, 1633.0], [90.6, 1633.0], [90.7, 1633.0], [90.8, 1651.0], [90.9, 1651.0], [91.0, 1651.0], [91.1, 1651.0], [91.2, 1680.0], [91.3, 1680.0], [91.4, 1680.0], [91.5, 1697.0], [91.6, 1697.0], [91.7, 1697.0], [91.8, 1697.0], [91.9, 1703.0], [92.0, 1703.0], [92.1, 1703.0], [92.2, 1717.0], [92.3, 1717.0], [92.4, 1717.0], [92.5, 1801.0], [92.6, 1801.0], [92.7, 1801.0], [92.8, 1801.0], [92.9, 1841.0], [93.0, 1841.0], [93.1, 1841.0], [93.2, 1841.0], [93.3, 1841.0], [93.4, 1841.0], [93.5, 1841.0], [93.6, 1885.0], [93.7, 1885.0], [93.8, 1885.0], [93.9, 1928.0], [94.0, 1928.0], [94.1, 1928.0], [94.2, 1929.0], [94.3, 1929.0], [94.4, 1929.0], [94.5, 1929.0], [94.6, 1949.0], [94.7, 1949.0], [94.8, 1949.0], [94.9, 2012.0], [95.0, 2012.0], [95.1, 2012.0], [95.2, 2012.0], [95.3, 2078.0], [95.4, 2078.0], [95.5, 2078.0], [95.6, 2116.0], [95.7, 2116.0], [95.8, 2116.0], [95.9, 2116.0], [96.0, 2127.0], [96.1, 2127.0], [96.2, 2127.0], [96.3, 2152.0], [96.4, 2152.0], [96.5, 2152.0], [96.6, 2219.0], [96.7, 2219.0], [96.8, 2219.0], [96.9, 2219.0], [97.0, 2263.0], [97.1, 2263.0], [97.2, 2263.0], [97.3, 2274.0], [97.4, 2274.0], [97.5, 2274.0], [97.6, 2274.0], [97.7, 2336.0], [97.8, 2336.0], [97.9, 2336.0], [98.0, 2425.0], [98.1, 2425.0], [98.2, 2425.0], [98.3, 2519.0], [98.4, 2519.0], [98.5, 2519.0], [98.6, 2519.0], [98.7, 2616.0], [98.8, 2616.0], [98.9, 2616.0], [99.0, 2665.0], [99.1, 2665.0], [99.2, 2665.0], [99.3, 2665.0], [99.4, 4255.0], [99.5, 4255.0], [99.6, 4255.0], [99.7, 25650.0], [99.8, 25650.0], [99.9, 25650.0], [100.0, 25650.0]], "isOverall": false, "label": "trackVehicleExit", "isController": false}, {"data": [[0.0, 388.0], [0.1, 388.0], [0.2, 390.0], [0.3, 390.0], [0.4, 409.0], [0.5, 409.0], [0.6, 410.0], [0.7, 410.0], [0.8, 414.0], [0.9, 414.0], [1.0, 417.0], [1.1, 417.0], [1.2, 418.0], [1.3, 418.0], [1.4, 422.0], [1.5, 422.0], [1.6, 422.0], [1.7, 422.0], [1.8, 422.0], [1.9, 423.0], [2.0, 423.0], [2.1, 424.0], [2.2, 424.0], [2.3, 424.0], [2.4, 424.0], [2.5, 425.0], [2.6, 425.0], [2.7, 425.0], [2.8, 425.0], [2.9, 425.0], [3.0, 425.0], [3.1, 425.0], [3.2, 425.0], [3.3, 426.0], [3.4, 426.0], [3.5, 427.0], [3.6, 429.0], [3.7, 429.0], [3.8, 431.0], [3.9, 431.0], [4.0, 431.0], [4.1, 431.0], [4.2, 433.0], [4.3, 433.0], [4.4, 434.0], [4.5, 434.0], [4.6, 434.0], [4.7, 434.0], [4.8, 436.0], [4.9, 436.0], [5.0, 437.0], [5.1, 437.0], [5.2, 439.0], [5.3, 439.0], [5.4, 439.0], [5.5, 439.0], [5.6, 439.0], [5.7, 439.0], [5.8, 439.0], [5.9, 440.0], [6.0, 440.0], [6.1, 440.0], [6.2, 440.0], [6.3, 440.0], [6.4, 440.0], [6.5, 442.0], [6.6, 442.0], [6.7, 442.0], [6.8, 442.0], [6.9, 444.0], [7.0, 444.0], [7.1, 444.0], [7.2, 444.0], [7.3, 444.0], [7.4, 445.0], [7.5, 445.0], [7.6, 446.0], [7.7, 446.0], [7.8, 447.0], [7.9, 447.0], [8.0, 447.0], [8.1, 447.0], [8.2, 448.0], [8.3, 448.0], [8.4, 448.0], [8.5, 448.0], [8.6, 449.0], [8.7, 449.0], [8.8, 449.0], [8.9, 449.0], [9.0, 449.0], [9.1, 450.0], [9.2, 450.0], [9.3, 450.0], [9.4, 450.0], [9.5, 452.0], [9.6, 452.0], [9.7, 452.0], [9.8, 452.0], [9.9, 452.0], [10.0, 452.0], [10.1, 452.0], [10.2, 452.0], [10.3, 453.0], [10.4, 453.0], [10.5, 453.0], [10.6, 453.0], [10.7, 453.0], [10.8, 455.0], [10.9, 455.0], [11.0, 455.0], [11.1, 455.0], [11.2, 455.0], [11.3, 455.0], [11.4, 456.0], [11.5, 456.0], [11.6, 457.0], [11.7, 457.0], [11.8, 458.0], [11.9, 458.0], [12.0, 458.0], [12.1, 458.0], [12.2, 458.0], [12.3, 458.0], [12.4, 458.0], [12.5, 458.0], [12.6, 459.0], [12.7, 461.0], [12.8, 461.0], [12.9, 461.0], [13.0, 461.0], [13.1, 461.0], [13.2, 461.0], [13.3, 461.0], [13.4, 461.0], [13.5, 462.0], [13.6, 462.0], [13.7, 463.0], [13.8, 463.0], [13.9, 463.0], [14.0, 463.0], [14.1, 463.0], [14.2, 463.0], [14.3, 463.0], [14.4, 466.0], [14.5, 466.0], [14.6, 468.0], [14.7, 468.0], [14.8, 468.0], [14.9, 468.0], [15.0, 471.0], [15.1, 471.0], [15.2, 471.0], [15.3, 471.0], [15.4, 472.0], [15.5, 472.0], [15.6, 472.0], [15.7, 472.0], [15.8, 472.0], [15.9, 472.0], [16.0, 472.0], [16.1, 472.0], [16.2, 472.0], [16.3, 473.0], [16.4, 473.0], [16.5, 473.0], [16.6, 473.0], [16.7, 474.0], [16.8, 474.0], [16.9, 474.0], [17.0, 474.0], [17.1, 475.0], [17.2, 475.0], [17.3, 475.0], [17.4, 475.0], [17.5, 475.0], [17.6, 475.0], [17.7, 476.0], [17.8, 476.0], [17.9, 476.0], [18.0, 476.0], [18.1, 476.0], [18.2, 476.0], [18.3, 476.0], [18.4, 477.0], [18.5, 477.0], [18.6, 477.0], [18.7, 477.0], [18.8, 477.0], [18.9, 477.0], [19.0, 478.0], [19.1, 478.0], [19.2, 478.0], [19.3, 478.0], [19.4, 478.0], [19.5, 478.0], [19.6, 478.0], [19.7, 478.0], [19.8, 478.0], [19.9, 478.0], [20.0, 478.0], [20.1, 479.0], [20.2, 479.0], [20.3, 479.0], [20.4, 479.0], [20.5, 479.0], [20.6, 479.0], [20.7, 479.0], [20.8, 479.0], [20.9, 480.0], [21.0, 480.0], [21.1, 480.0], [21.2, 480.0], [21.3, 482.0], [21.4, 482.0], [21.5, 483.0], [21.6, 483.0], [21.7, 483.0], [21.8, 483.0], [21.9, 483.0], [22.0, 484.0], [22.1, 484.0], [22.2, 485.0], [22.3, 485.0], [22.4, 485.0], [22.5, 485.0], [22.6, 485.0], [22.7, 485.0], [22.8, 485.0], [22.9, 485.0], [23.0, 486.0], [23.1, 486.0], [23.2, 486.0], [23.3, 486.0], [23.4, 486.0], [23.5, 488.0], [23.6, 488.0], [23.7, 488.0], [23.8, 488.0], [23.9, 488.0], [24.0, 488.0], [24.1, 488.0], [24.2, 488.0], [24.3, 488.0], [24.4, 488.0], [24.5, 489.0], [24.6, 489.0], [24.7, 489.0], [24.8, 489.0], [24.9, 489.0], [25.0, 489.0], [25.1, 489.0], [25.2, 489.0], [25.3, 489.0], [25.4, 491.0], [25.5, 491.0], [25.6, 491.0], [25.7, 491.0], [25.8, 491.0], [25.9, 491.0], [26.0, 491.0], [26.1, 491.0], [26.2, 491.0], [26.3, 491.0], [26.4, 491.0], [26.5, 491.0], [26.6, 491.0], [26.7, 491.0], [26.8, 492.0], [26.9, 492.0], [27.0, 492.0], [27.1, 492.0], [27.2, 492.0], [27.3, 492.0], [27.4, 492.0], [27.5, 492.0], [27.6, 492.0], [27.7, 492.0], [27.8, 492.0], [27.9, 493.0], [28.0, 493.0], [28.1, 493.0], [28.2, 493.0], [28.3, 493.0], [28.4, 493.0], [28.5, 493.0], [28.6, 493.0], [28.7, 493.0], [28.8, 494.0], [28.9, 494.0], [29.0, 494.0], [29.1, 494.0], [29.2, 495.0], [29.3, 495.0], [29.4, 495.0], [29.5, 495.0], [29.6, 495.0], [29.7, 495.0], [29.8, 495.0], [29.9, 495.0], [30.0, 496.0], [30.1, 496.0], [30.2, 496.0], [30.3, 496.0], [30.4, 498.0], [30.5, 498.0], [30.6, 498.0], [30.7, 498.0], [30.8, 498.0], [30.9, 498.0], [31.0, 498.0], [31.1, 498.0], [31.2, 498.0], [31.3, 499.0], [31.4, 499.0], [31.5, 499.0], [31.6, 499.0], [31.7, 500.0], [31.8, 500.0], [31.9, 500.0], [32.0, 500.0], [32.1, 500.0], [32.2, 500.0], [32.3, 500.0], [32.4, 500.0], [32.5, 500.0], [32.6, 500.0], [32.7, 500.0], [32.8, 501.0], [32.9, 501.0], [33.0, 501.0], [33.1, 501.0], [33.2, 501.0], [33.3, 501.0], [33.4, 502.0], [33.5, 502.0], [33.6, 502.0], [33.7, 502.0], [33.8, 502.0], [33.9, 502.0], [34.0, 502.0], [34.1, 503.0], [34.2, 503.0], [34.3, 504.0], [34.4, 504.0], [34.5, 504.0], [34.6, 504.0], [34.7, 504.0], [34.8, 504.0], [34.9, 504.0], [35.0, 504.0], [35.1, 504.0], [35.2, 504.0], [35.3, 505.0], [35.4, 505.0], [35.5, 505.0], [35.6, 505.0], [35.7, 506.0], [35.8, 506.0], [35.9, 506.0], [36.0, 506.0], [36.1, 506.0], [36.2, 506.0], [36.3, 506.0], [36.4, 507.0], [36.5, 507.0], [36.6, 507.0], [36.7, 507.0], [36.8, 507.0], [36.9, 507.0], [37.0, 507.0], [37.1, 507.0], [37.2, 507.0], [37.3, 507.0], [37.4, 507.0], [37.5, 508.0], [37.6, 508.0], [37.7, 508.0], [37.8, 508.0], [37.9, 508.0], [38.0, 508.0], [38.1, 509.0], [38.2, 509.0], [38.3, 509.0], [38.4, 509.0], [38.5, 509.0], [38.6, 509.0], [38.7, 510.0], [38.8, 510.0], [38.9, 510.0], [39.0, 510.0], [39.1, 511.0], [39.2, 511.0], [39.3, 511.0], [39.4, 512.0], [39.5, 512.0], [39.6, 512.0], [39.7, 512.0], [39.8, 512.0], [39.9, 512.0], [40.0, 513.0], [40.1, 513.0], [40.2, 513.0], [40.3, 513.0], [40.4, 513.0], [40.5, 513.0], [40.6, 513.0], [40.7, 513.0], [40.8, 514.0], [40.9, 514.0], [41.0, 514.0], [41.1, 514.0], [41.2, 514.0], [41.3, 515.0], [41.4, 515.0], [41.5, 516.0], [41.6, 516.0], [41.7, 517.0], [41.8, 517.0], [41.9, 517.0], [42.0, 517.0], [42.1, 517.0], [42.2, 517.0], [42.3, 517.0], [42.4, 517.0], [42.5, 517.0], [42.6, 517.0], [42.7, 518.0], [42.8, 518.0], [42.9, 518.0], [43.0, 518.0], [43.1, 518.0], [43.2, 518.0], [43.3, 518.0], [43.4, 519.0], [43.5, 519.0], [43.6, 519.0], [43.7, 519.0], [43.8, 519.0], [43.9, 519.0], [44.0, 520.0], [44.1, 520.0], [44.2, 520.0], [44.3, 520.0], [44.4, 521.0], [44.5, 521.0], [44.6, 522.0], [44.7, 523.0], [44.8, 523.0], [44.9, 523.0], [45.0, 523.0], [45.1, 523.0], [45.2, 523.0], [45.3, 523.0], [45.4, 523.0], [45.5, 524.0], [45.6, 524.0], [45.7, 524.0], [45.8, 524.0], [45.9, 524.0], [46.0, 524.0], [46.1, 525.0], [46.2, 525.0], [46.3, 526.0], [46.4, 526.0], [46.5, 526.0], [46.6, 526.0], [46.7, 526.0], [46.8, 526.0], [46.9, 526.0], [47.0, 527.0], [47.1, 527.0], [47.2, 527.0], [47.3, 527.0], [47.4, 528.0], [47.5, 528.0], [47.6, 528.0], [47.7, 528.0], [47.8, 528.0], [47.9, 528.0], [48.0, 529.0], [48.1, 529.0], [48.2, 529.0], [48.3, 529.0], [48.4, 529.0], [48.5, 529.0], [48.6, 529.0], [48.7, 530.0], [48.8, 530.0], [48.9, 530.0], [49.0, 530.0], [49.1, 531.0], [49.2, 531.0], [49.3, 531.0], [49.4, 531.0], [49.5, 531.0], [49.6, 531.0], [49.7, 532.0], [49.8, 532.0], [49.9, 534.0], [50.0, 535.0], [50.1, 535.0], [50.2, 535.0], [50.3, 535.0], [50.4, 535.0], [50.5, 535.0], [50.6, 535.0], [50.7, 535.0], [50.8, 536.0], [50.9, 536.0], [51.0, 536.0], [51.1, 536.0], [51.2, 536.0], [51.3, 536.0], [51.4, 536.0], [51.5, 536.0], [51.6, 536.0], [51.7, 536.0], [51.8, 537.0], [51.9, 537.0], [52.0, 537.0], [52.1, 537.0], [52.2, 537.0], [52.3, 538.0], [52.4, 538.0], [52.5, 538.0], [52.6, 538.0], [52.7, 538.0], [52.8, 538.0], [52.9, 539.0], [53.0, 539.0], [53.1, 539.0], [53.2, 539.0], [53.3, 539.0], [53.4, 539.0], [53.5, 540.0], [53.6, 541.0], [53.7, 541.0], [53.8, 541.0], [53.9, 541.0], [54.0, 541.0], [54.1, 541.0], [54.2, 542.0], [54.3, 542.0], [54.4, 542.0], [54.5, 542.0], [54.6, 542.0], [54.7, 542.0], [54.8, 543.0], [54.9, 543.0], [55.0, 544.0], [55.1, 544.0], [55.2, 545.0], [55.3, 545.0], [55.4, 545.0], [55.5, 545.0], [55.6, 545.0], [55.7, 545.0], [55.8, 545.0], [55.9, 546.0], [56.0, 546.0], [56.1, 546.0], [56.2, 546.0], [56.3, 546.0], [56.4, 546.0], [56.5, 546.0], [56.6, 546.0], [56.7, 546.0], [56.8, 546.0], [56.9, 547.0], [57.0, 547.0], [57.1, 548.0], [57.2, 550.0], [57.3, 550.0], [57.4, 550.0], [57.5, 550.0], [57.6, 551.0], [57.7, 551.0], [57.8, 551.0], [57.9, 551.0], [58.0, 552.0], [58.1, 552.0], [58.2, 552.0], [58.3, 552.0], [58.4, 552.0], [58.5, 552.0], [58.6, 553.0], [58.7, 553.0], [58.8, 553.0], [58.9, 553.0], [59.0, 553.0], [59.1, 554.0], [59.2, 554.0], [59.3, 554.0], [59.4, 554.0], [59.5, 554.0], [59.6, 554.0], [59.7, 557.0], [59.8, 557.0], [59.9, 557.0], [60.0, 557.0], [60.1, 557.0], [60.2, 557.0], [60.3, 559.0], [60.4, 559.0], [60.5, 560.0], [60.6, 560.0], [60.7, 560.0], [60.8, 562.0], [60.9, 562.0], [61.0, 563.0], [61.1, 563.0], [61.2, 563.0], [61.3, 563.0], [61.4, 565.0], [61.5, 565.0], [61.6, 565.0], [61.7, 565.0], [61.8, 566.0], [61.9, 566.0], [62.0, 566.0], [62.1, 566.0], [62.2, 567.0], [62.3, 567.0], [62.4, 568.0], [62.5, 570.0], [62.6, 570.0], [62.7, 570.0], [62.8, 570.0], [62.9, 571.0], [63.0, 571.0], [63.1, 571.0], [63.2, 571.0], [63.3, 572.0], [63.4, 572.0], [63.5, 572.0], [63.6, 572.0], [63.7, 573.0], [63.8, 573.0], [63.9, 574.0], [64.0, 574.0], [64.1, 574.0], [64.2, 574.0], [64.3, 575.0], [64.4, 575.0], [64.5, 575.0], [64.6, 575.0], [64.7, 575.0], [64.8, 577.0], [64.9, 577.0], [65.0, 578.0], [65.1, 578.0], [65.2, 579.0], [65.3, 579.0], [65.4, 579.0], [65.5, 579.0], [65.6, 579.0], [65.7, 579.0], [65.8, 581.0], [65.9, 581.0], [66.0, 581.0], [66.1, 581.0], [66.2, 581.0], [66.3, 582.0], [66.4, 582.0], [66.5, 583.0], [66.6, 583.0], [66.7, 584.0], [66.8, 584.0], [66.9, 584.0], [67.0, 584.0], [67.1, 585.0], [67.2, 585.0], [67.3, 585.0], [67.4, 585.0], [67.5, 586.0], [67.6, 586.0], [67.7, 587.0], [67.8, 587.0], [67.9, 589.0], [68.0, 591.0], [68.1, 591.0], [68.2, 591.0], [68.3, 591.0], [68.4, 592.0], [68.5, 592.0], [68.6, 593.0], [68.7, 593.0], [68.8, 594.0], [68.9, 594.0], [69.0, 594.0], [69.1, 594.0], [69.2, 596.0], [69.3, 596.0], [69.4, 597.0], [69.5, 597.0], [69.6, 598.0], [69.7, 600.0], [69.8, 600.0], [69.9, 603.0], [70.0, 603.0], [70.1, 604.0], [70.2, 604.0], [70.3, 604.0], [70.4, 604.0], [70.5, 604.0], [70.6, 604.0], [70.7, 605.0], [70.8, 605.0], [70.9, 606.0], [71.0, 606.0], [71.1, 607.0], [71.2, 607.0], [71.3, 608.0], [71.4, 608.0], [71.5, 609.0], [71.6, 613.0], [71.7, 613.0], [71.8, 615.0], [71.9, 615.0], [72.0, 615.0], [72.1, 615.0], [72.2, 615.0], [72.3, 615.0], [72.4, 616.0], [72.5, 616.0], [72.6, 616.0], [72.7, 616.0], [72.8, 616.0], [72.9, 616.0], [73.0, 619.0], [73.1, 619.0], [73.2, 619.0], [73.3, 619.0], [73.4, 619.0], [73.5, 620.0], [73.6, 620.0], [73.7, 622.0], [73.8, 622.0], [73.9, 623.0], [74.0, 623.0], [74.1, 625.0], [74.2, 625.0], [74.3, 626.0], [74.4, 626.0], [74.5, 626.0], [74.6, 626.0], [74.7, 628.0], [74.8, 628.0], [74.9, 629.0], [75.0, 629.0], [75.1, 629.0], [75.2, 633.0], [75.3, 633.0], [75.4, 633.0], [75.5, 633.0], [75.6, 637.0], [75.7, 637.0], [75.8, 640.0], [75.9, 640.0], [76.0, 645.0], [76.1, 645.0], [76.2, 646.0], [76.3, 646.0], [76.4, 647.0], [76.5, 647.0], [76.6, 647.0], [76.7, 647.0], [76.8, 648.0], [76.9, 648.0], [77.0, 648.0], [77.1, 649.0], [77.2, 649.0], [77.3, 649.0], [77.4, 649.0], [77.5, 652.0], [77.6, 652.0], [77.7, 653.0], [77.8, 653.0], [77.9, 655.0], [78.0, 655.0], [78.1, 655.0], [78.2, 655.0], [78.3, 656.0], [78.4, 656.0], [78.5, 657.0], [78.6, 657.0], [78.7, 657.0], [78.8, 660.0], [78.9, 660.0], [79.0, 663.0], [79.1, 663.0], [79.2, 664.0], [79.3, 664.0], [79.4, 665.0], [79.5, 665.0], [79.6, 666.0], [79.7, 666.0], [79.8, 669.0], [79.9, 669.0], [80.0, 673.0], [80.1, 673.0], [80.2, 675.0], [80.3, 675.0], [80.4, 680.0], [80.5, 681.0], [80.6, 681.0], [80.7, 683.0], [80.8, 683.0], [80.9, 683.0], [81.0, 683.0], [81.1, 684.0], [81.2, 684.0], [81.3, 688.0], [81.4, 688.0], [81.5, 690.0], [81.6, 690.0], [81.7, 691.0], [81.8, 691.0], [81.9, 691.0], [82.0, 691.0], [82.1, 692.0], [82.2, 694.0], [82.3, 694.0], [82.4, 700.0], [82.5, 700.0], [82.6, 701.0], [82.7, 701.0], [82.8, 703.0], [82.9, 703.0], [83.0, 706.0], [83.1, 706.0], [83.2, 706.0], [83.3, 706.0], [83.4, 709.0], [83.5, 709.0], [83.6, 714.0], [83.7, 714.0], [83.8, 718.0], [83.9, 718.0], [84.0, 719.0], [84.1, 719.0], [84.2, 719.0], [84.3, 724.0], [84.4, 724.0], [84.5, 734.0], [84.6, 734.0], [84.7, 736.0], [84.8, 736.0], [84.9, 741.0], [85.0, 741.0], [85.1, 741.0], [85.2, 741.0], [85.3, 742.0], [85.4, 742.0], [85.5, 757.0], [85.6, 757.0], [85.7, 757.0], [85.8, 761.0], [85.9, 761.0], [86.0, 762.0], [86.1, 762.0], [86.2, 763.0], [86.3, 763.0], [86.4, 766.0], [86.5, 766.0], [86.6, 772.0], [86.7, 772.0], [86.8, 779.0], [86.9, 779.0], [87.0, 779.0], [87.1, 779.0], [87.2, 781.0], [87.3, 781.0], [87.4, 796.0], [87.5, 799.0], [87.6, 799.0], [87.7, 801.0], [87.8, 801.0], [87.9, 802.0], [88.0, 802.0], [88.1, 809.0], [88.2, 809.0], [88.3, 812.0], [88.4, 812.0], [88.5, 817.0], [88.6, 817.0], [88.7, 823.0], [88.8, 823.0], [88.9, 836.0], [89.0, 836.0], [89.1, 837.0], [89.2, 837.0], [89.3, 840.0], [89.4, 840.0], [89.5, 840.0], [89.6, 840.0], [89.7, 840.0], [89.8, 843.0], [89.9, 843.0], [90.0, 849.0], [90.1, 849.0], [90.2, 855.0], [90.3, 855.0], [90.4, 855.0], [90.5, 855.0], [90.6, 858.0], [90.7, 858.0], [90.8, 872.0], [90.9, 872.0], [91.0, 878.0], [91.1, 882.0], [91.2, 882.0], [91.3, 919.0], [91.4, 919.0], [91.5, 941.0], [91.6, 941.0], [91.7, 947.0], [91.8, 947.0], [91.9, 964.0], [92.0, 964.0], [92.1, 978.0], [92.2, 978.0], [92.3, 982.0], [92.4, 982.0], [92.5, 990.0], [92.6, 990.0], [92.7, 1012.0], [92.8, 1012.0], [92.9, 1020.0], [93.0, 1032.0], [93.1, 1032.0], [93.2, 1039.0], [93.3, 1039.0], [93.4, 1041.0], [93.5, 1041.0], [93.6, 1066.0], [93.7, 1066.0], [93.8, 1069.0], [93.9, 1069.0], [94.0, 1097.0], [94.1, 1097.0], [94.2, 1135.0], [94.3, 1135.0], [94.4, 1144.0], [94.5, 1144.0], [94.6, 1155.0], [94.7, 1173.0], [94.8, 1173.0], [94.9, 1230.0], [95.0, 1230.0], [95.1, 1274.0], [95.2, 1274.0], [95.3, 1297.0], [95.4, 1297.0], [95.5, 1313.0], [95.6, 1313.0], [95.7, 1382.0], [95.8, 1382.0], [95.9, 1421.0], [96.0, 1421.0], [96.1, 1428.0], [96.2, 1428.0], [96.3, 1445.0], [96.4, 1445.0], [96.5, 1486.0], [96.6, 1496.0], [96.7, 1496.0], [96.8, 1522.0], [96.9, 1522.0], [97.0, 1531.0], [97.1, 1531.0], [97.2, 1616.0], [97.3, 1616.0], [97.4, 1639.0], [97.5, 1639.0], [97.6, 1665.0], [97.7, 1665.0], [97.8, 1666.0], [97.9, 1666.0], [98.0, 1793.0], [98.1, 1793.0], [98.2, 1818.0], [98.3, 1882.0], [98.4, 1882.0], [98.5, 1916.0], [98.6, 1916.0], [98.7, 1939.0], [98.8, 1939.0], [98.9, 2079.0], [99.0, 2079.0], [99.1, 2111.0], [99.2, 2111.0], [99.3, 2185.0], [99.4, 2185.0], [99.5, 2417.0], [99.6, 2417.0], [99.7, 3786.0], [99.8, 3786.0], [99.9, 4560.0]], "isOverall": false, "label": "trackVehicleEntry", "isController": false}, {"data": [[0.0, 310.0], [0.1, 310.0], [0.2, 310.0], [0.3, 311.0], [0.4, 311.0], [0.5, 312.0], [0.6, 312.0], [0.7, 312.0], [0.8, 312.0], [0.9, 313.0], [1.0, 313.0], [1.1, 313.0], [1.2, 314.0], [1.3, 314.0], [1.4, 314.0], [1.5, 314.0], [1.6, 314.0], [1.7, 314.0], [1.8, 314.0], [1.9, 314.0], [2.0, 314.0], [2.1, 315.0], [2.2, 315.0], [2.3, 316.0], [2.4, 316.0], [2.5, 316.0], [2.6, 316.0], [2.7, 316.0], [2.8, 316.0], [2.9, 317.0], [3.0, 317.0], [3.1, 317.0], [3.2, 317.0], [3.3, 317.0], [3.4, 317.0], [3.5, 317.0], [3.6, 317.0], [3.7, 317.0], [3.8, 317.0], [3.9, 317.0], [4.0, 317.0], [4.1, 318.0], [4.2, 318.0], [4.3, 318.0], [4.4, 318.0], [4.5, 318.0], [4.6, 318.0], [4.7, 318.0], [4.8, 318.0], [4.9, 318.0], [5.0, 318.0], [5.1, 319.0], [5.2, 319.0], [5.3, 319.0], [5.4, 319.0], [5.5, 319.0], [5.6, 319.0], [5.7, 319.0], [5.8, 320.0], [5.9, 320.0], [6.0, 320.0], [6.1, 320.0], [6.2, 320.0], [6.3, 321.0], [6.4, 321.0], [6.5, 321.0], [6.6, 321.0], [6.7, 321.0], [6.8, 321.0], [6.9, 322.0], [7.0, 322.0], [7.1, 322.0], [7.2, 322.0], [7.3, 322.0], [7.4, 323.0], [7.5, 323.0], [7.6, 323.0], [7.7, 323.0], [7.8, 323.0], [7.9, 323.0], [8.0, 323.0], [8.1, 324.0], [8.2, 324.0], [8.3, 324.0], [8.4, 324.0], [8.5, 324.0], [8.6, 324.0], [8.7, 324.0], [8.8, 324.0], [8.9, 324.0], [9.0, 324.0], [9.1, 325.0], [9.2, 325.0], [9.3, 325.0], [9.4, 325.0], [9.5, 325.0], [9.6, 325.0], [9.7, 325.0], [9.8, 325.0], [9.9, 325.0], [10.0, 325.0], [10.1, 325.0], [10.2, 326.0], [10.3, 326.0], [10.4, 326.0], [10.5, 326.0], [10.6, 326.0], [10.7, 326.0], [10.8, 326.0], [10.9, 326.0], [11.0, 326.0], [11.1, 327.0], [11.2, 327.0], [11.3, 327.0], [11.4, 327.0], [11.5, 328.0], [11.6, 328.0], [11.7, 328.0], [11.8, 328.0], [11.9, 328.0], [12.0, 328.0], [12.1, 328.0], [12.2, 328.0], [12.3, 329.0], [12.4, 329.0], [12.5, 329.0], [12.6, 329.0], [12.7, 330.0], [12.8, 330.0], [12.9, 330.0], [13.0, 330.0], [13.1, 330.0], [13.2, 331.0], [13.3, 331.0], [13.4, 331.0], [13.5, 331.0], [13.6, 331.0], [13.7, 331.0], [13.8, 331.0], [13.9, 331.0], [14.0, 332.0], [14.1, 332.0], [14.2, 332.0], [14.3, 332.0], [14.4, 332.0], [14.5, 332.0], [14.6, 333.0], [14.7, 333.0], [14.8, 333.0], [14.9, 333.0], [15.0, 333.0], [15.1, 333.0], [15.2, 333.0], [15.3, 333.0], [15.4, 333.0], [15.5, 333.0], [15.6, 333.0], [15.7, 333.0], [15.8, 333.0], [15.9, 333.0], [16.0, 334.0], [16.1, 334.0], [16.2, 334.0], [16.3, 334.0], [16.4, 334.0], [16.5, 334.0], [16.6, 334.0], [16.7, 334.0], [16.8, 334.0], [16.9, 334.0], [17.0, 334.0], [17.1, 335.0], [17.2, 335.0], [17.3, 335.0], [17.4, 335.0], [17.5, 335.0], [17.6, 335.0], [17.7, 335.0], [17.8, 335.0], [17.9, 335.0], [18.0, 335.0], [18.1, 335.0], [18.2, 335.0], [18.3, 335.0], [18.4, 335.0], [18.5, 335.0], [18.6, 336.0], [18.7, 336.0], [18.8, 336.0], [18.9, 336.0], [19.0, 336.0], [19.1, 336.0], [19.2, 336.0], [19.3, 336.0], [19.4, 337.0], [19.5, 337.0], [19.6, 337.0], [19.7, 337.0], [19.8, 337.0], [19.9, 337.0], [20.0, 337.0], [20.1, 338.0], [20.2, 338.0], [20.3, 338.0], [20.4, 338.0], [20.5, 338.0], [20.6, 338.0], [20.7, 338.0], [20.8, 338.0], [20.9, 338.0], [21.0, 338.0], [21.1, 338.0], [21.2, 338.0], [21.3, 338.0], [21.4, 338.0], [21.5, 339.0], [21.6, 339.0], [21.7, 339.0], [21.8, 339.0], [21.9, 339.0], [22.0, 339.0], [22.1, 339.0], [22.2, 339.0], [22.3, 339.0], [22.4, 339.0], [22.5, 339.0], [22.6, 339.0], [22.7, 339.0], [22.8, 339.0], [22.9, 340.0], [23.0, 340.0], [23.1, 340.0], [23.2, 340.0], [23.3, 340.0], [23.4, 340.0], [23.5, 340.0], [23.6, 340.0], [23.7, 340.0], [23.8, 340.0], [23.9, 340.0], [24.0, 340.0], [24.1, 340.0], [24.2, 340.0], [24.3, 340.0], [24.4, 340.0], [24.5, 340.0], [24.6, 340.0], [24.7, 341.0], [24.8, 341.0], [24.9, 341.0], [25.0, 341.0], [25.1, 341.0], [25.2, 341.0], [25.3, 341.0], [25.4, 341.0], [25.5, 341.0], [25.6, 341.0], [25.7, 341.0], [25.8, 341.0], [25.9, 341.0], [26.0, 341.0], [26.1, 342.0], [26.2, 342.0], [26.3, 342.0], [26.4, 342.0], [26.5, 342.0], [26.6, 342.0], [26.7, 342.0], [26.8, 342.0], [26.9, 342.0], [27.0, 342.0], [27.1, 342.0], [27.2, 342.0], [27.3, 342.0], [27.4, 343.0], [27.5, 343.0], [27.6, 343.0], [27.7, 343.0], [27.8, 343.0], [27.9, 343.0], [28.0, 343.0], [28.1, 343.0], [28.2, 343.0], [28.3, 343.0], [28.4, 343.0], [28.5, 343.0], [28.6, 343.0], [28.7, 343.0], [28.8, 343.0], [28.9, 343.0], [29.0, 344.0], [29.1, 344.0], [29.2, 344.0], [29.3, 344.0], [29.4, 344.0], [29.5, 344.0], [29.6, 344.0], [29.7, 344.0], [29.8, 344.0], [29.9, 344.0], [30.0, 344.0], [30.1, 344.0], [30.2, 344.0], [30.3, 344.0], [30.4, 345.0], [30.5, 345.0], [30.6, 345.0], [30.7, 345.0], [30.8, 345.0], [30.9, 345.0], [31.0, 345.0], [31.1, 345.0], [31.2, 345.0], [31.3, 345.0], [31.4, 345.0], [31.5, 345.0], [31.6, 345.0], [31.7, 346.0], [31.8, 346.0], [31.9, 346.0], [32.0, 346.0], [32.1, 346.0], [32.2, 346.0], [32.3, 346.0], [32.4, 346.0], [32.5, 346.0], [32.6, 346.0], [32.7, 346.0], [32.8, 346.0], [32.9, 346.0], [33.0, 346.0], [33.1, 347.0], [33.2, 347.0], [33.3, 347.0], [33.4, 347.0], [33.5, 347.0], [33.6, 347.0], [33.7, 347.0], [33.8, 347.0], [33.9, 348.0], [34.0, 348.0], [34.1, 348.0], [34.2, 348.0], [34.3, 348.0], [34.4, 348.0], [34.5, 348.0], [34.6, 348.0], [34.7, 348.0], [34.8, 348.0], [34.9, 348.0], [35.0, 348.0], [35.1, 348.0], [35.2, 348.0], [35.3, 348.0], [35.4, 348.0], [35.5, 349.0], [35.6, 349.0], [35.7, 349.0], [35.8, 349.0], [35.9, 349.0], [36.0, 349.0], [36.1, 349.0], [36.2, 349.0], [36.3, 349.0], [36.4, 349.0], [36.5, 349.0], [36.6, 349.0], [36.7, 349.0], [36.8, 349.0], [36.9, 350.0], [37.0, 350.0], [37.1, 350.0], [37.2, 350.0], [37.3, 350.0], [37.4, 350.0], [37.5, 350.0], [37.6, 350.0], [37.7, 350.0], [37.8, 350.0], [37.9, 351.0], [38.0, 351.0], [38.1, 351.0], [38.2, 351.0], [38.3, 351.0], [38.4, 351.0], [38.5, 351.0], [38.6, 351.0], [38.7, 351.0], [38.8, 351.0], [38.9, 351.0], [39.0, 351.0], [39.1, 351.0], [39.2, 351.0], [39.3, 352.0], [39.4, 352.0], [39.5, 352.0], [39.6, 352.0], [39.7, 352.0], [39.8, 352.0], [39.9, 353.0], [40.0, 353.0], [40.1, 353.0], [40.2, 353.0], [40.3, 354.0], [40.4, 354.0], [40.5, 354.0], [40.6, 354.0], [40.7, 354.0], [40.8, 355.0], [40.9, 355.0], [41.0, 355.0], [41.1, 355.0], [41.2, 355.0], [41.3, 355.0], [41.4, 355.0], [41.5, 355.0], [41.6, 356.0], [41.7, 356.0], [41.8, 356.0], [41.9, 356.0], [42.0, 356.0], [42.1, 356.0], [42.2, 356.0], [42.3, 356.0], [42.4, 357.0], [42.5, 357.0], [42.6, 357.0], [42.7, 357.0], [42.8, 357.0], [42.9, 357.0], [43.0, 357.0], [43.1, 357.0], [43.2, 357.0], [43.3, 357.0], [43.4, 357.0], [43.5, 358.0], [43.6, 358.0], [43.7, 358.0], [43.8, 358.0], [43.9, 358.0], [44.0, 358.0], [44.1, 358.0], [44.2, 358.0], [44.3, 359.0], [44.4, 359.0], [44.5, 359.0], [44.6, 359.0], [44.7, 359.0], [44.8, 359.0], [44.9, 359.0], [45.0, 359.0], [45.1, 359.0], [45.2, 359.0], [45.3, 359.0], [45.4, 359.0], [45.5, 360.0], [45.6, 360.0], [45.7, 360.0], [45.8, 360.0], [45.9, 360.0], [46.0, 360.0], [46.1, 360.0], [46.2, 360.0], [46.3, 361.0], [46.4, 361.0], [46.5, 361.0], [46.6, 361.0], [46.7, 361.0], [46.8, 361.0], [46.9, 361.0], [47.0, 361.0], [47.1, 361.0], [47.2, 362.0], [47.3, 362.0], [47.4, 362.0], [47.5, 362.0], [47.6, 362.0], [47.7, 362.0], [47.8, 362.0], [47.9, 362.0], [48.0, 362.0], [48.1, 363.0], [48.2, 363.0], [48.3, 363.0], [48.4, 363.0], [48.5, 363.0], [48.6, 363.0], [48.7, 363.0], [48.8, 363.0], [48.9, 363.0], [49.0, 364.0], [49.1, 364.0], [49.2, 364.0], [49.3, 364.0], [49.4, 364.0], [49.5, 364.0], [49.6, 364.0], [49.7, 364.0], [49.8, 364.0], [49.9, 364.0], [50.0, 364.0], [50.1, 364.0], [50.2, 364.0], [50.3, 364.0], [50.4, 364.0], [50.5, 364.0], [50.6, 365.0], [50.7, 365.0], [50.8, 365.0], [50.9, 365.0], [51.0, 365.0], [51.1, 365.0], [51.2, 365.0], [51.3, 365.0], [51.4, 365.0], [51.5, 365.0], [51.6, 365.0], [51.7, 365.0], [51.8, 366.0], [51.9, 366.0], [52.0, 366.0], [52.1, 366.0], [52.2, 366.0], [52.3, 366.0], [52.4, 366.0], [52.5, 366.0], [52.6, 366.0], [52.7, 366.0], [52.8, 366.0], [52.9, 366.0], [53.0, 366.0], [53.1, 367.0], [53.2, 367.0], [53.3, 367.0], [53.4, 367.0], [53.5, 367.0], [53.6, 367.0], [53.7, 367.0], [53.8, 367.0], [53.9, 367.0], [54.0, 367.0], [54.1, 367.0], [54.2, 367.0], [54.3, 368.0], [54.4, 368.0], [54.5, 368.0], [54.6, 368.0], [54.7, 368.0], [54.8, 368.0], [54.9, 368.0], [55.0, 368.0], [55.1, 368.0], [55.2, 368.0], [55.3, 368.0], [55.4, 368.0], [55.5, 368.0], [55.6, 368.0], [55.7, 368.0], [55.8, 368.0], [55.9, 368.0], [56.0, 368.0], [56.1, 368.0], [56.2, 368.0], [56.3, 369.0], [56.4, 369.0], [56.5, 369.0], [56.6, 369.0], [56.7, 369.0], [56.8, 369.0], [56.9, 369.0], [57.0, 369.0], [57.1, 369.0], [57.2, 369.0], [57.3, 369.0], [57.4, 369.0], [57.5, 369.0], [57.6, 369.0], [57.7, 369.0], [57.8, 369.0], [57.9, 369.0], [58.0, 370.0], [58.1, 370.0], [58.2, 370.0], [58.3, 370.0], [58.4, 370.0], [58.5, 370.0], [58.6, 370.0], [58.7, 370.0], [58.8, 370.0], [58.9, 371.0], [59.0, 371.0], [59.1, 371.0], [59.2, 371.0], [59.3, 371.0], [59.4, 371.0], [59.5, 371.0], [59.6, 371.0], [59.7, 371.0], [59.8, 371.0], [59.9, 371.0], [60.0, 372.0], [60.1, 372.0], [60.2, 372.0], [60.3, 372.0], [60.4, 372.0], [60.5, 372.0], [60.6, 372.0], [60.7, 372.0], [60.8, 372.0], [60.9, 373.0], [61.0, 373.0], [61.1, 373.0], [61.2, 373.0], [61.3, 373.0], [61.4, 373.0], [61.5, 373.0], [61.6, 373.0], [61.7, 373.0], [61.8, 373.0], [61.9, 374.0], [62.0, 374.0], [62.1, 374.0], [62.2, 374.0], [62.3, 374.0], [62.4, 374.0], [62.5, 374.0], [62.6, 374.0], [62.7, 374.0], [62.8, 374.0], [62.9, 374.0], [63.0, 374.0], [63.1, 374.0], [63.2, 374.0], [63.3, 374.0], [63.4, 375.0], [63.5, 375.0], [63.6, 375.0], [63.7, 375.0], [63.8, 375.0], [63.9, 375.0], [64.0, 375.0], [64.1, 375.0], [64.2, 375.0], [64.3, 375.0], [64.4, 375.0], [64.5, 376.0], [64.6, 376.0], [64.7, 376.0], [64.8, 376.0], [64.9, 376.0], [65.0, 376.0], [65.1, 376.0], [65.2, 376.0], [65.3, 376.0], [65.4, 376.0], [65.5, 377.0], [65.6, 377.0], [65.7, 377.0], [65.8, 377.0], [65.9, 377.0], [66.0, 377.0], [66.1, 377.0], [66.2, 377.0], [66.3, 377.0], [66.4, 377.0], [66.5, 378.0], [66.6, 378.0], [66.7, 378.0], [66.8, 378.0], [66.9, 378.0], [67.0, 378.0], [67.1, 378.0], [67.2, 378.0], [67.3, 378.0], [67.4, 378.0], [67.5, 379.0], [67.6, 379.0], [67.7, 379.0], [67.8, 379.0], [67.9, 379.0], [68.0, 379.0], [68.1, 379.0], [68.2, 379.0], [68.3, 379.0], [68.4, 380.0], [68.5, 380.0], [68.6, 380.0], [68.7, 380.0], [68.8, 380.0], [68.9, 380.0], [69.0, 381.0], [69.1, 381.0], [69.2, 381.0], [69.3, 381.0], [69.4, 381.0], [69.5, 382.0], [69.6, 382.0], [69.7, 382.0], [69.8, 382.0], [69.9, 382.0], [70.0, 382.0], [70.1, 382.0], [70.2, 382.0], [70.3, 382.0], [70.4, 382.0], [70.5, 383.0], [70.6, 383.0], [70.7, 383.0], [70.8, 383.0], [70.9, 383.0], [71.0, 383.0], [71.1, 384.0], [71.2, 384.0], [71.3, 384.0], [71.4, 384.0], [71.5, 384.0], [71.6, 384.0], [71.7, 384.0], [71.8, 384.0], [71.9, 384.0], [72.0, 384.0], [72.1, 385.0], [72.2, 385.0], [72.3, 385.0], [72.4, 385.0], [72.5, 385.0], [72.6, 385.0], [72.7, 385.0], [72.8, 385.0], [72.9, 385.0], [73.0, 386.0], [73.1, 386.0], [73.2, 386.0], [73.3, 386.0], [73.4, 386.0], [73.5, 386.0], [73.6, 386.0], [73.7, 386.0], [73.8, 386.0], [73.9, 387.0], [74.0, 387.0], [74.1, 387.0], [74.2, 387.0], [74.3, 387.0], [74.4, 387.0], [74.5, 387.0], [74.6, 387.0], [74.7, 387.0], [74.8, 387.0], [74.9, 387.0], [75.0, 387.0], [75.1, 388.0], [75.2, 388.0], [75.3, 388.0], [75.4, 388.0], [75.5, 388.0], [75.6, 388.0], [75.7, 388.0], [75.8, 388.0], [75.9, 388.0], [76.0, 389.0], [76.1, 389.0], [76.2, 389.0], [76.3, 389.0], [76.4, 389.0], [76.5, 389.0], [76.6, 389.0], [76.7, 389.0], [76.8, 390.0], [76.9, 390.0], [77.0, 390.0], [77.1, 390.0], [77.2, 390.0], [77.3, 390.0], [77.4, 390.0], [77.5, 390.0], [77.6, 390.0], [77.7, 390.0], [77.8, 390.0], [77.9, 390.0], [78.0, 391.0], [78.1, 391.0], [78.2, 391.0], [78.3, 391.0], [78.4, 391.0], [78.5, 391.0], [78.6, 391.0], [78.7, 391.0], [78.8, 391.0], [78.9, 392.0], [79.0, 392.0], [79.1, 392.0], [79.2, 392.0], [79.3, 392.0], [79.4, 392.0], [79.5, 392.0], [79.6, 392.0], [79.7, 393.0], [79.8, 393.0], [79.9, 393.0], [80.0, 393.0], [80.1, 393.0], [80.2, 393.0], [80.3, 393.0], [80.4, 393.0], [80.5, 393.0], [80.6, 394.0], [80.7, 394.0], [80.8, 394.0], [80.9, 394.0], [81.0, 394.0], [81.1, 394.0], [81.2, 394.0], [81.3, 395.0], [81.4, 395.0], [81.5, 395.0], [81.6, 395.0], [81.7, 395.0], [81.8, 396.0], [81.9, 396.0], [82.0, 396.0], [82.1, 396.0], [82.2, 396.0], [82.3, 396.0], [82.4, 397.0], [82.5, 397.0], [82.6, 397.0], [82.7, 397.0], [82.8, 397.0], [82.9, 397.0], [83.0, 398.0], [83.1, 398.0], [83.2, 398.0], [83.3, 398.0], [83.4, 398.0], [83.5, 398.0], [83.6, 398.0], [83.7, 398.0], [83.8, 399.0], [83.9, 399.0], [84.0, 399.0], [84.1, 399.0], [84.2, 399.0], [84.3, 399.0], [84.4, 400.0], [84.5, 400.0], [84.6, 400.0], [84.7, 400.0], [84.8, 401.0], [84.9, 401.0], [85.0, 401.0], [85.1, 401.0], [85.2, 401.0], [85.3, 401.0], [85.4, 402.0], [85.5, 402.0], [85.6, 402.0], [85.7, 402.0], [85.8, 402.0], [85.9, 402.0], [86.0, 402.0], [86.1, 402.0], [86.2, 403.0], [86.3, 403.0], [86.4, 403.0], [86.5, 403.0], [86.6, 403.0], [86.7, 403.0], [86.8, 404.0], [86.9, 404.0], [87.0, 404.0], [87.1, 404.0], [87.2, 404.0], [87.3, 404.0], [87.4, 404.0], [87.5, 405.0], [87.6, 405.0], [87.7, 405.0], [87.8, 405.0], [87.9, 405.0], [88.0, 406.0], [88.1, 406.0], [88.2, 406.0], [88.3, 406.0], [88.4, 406.0], [88.5, 406.0], [88.6, 406.0], [88.7, 406.0], [88.8, 406.0], [88.9, 406.0], [89.0, 406.0], [89.1, 407.0], [89.2, 407.0], [89.3, 407.0], [89.4, 407.0], [89.5, 407.0], [89.6, 408.0], [89.7, 408.0], [89.8, 408.0], [89.9, 408.0], [90.0, 408.0], [90.1, 409.0], [90.2, 409.0], [90.3, 409.0], [90.4, 409.0], [90.5, 409.0], [90.6, 409.0], [90.7, 409.0], [90.8, 409.0], [90.9, 409.0], [91.0, 410.0], [91.1, 410.0], [91.2, 410.0], [91.3, 410.0], [91.4, 410.0], [91.5, 410.0], [91.6, 410.0], [91.7, 411.0], [91.8, 411.0], [91.9, 411.0], [92.0, 411.0], [92.1, 411.0], [92.2, 412.0], [92.3, 412.0], [92.4, 412.0], [92.5, 412.0], [92.6, 412.0], [92.7, 412.0], [92.8, 413.0], [92.9, 413.0], [93.0, 414.0], [93.1, 414.0], [93.2, 414.0], [93.3, 414.0], [93.4, 414.0], [93.5, 414.0], [93.6, 414.0], [93.7, 414.0], [93.8, 415.0], [93.9, 415.0], [94.0, 415.0], [94.1, 415.0], [94.2, 416.0], [94.3, 416.0], [94.4, 416.0], [94.5, 417.0], [94.6, 417.0], [94.7, 417.0], [94.8, 418.0], [94.9, 419.0], [95.0, 419.0], [95.1, 419.0], [95.2, 419.0], [95.3, 420.0], [95.4, 420.0], [95.5, 420.0], [95.6, 421.0], [95.7, 421.0], [95.8, 421.0], [95.9, 422.0], [96.0, 422.0], [96.1, 422.0], [96.2, 422.0], [96.3, 423.0], [96.4, 423.0], [96.5, 424.0], [96.6, 424.0], [96.7, 424.0], [96.8, 424.0], [96.9, 425.0], [97.0, 426.0], [97.1, 426.0], [97.2, 426.0], [97.3, 426.0], [97.4, 426.0], [97.5, 426.0], [97.6, 428.0], [97.7, 428.0], [97.8, 428.0], [97.9, 429.0], [98.0, 431.0], [98.1, 437.0], [98.2, 438.0], [98.3, 439.0], [98.4, 441.0], [98.5, 443.0], [98.6, 443.0], [98.7, 445.0], [98.8, 445.0], [98.9, 447.0], [99.0, 451.0], [99.1, 460.0], [99.2, 470.0], [99.3, 471.0], [99.4, 479.0], [99.5, 486.0], [99.6, 618.0], [99.7, 624.0], [99.8, 823.0], [99.9, 876.0], [100.0, 1213.0]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[0.0, 1731.0], [0.1, 1731.0], [0.2, 1731.0], [0.3, 1731.0], [0.4, 1731.0], [0.5, 1731.0], [0.6, 1731.0], [0.7, 1731.0], [0.8, 1731.0], [0.9, 1731.0], [1.0, 1731.0], [1.1, 1731.0], [1.2, 1731.0], [1.3, 1731.0], [1.4, 1731.0], [1.5, 1731.0], [1.6, 1731.0], [1.7, 1731.0], [1.8, 1731.0], [1.9, 1731.0], [2.0, 1731.0], [2.1, 1731.0], [2.2, 1731.0], [2.3, 1731.0], [2.4, 1731.0], [2.5, 1731.0], [2.6, 1731.0], [2.7, 1731.0], [2.8, 1731.0], [2.9, 1731.0], [3.0, 1731.0], [3.1, 1731.0], [3.2, 1731.0], [3.3, 1731.0], [3.4, 1731.0], [3.5, 1731.0], [3.6, 1731.0], [3.7, 1731.0], [3.8, 1731.0], [3.9, 1731.0], [4.0, 1731.0], [4.1, 1731.0], [4.2, 1731.0], [4.3, 1731.0], [4.4, 1731.0], [4.5, 1731.0], [4.6, 1731.0], [4.7, 1731.0], [4.8, 1731.0], [4.9, 1731.0], [5.0, 1731.0], [5.1, 1731.0], [5.2, 1731.0], [5.3, 1731.0], [5.4, 1731.0], [5.5, 1731.0], [5.6, 1731.0], [5.7, 1731.0], [5.8, 1731.0], [5.9, 1731.0], [6.0, 1731.0], [6.1, 1731.0], [6.2, 1731.0], [6.3, 1731.0], [6.4, 1731.0], [6.5, 1731.0], [6.6, 1731.0], [6.7, 1731.0], [6.8, 1731.0], [6.9, 1731.0], [7.0, 1731.0], [7.1, 1731.0], [7.2, 1731.0], [7.3, 1731.0], [7.4, 1731.0], [7.5, 1731.0], [7.6, 1731.0], [7.7, 1731.0], [7.8, 1731.0], [7.9, 1731.0], [8.0, 1731.0], [8.1, 1731.0], [8.2, 1731.0], [8.3, 1731.0], [8.4, 1731.0], [8.5, 1731.0], [8.6, 1731.0], [8.7, 1731.0], [8.8, 1731.0], [8.9, 1731.0], [9.0, 1731.0], [9.1, 1731.0], [9.2, 1731.0], [9.3, 1731.0], [9.4, 1731.0], [9.5, 1731.0], [9.6, 1731.0], [9.7, 1731.0], [9.8, 1731.0], [9.9, 1731.0], [10.0, 1731.0], [10.1, 1731.0], [10.2, 1731.0], [10.3, 1731.0], [10.4, 1731.0], [10.5, 1731.0], [10.6, 1731.0], [10.7, 1731.0], [10.8, 1731.0], [10.9, 1731.0], [11.0, 1731.0], [11.1, 1731.0], [11.2, 1731.0], [11.3, 1731.0], [11.4, 1731.0], [11.5, 1731.0], [11.6, 1731.0], [11.7, 1731.0], [11.8, 1731.0], [11.9, 1731.0], [12.0, 1731.0], [12.1, 1731.0], [12.2, 1731.0], [12.3, 1731.0], [12.4, 1731.0], [12.5, 1731.0], [12.6, 1731.0], [12.7, 1731.0], [12.8, 1731.0], [12.9, 1731.0], [13.0, 1731.0], [13.1, 1731.0], [13.2, 1731.0], [13.3, 1731.0], [13.4, 1731.0], [13.5, 1731.0], [13.6, 1731.0], [13.7, 1731.0], [13.8, 1731.0], [13.9, 1731.0], [14.0, 1731.0], [14.1, 1731.0], [14.2, 1731.0], [14.3, 1731.0], [14.4, 1731.0], [14.5, 1731.0], [14.6, 1731.0], [14.7, 1731.0], [14.8, 1731.0], [14.9, 1731.0], [15.0, 1731.0], [15.1, 1731.0], [15.2, 1731.0], [15.3, 1731.0], [15.4, 1731.0], [15.5, 1731.0], [15.6, 1731.0], [15.7, 1731.0], [15.8, 1731.0], [15.9, 1731.0], [16.0, 1731.0], [16.1, 1731.0], [16.2, 1731.0], [16.3, 1731.0], [16.4, 1731.0], [16.5, 1731.0], [16.6, 1731.0], [16.7, 1731.0], [16.8, 1731.0], [16.9, 1731.0], [17.0, 1731.0], [17.1, 1731.0], [17.2, 1731.0], [17.3, 1731.0], [17.4, 1731.0], [17.5, 1731.0], [17.6, 1731.0], [17.7, 1731.0], [17.8, 1731.0], [17.9, 1731.0], [18.0, 1731.0], [18.1, 1731.0], [18.2, 1731.0], [18.3, 1731.0], [18.4, 1731.0], [18.5, 1731.0], [18.6, 1731.0], [18.7, 1731.0], [18.8, 1731.0], [18.9, 1731.0], [19.0, 1731.0], [19.1, 1731.0], [19.2, 1731.0], [19.3, 1731.0], [19.4, 1731.0], [19.5, 1731.0], [19.6, 1731.0], [19.7, 1731.0], [19.8, 1731.0], [19.9, 1731.0], [20.0, 1731.0], [20.1, 1731.0], [20.2, 1731.0], [20.3, 1731.0], [20.4, 1731.0], [20.5, 1731.0], [20.6, 1731.0], [20.7, 1731.0], [20.8, 1731.0], [20.9, 1731.0], [21.0, 1731.0], [21.1, 1731.0], [21.2, 1731.0], [21.3, 1731.0], [21.4, 1731.0], [21.5, 1731.0], [21.6, 1731.0], [21.7, 1731.0], [21.8, 1731.0], [21.9, 1731.0], [22.0, 1731.0], [22.1, 1731.0], [22.2, 1731.0], [22.3, 1731.0], [22.4, 1731.0], [22.5, 1731.0], [22.6, 1731.0], [22.7, 1731.0], [22.8, 1731.0], [22.9, 1731.0], [23.0, 1731.0], [23.1, 1731.0], [23.2, 1731.0], [23.3, 1731.0], [23.4, 1731.0], [23.5, 1731.0], [23.6, 1731.0], [23.7, 1731.0], [23.8, 1731.0], [23.9, 1731.0], [24.0, 1731.0], [24.1, 1731.0], [24.2, 1731.0], [24.3, 1731.0], [24.4, 1731.0], [24.5, 1731.0], [24.6, 1731.0], [24.7, 1731.0], [24.8, 1731.0], [24.9, 1731.0], [25.0, 1731.0], [25.1, 1731.0], [25.2, 1731.0], [25.3, 1731.0], [25.4, 1731.0], [25.5, 1731.0], [25.6, 1731.0], [25.7, 1731.0], [25.8, 1731.0], [25.9, 1731.0], [26.0, 1731.0], [26.1, 1731.0], [26.2, 1731.0], [26.3, 1731.0], [26.4, 1731.0], [26.5, 1731.0], [26.6, 1731.0], [26.7, 1731.0], [26.8, 1731.0], [26.9, 1731.0], [27.0, 1731.0], [27.1, 1731.0], [27.2, 1731.0], [27.3, 1731.0], [27.4, 1731.0], [27.5, 1731.0], [27.6, 1731.0], [27.7, 1731.0], [27.8, 1731.0], [27.9, 1731.0], [28.0, 1731.0], [28.1, 1731.0], [28.2, 1731.0], [28.3, 1731.0], [28.4, 1731.0], [28.5, 1731.0], [28.6, 1731.0], [28.7, 1731.0], [28.8, 1731.0], [28.9, 1731.0], [29.0, 1731.0], [29.1, 1731.0], [29.2, 1731.0], [29.3, 1731.0], [29.4, 1731.0], [29.5, 1731.0], [29.6, 1731.0], [29.7, 1731.0], [29.8, 1731.0], [29.9, 1731.0], [30.0, 1731.0], [30.1, 1731.0], [30.2, 1731.0], [30.3, 1731.0], [30.4, 1731.0], [30.5, 1731.0], [30.6, 1731.0], [30.7, 1731.0], [30.8, 1731.0], [30.9, 1731.0], [31.0, 1731.0], [31.1, 1731.0], [31.2, 1731.0], [31.3, 1731.0], [31.4, 1731.0], [31.5, 1731.0], [31.6, 1731.0], [31.7, 1731.0], [31.8, 1731.0], [31.9, 1731.0], [32.0, 1731.0], [32.1, 1731.0], [32.2, 1731.0], [32.3, 1731.0], [32.4, 1731.0], [32.5, 1731.0], [32.6, 1731.0], [32.7, 1731.0], [32.8, 1731.0], [32.9, 1731.0], [33.0, 1731.0], [33.1, 1731.0], [33.2, 1731.0], [33.3, 1731.0], [33.4, 1731.0], [33.5, 1731.0], [33.6, 1731.0], [33.7, 1731.0], [33.8, 1731.0], [33.9, 1731.0], [34.0, 1731.0], [34.1, 1731.0], [34.2, 1731.0], [34.3, 1731.0], [34.4, 1731.0], [34.5, 1731.0], [34.6, 1731.0], [34.7, 1731.0], [34.8, 1731.0], [34.9, 1731.0], [35.0, 1731.0], [35.1, 1731.0], [35.2, 1731.0], [35.3, 1731.0], [35.4, 1731.0], [35.5, 1731.0], [35.6, 1731.0], [35.7, 1731.0], [35.8, 1731.0], [35.9, 1731.0], [36.0, 1731.0], [36.1, 1731.0], [36.2, 1731.0], [36.3, 1731.0], [36.4, 1731.0], [36.5, 1731.0], [36.6, 1731.0], [36.7, 1731.0], [36.8, 1731.0], [36.9, 1731.0], [37.0, 1731.0], [37.1, 1731.0], [37.2, 1731.0], [37.3, 1731.0], [37.4, 1731.0], [37.5, 1731.0], [37.6, 1731.0], [37.7, 1731.0], [37.8, 1731.0], [37.9, 1731.0], [38.0, 1731.0], [38.1, 1731.0], [38.2, 1731.0], [38.3, 1731.0], [38.4, 1731.0], [38.5, 1731.0], [38.6, 1731.0], [38.7, 1731.0], [38.8, 1731.0], [38.9, 1731.0], [39.0, 1731.0], [39.1, 1731.0], [39.2, 1731.0], [39.3, 1731.0], [39.4, 1731.0], [39.5, 1731.0], [39.6, 1731.0], [39.7, 1731.0], [39.8, 1731.0], [39.9, 1731.0], [40.0, 1731.0], [40.1, 1731.0], [40.2, 1731.0], [40.3, 1731.0], [40.4, 1731.0], [40.5, 1731.0], [40.6, 1731.0], [40.7, 1731.0], [40.8, 1731.0], [40.9, 1731.0], [41.0, 1731.0], [41.1, 1731.0], [41.2, 1731.0], [41.3, 1731.0], [41.4, 1731.0], [41.5, 1731.0], [41.6, 1731.0], [41.7, 1731.0], [41.8, 1731.0], [41.9, 1731.0], [42.0, 1731.0], [42.1, 1731.0], [42.2, 1731.0], [42.3, 1731.0], [42.4, 1731.0], [42.5, 1731.0], [42.6, 1731.0], [42.7, 1731.0], [42.8, 1731.0], [42.9, 1731.0], [43.0, 1731.0], [43.1, 1731.0], [43.2, 1731.0], [43.3, 1731.0], [43.4, 1731.0], [43.5, 1731.0], [43.6, 1731.0], [43.7, 1731.0], [43.8, 1731.0], [43.9, 1731.0], [44.0, 1731.0], [44.1, 1731.0], [44.2, 1731.0], [44.3, 1731.0], [44.4, 1731.0], [44.5, 1731.0], [44.6, 1731.0], [44.7, 1731.0], [44.8, 1731.0], [44.9, 1731.0], [45.0, 1731.0], [45.1, 1731.0], [45.2, 1731.0], [45.3, 1731.0], [45.4, 1731.0], [45.5, 1731.0], [45.6, 1731.0], [45.7, 1731.0], [45.8, 1731.0], [45.9, 1731.0], [46.0, 1731.0], [46.1, 1731.0], [46.2, 1731.0], [46.3, 1731.0], [46.4, 1731.0], [46.5, 1731.0], [46.6, 1731.0], [46.7, 1731.0], [46.8, 1731.0], [46.9, 1731.0], [47.0, 1731.0], [47.1, 1731.0], [47.2, 1731.0], [47.3, 1731.0], [47.4, 1731.0], [47.5, 1731.0], [47.6, 1731.0], [47.7, 1731.0], [47.8, 1731.0], [47.9, 1731.0], [48.0, 1731.0], [48.1, 1731.0], [48.2, 1731.0], [48.3, 1731.0], [48.4, 1731.0], [48.5, 1731.0], [48.6, 1731.0], [48.7, 1731.0], [48.8, 1731.0], [48.9, 1731.0], [49.0, 1731.0], [49.1, 1731.0], [49.2, 1731.0], [49.3, 1731.0], [49.4, 1731.0], [49.5, 1731.0], [49.6, 1731.0], [49.7, 1731.0], [49.8, 1731.0], [49.9, 1731.0], [50.0, 1731.0], [50.1, 1731.0], [50.2, 1731.0], [50.3, 1731.0], [50.4, 1731.0], [50.5, 1731.0], [50.6, 1731.0], [50.7, 1731.0], [50.8, 1731.0], [50.9, 1731.0], [51.0, 1731.0], [51.1, 1731.0], [51.2, 1731.0], [51.3, 1731.0], [51.4, 1731.0], [51.5, 1731.0], [51.6, 1731.0], [51.7, 1731.0], [51.8, 1731.0], [51.9, 1731.0], [52.0, 1731.0], [52.1, 1731.0], [52.2, 1731.0], [52.3, 1731.0], [52.4, 1731.0], [52.5, 1731.0], [52.6, 1731.0], [52.7, 1731.0], [52.8, 1731.0], [52.9, 1731.0], [53.0, 1731.0], [53.1, 1731.0], [53.2, 1731.0], [53.3, 1731.0], [53.4, 1731.0], [53.5, 1731.0], [53.6, 1731.0], [53.7, 1731.0], [53.8, 1731.0], [53.9, 1731.0], [54.0, 1731.0], [54.1, 1731.0], [54.2, 1731.0], [54.3, 1731.0], [54.4, 1731.0], [54.5, 1731.0], [54.6, 1731.0], [54.7, 1731.0], [54.8, 1731.0], [54.9, 1731.0], [55.0, 1731.0], [55.1, 1731.0], [55.2, 1731.0], [55.3, 1731.0], [55.4, 1731.0], [55.5, 1731.0], [55.6, 1731.0], [55.7, 1731.0], [55.8, 1731.0], [55.9, 1731.0], [56.0, 1731.0], [56.1, 1731.0], [56.2, 1731.0], [56.3, 1731.0], [56.4, 1731.0], [56.5, 1731.0], [56.6, 1731.0], [56.7, 1731.0], [56.8, 1731.0], [56.9, 1731.0], [57.0, 1731.0], [57.1, 1731.0], [57.2, 1731.0], [57.3, 1731.0], [57.4, 1731.0], [57.5, 1731.0], [57.6, 1731.0], [57.7, 1731.0], [57.8, 1731.0], [57.9, 1731.0], [58.0, 1731.0], [58.1, 1731.0], [58.2, 1731.0], [58.3, 1731.0], [58.4, 1731.0], [58.5, 1731.0], [58.6, 1731.0], [58.7, 1731.0], [58.8, 1731.0], [58.9, 1731.0], [59.0, 1731.0], [59.1, 1731.0], [59.2, 1731.0], [59.3, 1731.0], [59.4, 1731.0], [59.5, 1731.0], [59.6, 1731.0], [59.7, 1731.0], [59.8, 1731.0], [59.9, 1731.0], [60.0, 1731.0], [60.1, 1731.0], [60.2, 1731.0], [60.3, 1731.0], [60.4, 1731.0], [60.5, 1731.0], [60.6, 1731.0], [60.7, 1731.0], [60.8, 1731.0], [60.9, 1731.0], [61.0, 1731.0], [61.1, 1731.0], [61.2, 1731.0], [61.3, 1731.0], [61.4, 1731.0], [61.5, 1731.0], [61.6, 1731.0], [61.7, 1731.0], [61.8, 1731.0], [61.9, 1731.0], [62.0, 1731.0], [62.1, 1731.0], [62.2, 1731.0], [62.3, 1731.0], [62.4, 1731.0], [62.5, 1731.0], [62.6, 1731.0], [62.7, 1731.0], [62.8, 1731.0], [62.9, 1731.0], [63.0, 1731.0], [63.1, 1731.0], [63.2, 1731.0], [63.3, 1731.0], [63.4, 1731.0], [63.5, 1731.0], [63.6, 1731.0], [63.7, 1731.0], [63.8, 1731.0], [63.9, 1731.0], [64.0, 1731.0], [64.1, 1731.0], [64.2, 1731.0], [64.3, 1731.0], [64.4, 1731.0], [64.5, 1731.0], [64.6, 1731.0], [64.7, 1731.0], [64.8, 1731.0], [64.9, 1731.0], [65.0, 1731.0], [65.1, 1731.0], [65.2, 1731.0], [65.3, 1731.0], [65.4, 1731.0], [65.5, 1731.0], [65.6, 1731.0], [65.7, 1731.0], [65.8, 1731.0], [65.9, 1731.0], [66.0, 1731.0], [66.1, 1731.0], [66.2, 1731.0], [66.3, 1731.0], [66.4, 1731.0], [66.5, 1731.0], [66.6, 1731.0], [66.7, 1731.0], [66.8, 1731.0], [66.9, 1731.0], [67.0, 1731.0], [67.1, 1731.0], [67.2, 1731.0], [67.3, 1731.0], [67.4, 1731.0], [67.5, 1731.0], [67.6, 1731.0], [67.7, 1731.0], [67.8, 1731.0], [67.9, 1731.0], [68.0, 1731.0], [68.1, 1731.0], [68.2, 1731.0], [68.3, 1731.0], [68.4, 1731.0], [68.5, 1731.0], [68.6, 1731.0], [68.7, 1731.0], [68.8, 1731.0], [68.9, 1731.0], [69.0, 1731.0], [69.1, 1731.0], [69.2, 1731.0], [69.3, 1731.0], [69.4, 1731.0], [69.5, 1731.0], [69.6, 1731.0], [69.7, 1731.0], [69.8, 1731.0], [69.9, 1731.0], [70.0, 1731.0], [70.1, 1731.0], [70.2, 1731.0], [70.3, 1731.0], [70.4, 1731.0], [70.5, 1731.0], [70.6, 1731.0], [70.7, 1731.0], [70.8, 1731.0], [70.9, 1731.0], [71.0, 1731.0], [71.1, 1731.0], [71.2, 1731.0], [71.3, 1731.0], [71.4, 1731.0], [71.5, 1731.0], [71.6, 1731.0], [71.7, 1731.0], [71.8, 1731.0], [71.9, 1731.0], [72.0, 1731.0], [72.1, 1731.0], [72.2, 1731.0], [72.3, 1731.0], [72.4, 1731.0], [72.5, 1731.0], [72.6, 1731.0], [72.7, 1731.0], [72.8, 1731.0], [72.9, 1731.0], [73.0, 1731.0], [73.1, 1731.0], [73.2, 1731.0], [73.3, 1731.0], [73.4, 1731.0], [73.5, 1731.0], [73.6, 1731.0], [73.7, 1731.0], [73.8, 1731.0], [73.9, 1731.0], [74.0, 1731.0], [74.1, 1731.0], [74.2, 1731.0], [74.3, 1731.0], [74.4, 1731.0], [74.5, 1731.0], [74.6, 1731.0], [74.7, 1731.0], [74.8, 1731.0], [74.9, 1731.0], [75.0, 1731.0], [75.1, 1731.0], [75.2, 1731.0], [75.3, 1731.0], [75.4, 1731.0], [75.5, 1731.0], [75.6, 1731.0], [75.7, 1731.0], [75.8, 1731.0], [75.9, 1731.0], [76.0, 1731.0], [76.1, 1731.0], [76.2, 1731.0], [76.3, 1731.0], [76.4, 1731.0], [76.5, 1731.0], [76.6, 1731.0], [76.7, 1731.0], [76.8, 1731.0], [76.9, 1731.0], [77.0, 1731.0], [77.1, 1731.0], [77.2, 1731.0], [77.3, 1731.0], [77.4, 1731.0], [77.5, 1731.0], [77.6, 1731.0], [77.7, 1731.0], [77.8, 1731.0], [77.9, 1731.0], [78.0, 1731.0], [78.1, 1731.0], [78.2, 1731.0], [78.3, 1731.0], [78.4, 1731.0], [78.5, 1731.0], [78.6, 1731.0], [78.7, 1731.0], [78.8, 1731.0], [78.9, 1731.0], [79.0, 1731.0], [79.1, 1731.0], [79.2, 1731.0], [79.3, 1731.0], [79.4, 1731.0], [79.5, 1731.0], [79.6, 1731.0], [79.7, 1731.0], [79.8, 1731.0], [79.9, 1731.0], [80.0, 1731.0], [80.1, 1731.0], [80.2, 1731.0], [80.3, 1731.0], [80.4, 1731.0], [80.5, 1731.0], [80.6, 1731.0], [80.7, 1731.0], [80.8, 1731.0], [80.9, 1731.0], [81.0, 1731.0], [81.1, 1731.0], [81.2, 1731.0], [81.3, 1731.0], [81.4, 1731.0], [81.5, 1731.0], [81.6, 1731.0], [81.7, 1731.0], [81.8, 1731.0], [81.9, 1731.0], [82.0, 1731.0], [82.1, 1731.0], [82.2, 1731.0], [82.3, 1731.0], [82.4, 1731.0], [82.5, 1731.0], [82.6, 1731.0], [82.7, 1731.0], [82.8, 1731.0], [82.9, 1731.0], [83.0, 1731.0], [83.1, 1731.0], [83.2, 1731.0], [83.3, 1731.0], [83.4, 1731.0], [83.5, 1731.0], [83.6, 1731.0], [83.7, 1731.0], [83.8, 1731.0], [83.9, 1731.0], [84.0, 1731.0], [84.1, 1731.0], [84.2, 1731.0], [84.3, 1731.0], [84.4, 1731.0], [84.5, 1731.0], [84.6, 1731.0], [84.7, 1731.0], [84.8, 1731.0], [84.9, 1731.0], [85.0, 1731.0], [85.1, 1731.0], [85.2, 1731.0], [85.3, 1731.0], [85.4, 1731.0], [85.5, 1731.0], [85.6, 1731.0], [85.7, 1731.0], [85.8, 1731.0], [85.9, 1731.0], [86.0, 1731.0], [86.1, 1731.0], [86.2, 1731.0], [86.3, 1731.0], [86.4, 1731.0], [86.5, 1731.0], [86.6, 1731.0], [86.7, 1731.0], [86.8, 1731.0], [86.9, 1731.0], [87.0, 1731.0], [87.1, 1731.0], [87.2, 1731.0], [87.3, 1731.0], [87.4, 1731.0], [87.5, 1731.0], [87.6, 1731.0], [87.7, 1731.0], [87.8, 1731.0], [87.9, 1731.0], [88.0, 1731.0], [88.1, 1731.0], [88.2, 1731.0], [88.3, 1731.0], [88.4, 1731.0], [88.5, 1731.0], [88.6, 1731.0], [88.7, 1731.0], [88.8, 1731.0], [88.9, 1731.0], [89.0, 1731.0], [89.1, 1731.0], [89.2, 1731.0], [89.3, 1731.0], [89.4, 1731.0], [89.5, 1731.0], [89.6, 1731.0], [89.7, 1731.0], [89.8, 1731.0], [89.9, 1731.0], [90.0, 1731.0], [90.1, 1731.0], [90.2, 1731.0], [90.3, 1731.0], [90.4, 1731.0], [90.5, 1731.0], [90.6, 1731.0], [90.7, 1731.0], [90.8, 1731.0], [90.9, 1731.0], [91.0, 1731.0], [91.1, 1731.0], [91.2, 1731.0], [91.3, 1731.0], [91.4, 1731.0], [91.5, 1731.0], [91.6, 1731.0], [91.7, 1731.0], [91.8, 1731.0], [91.9, 1731.0], [92.0, 1731.0], [92.1, 1731.0], [92.2, 1731.0], [92.3, 1731.0], [92.4, 1731.0], [92.5, 1731.0], [92.6, 1731.0], [92.7, 1731.0], [92.8, 1731.0], [92.9, 1731.0], [93.0, 1731.0], [93.1, 1731.0], [93.2, 1731.0], [93.3, 1731.0], [93.4, 1731.0], [93.5, 1731.0], [93.6, 1731.0], [93.7, 1731.0], [93.8, 1731.0], [93.9, 1731.0], [94.0, 1731.0], [94.1, 1731.0], [94.2, 1731.0], [94.3, 1731.0], [94.4, 1731.0], [94.5, 1731.0], [94.6, 1731.0], [94.7, 1731.0], [94.8, 1731.0], [94.9, 1731.0], [95.0, 1731.0], [95.1, 1731.0], [95.2, 1731.0], [95.3, 1731.0], [95.4, 1731.0], [95.5, 1731.0], [95.6, 1731.0], [95.7, 1731.0], [95.8, 1731.0], [95.9, 1731.0], [96.0, 1731.0], [96.1, 1731.0], [96.2, 1731.0], [96.3, 1731.0], [96.4, 1731.0], [96.5, 1731.0], [96.6, 1731.0], [96.7, 1731.0], [96.8, 1731.0], [96.9, 1731.0], [97.0, 1731.0], [97.1, 1731.0], [97.2, 1731.0], [97.3, 1731.0], [97.4, 1731.0], [97.5, 1731.0], [97.6, 1731.0], [97.7, 1731.0], [97.8, 1731.0], [97.9, 1731.0], [98.0, 1731.0], [98.1, 1731.0], [98.2, 1731.0], [98.3, 1731.0], [98.4, 1731.0], [98.5, 1731.0], [98.6, 1731.0], [98.7, 1731.0], [98.8, 1731.0], [98.9, 1731.0], [99.0, 1731.0], [99.1, 1731.0], [99.2, 1731.0], [99.3, 1731.0], [99.4, 1731.0], [99.5, 1731.0], [99.6, 1731.0], [99.7, 1731.0], [99.8, 1731.0], [99.9, 1731.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 884.0, "series": [{"data": [[2100.0, 3.0], [2200.0, 3.0], [2300.0, 1.0], [2400.0, 1.0], [600.0, 1.0], [2500.0, 1.0], [2600.0, 2.0], [700.0, 36.0], [800.0, 88.0], [900.0, 68.0], [1000.0, 34.0], [4200.0, 1.0], [1100.0, 20.0], [1200.0, 8.0], [1300.0, 3.0], [1400.0, 2.0], [1500.0, 3.0], [25600.0, 1.0], [1600.0, 6.0], [1700.0, 2.0], [1800.0, 4.0], [1900.0, 3.0], [2000.0, 2.0]], "isOverall": false, "label": "trackVehicleExit", "isController": false}, {"data": [[2100.0, 2.0], [600.0, 67.0], [2400.0, 1.0], [700.0, 28.0], [800.0, 19.0], [900.0, 7.0], [3700.0, 1.0], [1000.0, 8.0], [4500.0, 1.0], [1100.0, 4.0], [1200.0, 3.0], [300.0, 2.0], [1300.0, 2.0], [1400.0, 5.0], [1500.0, 2.0], [400.0, 165.0], [1600.0, 4.0], [1700.0, 1.0], [1800.0, 2.0], [1900.0, 2.0], [500.0, 201.0], [2000.0, 1.0]], "isOverall": false, "label": "trackVehicleEntry", "isController": false}, {"data": [[300.0, 884.0], [600.0, 2.0], [1200.0, 1.0], [400.0, 159.0], [800.0, 2.0]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[1700.0, 1.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 25600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 51.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1216.0, "series": [{"data": [[0.0, 1216.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 603.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 51.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.7195337E12, "maxY": 1.0, "series": [{"data": [[1.7195337E12, 1.0]], "isOverall": false, "label": "setUpAutenticacionCognito", "isController": false}, {"data": [[1.7195337E12, 1.0], [1.71953418E12, 1.0], [1.719534E12, 1.0], [1.71953406E12, 1.0], [1.71953388E12, 1.0], [1.71953394E12, 1.0], [1.71953376E12, 1.0], [1.71953424E12, 1.0], [1.71953382E12, 1.0], [1.7195343E12, 1.0], [1.71953412E12, 1.0]], "isOverall": false, "label": "consultarPlaca", "isController": false}, {"data": [[1.71953418E12, 1.0], [1.719534E12, 1.0], [1.71953406E12, 1.0], [1.71953388E12, 1.0], [1.71953394E12, 1.0], [1.71953376E12, 1.0], [1.71953424E12, 1.0], [1.71953382E12, 1.0], [1.7195343E12, 1.0], [1.71953412E12, 1.0]], "isOverall": false, "label": "registrarEntrada", "isController": false}, {"data": [[1.71953418E12, 1.0], [1.719534E12, 1.0], [1.71953406E12, 1.0], [1.71953388E12, 1.0], [1.71953394E12, 1.0], [1.71953424E12, 1.0], [1.7195343E12, 1.0], [1.71953412E12, 1.0]], "isOverall": false, "label": "registrarSalida", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7195343E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 363.1468926553673, "minX": 1.0, "maxY": 1731.0, "series": [{"data": [[3.0, 1138.4129692832767]], "isOverall": false, "label": "trackVehicleExit", "isController": false}, {"data": [[3.0, 1138.4129692832767]], "isOverall": false, "label": "trackVehicleExit-Aggregated", "isController": false}, {"data": [[2.0, 581.1980198019802], [1.0, 507.0], [3.0, 647.8544600938972]], "isOverall": false, "label": "trackVehicleEntry", "isController": false}, {"data": [[2.804924242424241, 634.837121212121]], "isOverall": false, "label": "trackVehicleEntry-Aggregated", "isController": false}, {"data": [[1.0, 363.36781609195407], [2.0, 363.1468926553673], [3.0, 368.67857142857144]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[2.6650763358778606, 367.3034351145037]], "isOverall": false, "label": "getPlate-Aggregated", "isController": false}, {"data": [[1.0, 1731.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}, {"data": [[1.0, 1731.0]], "isOverall": false, "label": "loginAFlypass-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 498.2, "minX": 1.7195337E12, "maxY": 3537.2166666666667, "series": [{"data": [[1.7195337E12, 624.9], [1.71953418E12, 1793.8833333333334], [1.719534E12, 1445.8166666666666], [1.71953406E12, 1722.0166666666667], [1.71953388E12, 1458.0], [1.71953394E12, 1696.7166666666667], [1.71953376E12, 1271.8666666666666], [1.71953424E12, 1741.3333333333333], [1.71953382E12, 1380.8833333333334], [1.7195343E12, 498.2], [1.71953412E12, 1774.1]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7195337E12, 1099.6], [1.71953418E12, 3537.2166666666667], [1.719534E12, 2819.0333333333333], [1.71953406E12, 3389.4], [1.71953388E12, 2844.633333333333], [1.71953394E12, 3338.733333333333], [1.71953376E12, 2465.5333333333333], [1.71953424E12, 3428.9666666666667], [1.71953382E12, 2699.9666666666667], [1.7195343E12, 982.1666666666666], [1.71953412E12, 3494.1833333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7195343E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 360.4433962264151, "minX": 1.7195337E12, "maxY": 2614.8333333333335, "series": [{"data": [[1.71953418E12, 851.5714285714283], [1.719534E12, 1579.1935483870968], [1.71953406E12, 998.6976744186047], [1.71953388E12, 2614.8333333333335], [1.71953394E12, 1013.1428571428572], [1.71953424E12, 877.5000000000001], [1.7195343E12, 997.6923076923076], [1.71953412E12, 917.4666666666665]], "isOverall": false, "label": "trackVehicleExit", "isController": false}, {"data": [[1.71953418E12, 542.0952380952382], [1.719534E12, 1050.9999999999995], [1.71953406E12, 580.4833333333331], [1.71953388E12, 862.5], [1.71953394E12, 580.3728813559322], [1.71953376E12, 632.1960784313726], [1.71953424E12, 571.55], [1.71953382E12, 529.2812500000002], [1.7195343E12, 603.0555555555555], [1.71953412E12, 558.1746031746032]], "isOverall": false, "label": "trackVehicleEntry", "isController": false}, {"data": [[1.7195337E12, 365.1200000000001], [1.71953418E12, 368.6634615384617], [1.719534E12, 383.6796116504854], [1.71953406E12, 368.1714285714286], [1.71953388E12, 360.4433962264151], [1.71953394E12, 364.12499999999994], [1.71953376E12, 364.1886792452831], [1.71953424E12, 374.7403846153846], [1.71953382E12, 360.7358490566039], [1.7195343E12, 370.65517241379314], [1.71953412E12, 362.1886792452828]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[1.7195337E12, 1731.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7195343E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 360.377358490566, "minX": 1.7195337E12, "maxY": 2614.791666666667, "series": [{"data": [[1.71953418E12, 851.5102040816327], [1.719534E12, 1579.0967741935485], [1.71953406E12, 998.6976744186047], [1.71953388E12, 2614.791666666667], [1.71953394E12, 1013.0952380952383], [1.71953424E12, 877.4782608695651], [1.7195343E12, 997.5384615384614], [1.71953412E12, 917.4222222222222]], "isOverall": false, "label": "trackVehicleExit", "isController": false}, {"data": [[1.71953418E12, 542.0793650793652], [1.719534E12, 1050.9285714285716], [1.71953406E12, 580.4499999999999], [1.71953388E12, 862.3125000000001], [1.71953394E12, 579.457627118644], [1.71953376E12, 632.1372549019609], [1.71953424E12, 571.55], [1.71953382E12, 529.2656250000001], [1.7195343E12, 602.8888888888889], [1.71953412E12, 558.1587301587304]], "isOverall": false, "label": "trackVehicleEntry", "isController": false}, {"data": [[1.7195337E12, 365.0133333333334], [1.71953418E12, 368.5961538461538], [1.719534E12, 383.63106796116523], [1.71953406E12, 368.1047619047619], [1.71953388E12, 360.377358490566], [1.71953394E12, 364.0480769230769], [1.71953376E12, 364.0283018867923], [1.71953424E12, 374.6826923076924], [1.71953382E12, 360.6698113207547], [1.7195343E12, 370.62068965517244], [1.71953412E12, 362.15094339622635]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[1.7195337E12, 1728.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7195343E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 267.23584905660385, "minX": 1.7195337E12, "maxY": 904.0, "series": [{"data": [[1.71953418E12, 268.2244897959184], [1.719534E12, 270.96774193548396], [1.71953406E12, 272.69767441860466], [1.71953388E12, 270.49999999999994], [1.71953394E12, 268.1904761904761], [1.71953424E12, 272.6521739130435], [1.7195343E12, 290.9230769230769], [1.71953412E12, 273.1333333333334]], "isOverall": false, "label": "trackVehicleExit", "isController": false}, {"data": [[1.71953418E12, 269.3492063492064], [1.719534E12, 269.2857142857142], [1.71953406E12, 274.73333333333323], [1.71953388E12, 272.4166666666667], [1.71953394E12, 271.40677966101697], [1.71953376E12, 276.5098039215686], [1.71953424E12, 273.73333333333323], [1.71953382E12, 272.09375], [1.7195343E12, 277.72222222222223], [1.71953412E12, 272.68253968253964]], "isOverall": false, "label": "trackVehicleEntry", "isController": false}, {"data": [[1.7195337E12, 271.1733333333332], [1.71953418E12, 274.42307692307696], [1.719534E12, 273.4854368932039], [1.71953406E12, 271.6380952380953], [1.71953388E12, 267.23584905660385], [1.71953394E12, 269.48076923076934], [1.71953376E12, 272.0660377358491], [1.71953424E12, 274.50961538461536], [1.71953382E12, 268.64150943396226], [1.7195343E12, 272.51724137931035], [1.71953412E12, 269.05660377358475]], "isOverall": false, "label": "getPlate", "isController": false}, {"data": [[1.7195337E12, 904.0]], "isOverall": false, "label": "loginAFlypass", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7195343E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 310.0, "minX": 1.7195337E12, "maxY": 25650.0, "series": [{"data": [[1.7195337E12, 1731.0], [1.71953418E12, 1507.0], [1.719534E12, 4255.0], [1.71953406E12, 1697.0], [1.71953388E12, 25650.0], [1.71953394E12, 1501.0], [1.71953376E12, 4560.0], [1.71953424E12, 1388.0], [1.71953382E12, 802.0], [1.7195343E12, 1717.0], [1.71953412E12, 1501.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7195337E12, 412.3], [1.71953418E12, 841.2], [1.719534E12, 1655.2000000000003], [1.71953406E12, 973.4], [1.71953388E12, 1682.3], [1.71953394E12, 985.8], [1.71953376E12, 553.0000000000001], [1.71953424E12, 869.7], [1.71953382E12, 536.0], [1.7195343E12, 1015.0999999999999], [1.71953412E12, 886.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7195337E12, 1731.0], [1.71953418E12, 1168.2799999999997], [1.719534E12, 3893.8699999999953], [1.71953406E12, 1333.0399999999995], [1.71953388E12, 7491.850000000183], [1.71953394E12, 1302.4599999999998], [1.71953376E12, 2753.299999999961], [1.71953424E12, 1146.5699999999997], [1.71953382E12, 759.3999999999995], [1.7195343E12, 1717.0], [1.71953412E12, 1445.8999999999985]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7195337E12, 422.0], [1.71953418E12, 897.15], [1.719534E12, 1968.3500000000008], [1.71953406E12, 1032.6], [1.71953388E12, 2186.6999999999994], [1.71953394E12, 1071.0], [1.71953376E12, 659.6999999999998], [1.71953424E12, 961.3499999999999], [1.71953382E12, 625.6499999999996], [1.7195343E12, 1249.9999999999995], [1.71953412E12, 979.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7195337E12, 313.0], [1.71953418E12, 310.0], [1.719534E12, 310.0], [1.71953406E12, 313.0], [1.71953388E12, 314.0], [1.71953394E12, 312.0], [1.71953376E12, 314.0], [1.71953424E12, 310.0], [1.71953382E12, 311.0], [1.7195343E12, 318.0], [1.71953412E12, 312.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7195337E12, 366.5], [1.71953418E12, 437.5], [1.719534E12, 409.0], [1.71953406E12, 439.0], [1.71953388E12, 397.5], [1.71953394E12, 426.0], [1.71953376E12, 385.0], [1.71953424E12, 446.0], [1.71953382E12, 389.5], [1.7195343E12, 449.5], [1.71953412E12, 420.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7195343E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 367.5, "minX": 1.0, "maxY": 439.0, "series": [{"data": [[1.0, 367.5], [2.0, 378.0], [4.0, 439.0], [5.0, 439.0], [3.0, 402.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 367.5, "minX": 1.0, "maxY": 439.0, "series": [{"data": [[1.0, 367.5], [2.0, 378.0], [4.0, 439.0], [5.0, 439.0], [3.0, 402.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.9666666666666667, "minX": 1.7195337E12, "maxY": 3.6, "series": [{"data": [[1.7195337E12, 1.2666666666666666], [1.71953418E12, 3.6], [1.719534E12, 2.9], [1.71953406E12, 3.4833333333333334], [1.71953388E12, 2.95], [1.71953394E12, 3.433333333333333], [1.71953376E12, 2.6333333333333333], [1.71953424E12, 3.5], [1.71953382E12, 2.8666666666666667], [1.7195343E12, 0.9666666666666667], [1.71953412E12, 3.566666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7195343E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.48333333333333334, "minX": 1.7195337E12, "maxY": 1.8666666666666667, "series": [{"data": [[1.7195337E12, 1.2666666666666666], [1.71953418E12, 1.7333333333333334], [1.719534E12, 1.7166666666666666], [1.71953406E12, 1.75], [1.71953388E12, 1.7666666666666666], [1.71953394E12, 1.7333333333333334], [1.71953376E12, 1.7666666666666666], [1.71953424E12, 1.7333333333333334], [1.71953382E12, 1.7666666666666666], [1.7195343E12, 0.48333333333333334], [1.71953412E12, 1.7666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71953418E12, 1.8666666666666667], [1.719534E12, 1.2166666666666666], [1.71953406E12, 1.7166666666666666], [1.71953388E12, 1.2], [1.71953394E12, 1.6833333333333333], [1.71953376E12, 0.85], [1.71953424E12, 1.7666666666666666], [1.71953382E12, 1.0666666666666667], [1.7195343E12, 0.5166666666666667], [1.71953412E12, 1.8]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7195343E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7195337E12, "maxY": 1.7666666666666666, "series": [{"data": [[1.7195337E12, 0.016666666666666666]], "isOverall": false, "label": "loginAFlypass-success", "isController": false}, {"data": [[1.71953418E12, 1.05], [1.719534E12, 0.7], [1.71953406E12, 1.0], [1.71953388E12, 0.8], [1.71953394E12, 0.9833333333333333], [1.71953376E12, 0.85], [1.71953424E12, 1.0], [1.71953382E12, 1.0666666666666667], [1.7195343E12, 0.3], [1.71953412E12, 1.05]], "isOverall": false, "label": "trackVehicleEntry-success", "isController": false}, {"data": [[1.71953418E12, 0.8166666666666667], [1.719534E12, 0.5166666666666667], [1.71953406E12, 0.7166666666666667], [1.71953388E12, 0.4], [1.71953394E12, 0.7], [1.71953424E12, 0.7666666666666667], [1.7195343E12, 0.21666666666666667], [1.71953412E12, 0.75]], "isOverall": false, "label": "trackVehicleExit-success", "isController": false}, {"data": [[1.7195337E12, 1.25], [1.71953418E12, 1.7333333333333334], [1.719534E12, 1.7166666666666666], [1.71953406E12, 1.75], [1.71953388E12, 1.7666666666666666], [1.71953394E12, 1.7333333333333334], [1.71953376E12, 1.7666666666666666], [1.71953424E12, 1.7333333333333334], [1.71953382E12, 1.7666666666666666], [1.7195343E12, 0.48333333333333334], [1.71953412E12, 1.7666666666666666]], "isOverall": false, "label": "getPlate-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7195343E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.7195337E12, "maxY": 3.6, "series": [{"data": [[1.7195337E12, 1.2666666666666666], [1.71953418E12, 3.6], [1.719534E12, 2.933333333333333], [1.71953406E12, 3.466666666666667], [1.71953388E12, 2.966666666666667], [1.71953394E12, 3.4166666666666665], [1.71953376E12, 2.6166666666666667], [1.71953424E12, 3.5], [1.71953382E12, 2.8333333333333335], [1.7195343E12, 1.0], [1.71953412E12, 3.566666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7195343E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

